
MENU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080068f0  080068f0  000168f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  08006bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000029c  200001f4  08006dc4  000201f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000490  08006dc4  00020490  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002478e  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000485f  00000000  00000000  000449b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a492  00000000  00000000  00049211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ed0  00000000  00000000  000536a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012e8  00000000  00000000  00054578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000993f  00000000  00000000  00055860  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000055fc  00000000  00000000  0005f19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006479b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a80  00000000  00000000  00064818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068d4 	.word	0x080068d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	080068d4 	.word	0x080068d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b97a 	b.w	8000f3c <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	468c      	mov	ip, r1
 8000c66:	460d      	mov	r5, r1
 8000c68:	4604      	mov	r4, r0
 8000c6a:	9e08      	ldr	r6, [sp, #32]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d151      	bne.n	8000d14 <__udivmoddi4+0xb4>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	4617      	mov	r7, r2
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0xf2>
 8000c76:	fab2 fe82 	clz	lr, r2
 8000c7a:	f1be 0f00 	cmp.w	lr, #0
 8000c7e:	d00b      	beq.n	8000c98 <__udivmoddi4+0x38>
 8000c80:	f1ce 0c20 	rsb	ip, lr, #32
 8000c84:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c88:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c8c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c90:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c94:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c98:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c9c:	0c25      	lsrs	r5, r4, #16
 8000c9e:	fbbc f8fa 	udiv	r8, ip, sl
 8000ca2:	fa1f f987 	uxth.w	r9, r7
 8000ca6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000caa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cae:	fb08 f309 	mul.w	r3, r8, r9
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x6c>
 8000cb6:	19ed      	adds	r5, r5, r7
 8000cb8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cbc:	f080 8123 	bcs.w	8000f06 <__udivmoddi4+0x2a6>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	f240 8120 	bls.w	8000f06 <__udivmoddi4+0x2a6>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	443d      	add	r5, r7
 8000ccc:	1aed      	subs	r5, r5, r3
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cd4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cdc:	fb00 f909 	mul.w	r9, r0, r9
 8000ce0:	45a1      	cmp	r9, r4
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x98>
 8000ce4:	19e4      	adds	r4, r4, r7
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	f080 810a 	bcs.w	8000f02 <__udivmoddi4+0x2a2>
 8000cee:	45a1      	cmp	r9, r4
 8000cf0:	f240 8107 	bls.w	8000f02 <__udivmoddi4+0x2a2>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	443c      	add	r4, r7
 8000cf8:	eba4 0409 	sub.w	r4, r4, r9
 8000cfc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d00:	2100      	movs	r1, #0
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d061      	beq.n	8000dca <__udivmoddi4+0x16a>
 8000d06:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6034      	str	r4, [r6, #0]
 8000d0e:	6073      	str	r3, [r6, #4]
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	428b      	cmp	r3, r1
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0xc8>
 8000d18:	2e00      	cmp	r6, #0
 8000d1a:	d054      	beq.n	8000dc6 <__udivmoddi4+0x166>
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d22:	4608      	mov	r0, r1
 8000d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d28:	fab3 f183 	clz	r1, r3
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	f040 808e 	bne.w	8000e4e <__udivmoddi4+0x1ee>
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xdc>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80fa 	bhi.w	8000f30 <__udivmoddi4+0x2d0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	46ac      	mov	ip, r5
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d03f      	beq.n	8000dca <__udivmoddi4+0x16a>
 8000d4a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	b912      	cbnz	r2, 8000d5a <__udivmoddi4+0xfa>
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d5a:	fab7 fe87 	clz	lr, r7
 8000d5e:	f1be 0f00 	cmp.w	lr, #0
 8000d62:	d134      	bne.n	8000dce <__udivmoddi4+0x16e>
 8000d64:	1beb      	subs	r3, r5, r7
 8000d66:	0c3a      	lsrs	r2, r7, #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d72:	0c25      	lsrs	r5, r4, #16
 8000d74:	fb02 3318 	mls	r3, r2, r8, r3
 8000d78:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d7c:	fb0c f308 	mul.w	r3, ip, r8
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x134>
 8000d84:	19ed      	adds	r5, r5, r7
 8000d86:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x132>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	f200 80d1 	bhi.w	8000f34 <__udivmoddi4+0x2d4>
 8000d92:	4680      	mov	r8, r0
 8000d94:	1aed      	subs	r5, r5, r3
 8000d96:	b2a3      	uxth	r3, r4
 8000d98:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d9c:	fb02 5510 	mls	r5, r2, r0, r5
 8000da0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000da4:	fb0c fc00 	mul.w	ip, ip, r0
 8000da8:	45a4      	cmp	ip, r4
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x15c>
 8000dac:	19e4      	adds	r4, r4, r7
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x15a>
 8000db4:	45a4      	cmp	ip, r4
 8000db6:	f200 80b8 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	eba4 040c 	sub.w	r4, r4, ip
 8000dc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc4:	e79d      	b.n	8000d02 <__udivmoddi4+0xa2>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	f1ce 0420 	rsb	r4, lr, #32
 8000dd2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dda:	fa20 f804 	lsr.w	r8, r0, r4
 8000dde:	0c3a      	lsrs	r2, r7, #16
 8000de0:	fa25 f404 	lsr.w	r4, r5, r4
 8000de4:	ea48 0803 	orr.w	r8, r8, r3
 8000de8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dec:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000df0:	fb02 4411 	mls	r4, r2, r1, r4
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dfc:	fb01 f30c 	mul.w	r3, r1, ip
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e06:	d909      	bls.n	8000e1c <__udivmoddi4+0x1bc>
 8000e08:	19ed      	adds	r5, r5, r7
 8000e0a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e0e:	f080 808a 	bcs.w	8000f26 <__udivmoddi4+0x2c6>
 8000e12:	42ab      	cmp	r3, r5
 8000e14:	f240 8087 	bls.w	8000f26 <__udivmoddi4+0x2c6>
 8000e18:	3902      	subs	r1, #2
 8000e1a:	443d      	add	r5, r7
 8000e1c:	1aeb      	subs	r3, r5, r3
 8000e1e:	fa1f f588 	uxth.w	r5, r8
 8000e22:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e26:	fb02 3310 	mls	r3, r2, r0, r3
 8000e2a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e2e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x1e6>
 8000e36:	19ed      	adds	r5, r5, r7
 8000e38:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3c:	d26f      	bcs.n	8000f1e <__udivmoddi4+0x2be>
 8000e3e:	42ab      	cmp	r3, r5
 8000e40:	d96d      	bls.n	8000f1e <__udivmoddi4+0x2be>
 8000e42:	3802      	subs	r0, #2
 8000e44:	443d      	add	r5, r7
 8000e46:	1aeb      	subs	r3, r5, r3
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	e78f      	b.n	8000d6e <__udivmoddi4+0x10e>
 8000e4e:	f1c1 0720 	rsb	r7, r1, #32
 8000e52:	fa22 f807 	lsr.w	r8, r2, r7
 8000e56:	408b      	lsls	r3, r1
 8000e58:	fa05 f401 	lsl.w	r4, r5, r1
 8000e5c:	ea48 0303 	orr.w	r3, r8, r3
 8000e60:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e64:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e6e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e72:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e76:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e7a:	fa1f f883 	uxth.w	r8, r3
 8000e7e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e82:	fb09 f408 	mul.w	r4, r9, r8
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x244>
 8000e92:	18ed      	adds	r5, r5, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	d243      	bcs.n	8000f22 <__udivmoddi4+0x2c2>
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	d941      	bls.n	8000f22 <__udivmoddi4+0x2c2>
 8000e9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea2:	441d      	add	r5, r3
 8000ea4:	1b2d      	subs	r5, r5, r4
 8000ea6:	fa1f fe8e 	uxth.w	lr, lr
 8000eaa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000eae:	fb0c 5510 	mls	r5, ip, r0, r5
 8000eb2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000eb6:	fb00 f808 	mul.w	r8, r0, r8
 8000eba:	45a0      	cmp	r8, r4
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x26e>
 8000ebe:	18e4      	adds	r4, r4, r3
 8000ec0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ec4:	d229      	bcs.n	8000f1a <__udivmoddi4+0x2ba>
 8000ec6:	45a0      	cmp	r8, r4
 8000ec8:	d927      	bls.n	8000f1a <__udivmoddi4+0x2ba>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	441c      	add	r4, r3
 8000ece:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed2:	eba4 0408 	sub.w	r4, r4, r8
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	454c      	cmp	r4, r9
 8000edc:	46c6      	mov	lr, r8
 8000ede:	464d      	mov	r5, r9
 8000ee0:	d315      	bcc.n	8000f0e <__udivmoddi4+0x2ae>
 8000ee2:	d012      	beq.n	8000f0a <__udivmoddi4+0x2aa>
 8000ee4:	b156      	cbz	r6, 8000efc <__udivmoddi4+0x29c>
 8000ee6:	ebba 030e 	subs.w	r3, sl, lr
 8000eea:	eb64 0405 	sbc.w	r4, r4, r5
 8000eee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef2:	40cb      	lsrs	r3, r1
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	40cc      	lsrs	r4, r1
 8000ef8:	6037      	str	r7, [r6, #0]
 8000efa:	6074      	str	r4, [r6, #4]
 8000efc:	2100      	movs	r1, #0
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	4618      	mov	r0, r3
 8000f04:	e6f8      	b.n	8000cf8 <__udivmoddi4+0x98>
 8000f06:	4690      	mov	r8, r2
 8000f08:	e6e0      	b.n	8000ccc <__udivmoddi4+0x6c>
 8000f0a:	45c2      	cmp	sl, r8
 8000f0c:	d2ea      	bcs.n	8000ee4 <__udivmoddi4+0x284>
 8000f0e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f12:	eb69 0503 	sbc.w	r5, r9, r3
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7e4      	b.n	8000ee4 <__udivmoddi4+0x284>
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	e7d7      	b.n	8000ece <__udivmoddi4+0x26e>
 8000f1e:	4640      	mov	r0, r8
 8000f20:	e791      	b.n	8000e46 <__udivmoddi4+0x1e6>
 8000f22:	4681      	mov	r9, r0
 8000f24:	e7be      	b.n	8000ea4 <__udivmoddi4+0x244>
 8000f26:	4601      	mov	r1, r0
 8000f28:	e778      	b.n	8000e1c <__udivmoddi4+0x1bc>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	443c      	add	r4, r7
 8000f2e:	e745      	b.n	8000dbc <__udivmoddi4+0x15c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xe6>
 8000f34:	f1a8 0802 	sub.w	r8, r8, #2
 8000f38:	443d      	add	r5, r7
 8000f3a:	e72b      	b.n	8000d94 <__udivmoddi4+0x134>

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <AD9834_init>:
	DDS.amplitude.prefix = prefix;
}

void AD9834_amplitude_set(float value)
{
	DDS.amplitude.value = value;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <AD9834_init+0x20>)
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <AD9834_init+0x24>)
 8000f44:	619a      	str	r2, [r3, #24]
	DDS.amplitude.prefix = prefix;
 8000f46:	22fd      	movs	r2, #253	; 0xfd
 8000f48:	771a      	strb	r2, [r3, #28]
		value = 0;
	}

	if (reg == AD9834_REG0)
	{
		DDS.FREQ0.value = value;
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <AD9834_init+0x28>)
 8000f4c:	601a      	str	r2, [r3, #0]
		DDS.FREQ0.prefix = prefix;
 8000f4e:	2206      	movs	r2, #6
 8000f50:	711a      	strb	r2, [r3, #4]

void AD9834_phase_set(AD9834_register_t reg, float value)
{
	if (reg == AD9834_REG0)
	{
		DDS.PHASE0 = value;
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
	// here is  will be written code, that sends command to AD9834 to write 12 bits into PHASE0 register
}

void AD9834_form_set(AD9834_form_t form)
{
	DDS.form = form;
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000240 	.word	0x20000240
 8000f64:	40400000 	.word	0x40400000
 8000f68:	4806f600 	.word	0x4806f600

08000f6c <AD9834_frequency_prefix_set>:
{
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <AD9834_frequency_prefix_set+0xc>)
	if (reg == AD9834_REG0)
 8000f6e:	b908      	cbnz	r0, 8000f74 <AD9834_frequency_prefix_set+0x8>
		DDS.FREQ0.prefix = prefix;
 8000f70:	7119      	strb	r1, [r3, #4]
 8000f72:	4770      	bx	lr
		DDS.FREQ1.prefix = prefix;
 8000f74:	7319      	strb	r1, [r3, #12]
 8000f76:	4770      	bx	lr
 8000f78:	20000240 	.word	0x20000240

08000f7c <AD9834_amplitude_prefix_set>:
	DDS.amplitude.prefix = prefix;
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <AD9834_amplitude_prefix_set+0x8>)
 8000f7e:	7718      	strb	r0, [r3, #28]
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000240 	.word	0x20000240

08000f88 <AD9834_amplitude_set>:
	DDS.amplitude.value = value;
 8000f88:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <AD9834_amplitude_set+0x8>)
 8000f8a:	ed83 0a06 	vstr	s0, [r3, #24]
 8000f8e:	4770      	bx	lr
 8000f90:	20000240 	.word	0x20000240

08000f94 <AD9834_frequency_set>:
	if (value > AD9834_FREQUENCY_MAX)
 8000f94:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000fcc <AD9834_frequency_set+0x38>
 8000f98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	dc0d      	bgt.n	8000fbe <AD9834_frequency_set+0x2a>
		value = 0;
 8000fa2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000fa6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000fd0 <AD9834_frequency_set+0x3c>
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	bf48      	it	mi
 8000fb0:	eeb0 0a67 	vmovmi.f32	s0, s15
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <AD9834_frequency_set+0x40>)
	if (reg == AD9834_REG0)
 8000fb6:	b928      	cbnz	r0, 8000fc4 <AD9834_frequency_set+0x30>
		DDS.FREQ0.value = value;
 8000fb8:	ed83 0a00 	vstr	s0, [r3]
 8000fbc:	4770      	bx	lr
		value = AD9834_FREQUENCY_MAX;
 8000fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc2:	e7f7      	b.n	8000fb4 <AD9834_frequency_set+0x20>
		DDS.FREQ1.value = value;
 8000fc4:	ed83 0a02 	vstr	s0, [r3, #8]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	4c0f0d18 	.word	0x4c0f0d18
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	20000240 	.word	0x20000240

08000fd8 <AD9834_form_set>:
	DDS.form = form;
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <AD9834_form_set+0x8>)
 8000fda:	f883 0020 	strb.w	r0, [r3, #32]
 8000fde:	4770      	bx	lr
 8000fe0:	20000240 	.word	0x20000240

08000fe4 <AD9834_amplitude_prefix_get>:
}

prefix_CI_unit_t AD9834_amplitude_prefix_get()
{
	return DDS.amplitude.prefix;
}
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <AD9834_amplitude_prefix_get+0x8>)
 8000fe6:	f993 001c 	ldrsb.w	r0, [r3, #28]
 8000fea:	4770      	bx	lr
 8000fec:	20000240 	.word	0x20000240

08000ff0 <AD9834_frequency_prefix_get>:

prefix_CI_unit_t AD9834_frequency_prefix_get(AD9834_register_t reg)
{
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <AD9834_frequency_prefix_get+0x10>)
	if (reg == AD9834_REG0)
 8000ff2:	b910      	cbnz	r0, 8000ffa <AD9834_frequency_prefix_get+0xa>
	{
		return DDS.FREQ0.prefix;
 8000ff4:	f993 0004 	ldrsb.w	r0, [r3, #4]
 8000ff8:	4770      	bx	lr
	} else
	{
		return DDS.FREQ1.prefix;
 8000ffa:	f993 000c 	ldrsb.w	r0, [r3, #12]
	}
}
 8000ffe:	4770      	bx	lr
 8001000:	20000240 	.word	0x20000240

08001004 <AD9834_amplitude_get>:

float AD9834_amplitude_get()
{
	return DDS.amplitude.value;
}
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <AD9834_amplitude_get+0x8>)
 8001006:	ed93 0a06 	vldr	s0, [r3, #24]
 800100a:	4770      	bx	lr
 800100c:	20000240 	.word	0x20000240

08001010 <AD9834_frequency_get>:

float AD9834_frequency_get(AD9834_register_t reg)
{
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <AD9834_frequency_get+0x10>)

	if (reg == AD9834_REG0)
 8001012:	b910      	cbnz	r0, 800101a <AD9834_frequency_get+0xa>
	{
		return DDS.FREQ0.value;
 8001014:	ed93 0a00 	vldr	s0, [r3]
 8001018:	4770      	bx	lr
	} else
	{
		return DDS.FREQ1.value;
 800101a:	ed93 0a02 	vldr	s0, [r3, #8]
	}
}
 800101e:	4770      	bx	lr
 8001020:	20000240 	.word	0x20000240

08001024 <AD9834_form_get>:
}

AD9834_form_t AD9834_form_get()
{
	return DDS.form;
}
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <AD9834_form_get+0x8>)
 8001026:	f893 0020 	ldrb.w	r0, [r3, #32]
 800102a:	4770      	bx	lr
 800102c:	20000240 	.word	0x20000240

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_InitTick+0x3c>)
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_InitTick+0x40>)
{
 8001036:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001042:	6810      	ldr	r0, [r2, #0]
 8001044:	fbb0 f0f3 	udiv	r0, r0, r3
 8001048:	f000 f8a8 	bl	800119c <HAL_SYSTICK_Config>
 800104c:	4604      	mov	r4, r0
 800104e:	b958      	cbnz	r0, 8001068 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001050:	2d0f      	cmp	r5, #15
 8001052:	d809      	bhi.n	8001068 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	4602      	mov	r2, r0
 8001056:	4629      	mov	r1, r5
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f85e 	bl	800111c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_InitTick+0x44>)
 8001062:	4620      	mov	r0, r4
 8001064:	601d      	str	r5, [r3, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	2000001c 	.word	0x2000001c
 8001070:	20000000 	.word	0x20000000
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_Init>:
{
 8001078:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x30>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001082:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800108a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001092:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f82f 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff ffc8 	bl	8001030 <HAL_InitTick>
  HAL_MspInit();
 80010a0:	f002 fb1a 	bl	80036d8 <HAL_MspInit>
}
 80010a4:	2000      	movs	r0, #0
 80010a6:	bd08      	pop	{r3, pc}
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x10>)
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_IncTick+0x14>)
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	440b      	add	r3, r1
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000264 	.word	0x20000264
 80010c0:	20000000 	.word	0x20000000

080010c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010c4:	4b01      	ldr	r3, [pc, #4]	; (80010cc <HAL_GetTick+0x8>)
 80010c6:	6818      	ldr	r0, [r3, #0]
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000264 	.word	0x20000264

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff fff6 	bl	80010c4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	bf1c      	itt	ne
 80010dc:	4b05      	ldrne	r3, [pc, #20]	; (80010f4 <HAL_Delay+0x24>)
 80010de:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80010e2:	bf18      	it	ne
 80010e4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	f7ff ffed 	bl	80010c4 <HAL_GetTick>
 80010ea:	1b40      	subs	r0, r0, r5
 80010ec:	4284      	cmp	r4, r0
 80010ee:	d8fa      	bhi.n	80010e6 <HAL_Delay+0x16>
  {
  }
}
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001108:	0200      	lsls	r0, r0, #8
 800110a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001112:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001114:	60d3      	str	r3, [r2, #12]
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b530      	push	{r4, r5, lr}
 8001120:	68dc      	ldr	r4, [r3, #12]
 8001122:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001126:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	2b04      	cmp	r3, #4
 800112e:	bf28      	it	cs
 8001130:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 0501 	mov.w	r5, #1
 8001138:	fa05 f303 	lsl.w	r3, r5, r3
 800113c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001140:	bf8c      	ite	hi
 8001142:	3c03      	subhi	r4, #3
 8001144:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001146:	4019      	ands	r1, r3
 8001148:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114a:	fa05 f404 	lsl.w	r4, r5, r4
 800114e:	3c01      	subs	r4, #1
 8001150:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001152:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	ea42 0201 	orr.w	r2, r2, r1
 8001158:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	bfaf      	iteee	ge
 800115e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	f000 000f 	andlt.w	r0, r0, #15
 8001166:	4b06      	ldrlt	r3, [pc, #24]	; (8001180 <HAL_NVIC_SetPriority+0x64>)
 8001168:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	bfa5      	ittet	ge
 800116c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001170:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001178:	bd30      	pop	{r4, r5, pc}
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	e000ed14 	.word	0xe000ed14

08001184 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001184:	0942      	lsrs	r2, r0, #5
 8001186:	2301      	movs	r3, #1
 8001188:	f000 001f 	and.w	r0, r0, #31
 800118c:	fa03 f000 	lsl.w	r0, r3, r0
 8001190:	4b01      	ldr	r3, [pc, #4]	; (8001198 <HAL_NVIC_EnableIRQ+0x14>)
 8001192:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100

0800119c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	3801      	subs	r0, #1
 800119e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011a2:	d20a      	bcs.n	80011ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	21f0      	movs	r1, #240	; 0xf0
 80011ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ca:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011cc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ce:	bf0c      	ite	eq
 80011d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011d4:	f022 0204 	bicne.w	r2, r2, #4
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	4770      	bx	lr
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80011e0:	4770      	bx	lr

080011e2 <HAL_SYSTICK_IRQHandler>:
{
 80011e2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80011e4:	f7ff fffc 	bl	80011e0 <HAL_SYSTICK_Callback>
 80011e8:	bd08      	pop	{r3, pc}

080011ea <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
 80011f8:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80011fc:	2305      	movs	r3, #5
 80011fe:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800120a:	2000      	movs	r0, #0
}
 800120c:	4770      	bx	lr
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001214:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001218:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80013bc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4a65      	ldr	r2, [pc, #404]	; (80013b4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80013c0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001224:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001226:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800122c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001230:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001234:	45b6      	cmp	lr, r6
 8001236:	f040 80aa 	bne.w	800138e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	684c      	ldr	r4, [r1, #4]
 800123c:	f024 0710 	bic.w	r7, r4, #16
 8001240:	2f02      	cmp	r7, #2
 8001242:	d116      	bne.n	8001272 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001244:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001248:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001250:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001254:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001258:	f04f 0c0f 	mov.w	ip, #15
 800125c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001260:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	690d      	ldr	r5, [r1, #16]
 8001266:	fa05 f50b 	lsl.w	r5, r5, fp
 800126a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001272:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001276:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001278:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001280:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001282:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800128e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001294:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001296:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129a:	d811      	bhi.n	80012c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800129c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	68cf      	ldr	r7, [r1, #12]
 80012a4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80012a8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80012ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80012ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80012b8:	409f      	lsls	r7, r3
 80012ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80012be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80012c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	688f      	ldr	r7, [r1, #8]
 80012c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80012ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80012cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ce:	00e5      	lsls	r5, r4, #3
 80012d0:	d55d      	bpl.n	800138e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	f04f 0b00 	mov.w	fp, #0
 80012d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80012da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	4d36      	ldr	r5, [pc, #216]	; (80013b8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80012e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80012e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80012ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80012f0:	9703      	str	r7, [sp, #12]
 80012f2:	9f03      	ldr	r7, [sp, #12]
 80012f4:	f023 0703 	bic.w	r7, r3, #3
 80012f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001304:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800130c:	f04f 0e0f 	mov.w	lr, #15
 8001310:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001314:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001316:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	d03f      	beq.n	800139c <HAL_GPIO_Init+0x18c>
 800131c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001320:	42a8      	cmp	r0, r5
 8001322:	d03d      	beq.n	80013a0 <HAL_GPIO_Init+0x190>
 8001324:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001328:	42a8      	cmp	r0, r5
 800132a:	d03b      	beq.n	80013a4 <HAL_GPIO_Init+0x194>
 800132c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001330:	42a8      	cmp	r0, r5
 8001332:	d039      	beq.n	80013a8 <HAL_GPIO_Init+0x198>
 8001334:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001338:	42a8      	cmp	r0, r5
 800133a:	d037      	beq.n	80013ac <HAL_GPIO_Init+0x19c>
 800133c:	4548      	cmp	r0, r9
 800133e:	d037      	beq.n	80013b0 <HAL_GPIO_Init+0x1a0>
 8001340:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001344:	42a8      	cmp	r0, r5
 8001346:	bf14      	ite	ne
 8001348:	2507      	movne	r5, #7
 800134a:	2506      	moveq	r5, #6
 800134c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001350:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001356:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001358:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800135e:	bf0c      	ite	eq
 8001360:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001362:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001364:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001366:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001368:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800136c:	bf0c      	ite	eq
 800136e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001370:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001372:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001374:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001376:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800137a:	bf0c      	ite	eq
 800137c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800137e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001380:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001382:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001384:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001386:	bf54      	ite	pl
 8001388:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800138a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800138c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	3301      	adds	r3, #1
 8001390:	2b10      	cmp	r3, #16
 8001392:	f47f af48 	bne.w	8001226 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001396:	b005      	add	sp, #20
 8001398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139c:	465d      	mov	r5, fp
 800139e:	e7d5      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013a0:	2501      	movs	r5, #1
 80013a2:	e7d3      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013a4:	2502      	movs	r5, #2
 80013a6:	e7d1      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013a8:	2503      	movs	r5, #3
 80013aa:	e7cf      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013ac:	2504      	movs	r5, #4
 80013ae:	e7cd      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013b0:	2505      	movs	r5, #5
 80013b2:	e7cb      	b.n	800134c <HAL_GPIO_Init+0x13c>
 80013b4:	40013c00 	.word	0x40013c00
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40021400 	.word	0x40021400

080013c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	b10a      	cbz	r2, 80013ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c6:	6181      	str	r1, [r0, #24]
 80013c8:	4770      	bx	lr
 80013ca:	0409      	lsls	r1, r1, #16
 80013cc:	e7fb      	b.n	80013c6 <HAL_GPIO_WritePin+0x2>

080013ce <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80013d0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80013d4:	6959      	ldr	r1, [r3, #20]
 80013d6:	4201      	tst	r1, r0
 80013d8:	d002      	beq.n	80013e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013dc:	f7ff fff7 	bl	80013ce <HAL_GPIO_EXTI_Callback>
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	6953      	ldr	r3, [r2, #20]
 80013ec:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80013f0:	d00d      	beq.n	800140e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013f2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013f6:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80013f8:	2304      	movs	r3, #4
 80013fa:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80013fc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80013fe:	2300      	movs	r3, #0
 8001400:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001402:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001406:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
 800140c:	4770      	bx	lr
  }
  return HAL_OK;
 800140e:	4618      	mov	r0, r3
}
 8001410:	4770      	bx	lr

08001412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001412:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001416:	4604      	mov	r4, r0
 8001418:	4617      	mov	r7, r2
 800141a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800141c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001420:	b28e      	uxth	r6, r1
 8001422:	6825      	ldr	r5, [r4, #0]
 8001424:	f1b8 0f01 	cmp.w	r8, #1
 8001428:	bf0c      	ite	eq
 800142a:	696b      	ldreq	r3, [r5, #20]
 800142c:	69ab      	ldrne	r3, [r5, #24]
 800142e:	ea36 0303 	bics.w	r3, r6, r3
 8001432:	bf14      	ite	ne
 8001434:	2001      	movne	r0, #1
 8001436:	2000      	moveq	r0, #0
 8001438:	b908      	cbnz	r0, 800143e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143e:	696b      	ldr	r3, [r5, #20]
 8001440:	055a      	lsls	r2, r3, #21
 8001442:	d512      	bpl.n	800146a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800144c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001450:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001452:	2304      	movs	r3, #4
 8001454:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001456:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800145c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001460:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001464:	2001      	movs	r0, #1
 8001466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800146a:	1c7b      	adds	r3, r7, #1
 800146c:	d0d9      	beq.n	8001422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800146e:	b94f      	cbnz	r7, 8001484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001470:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001472:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001474:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001476:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800147a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800147e:	2003      	movs	r0, #3
 8001480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001484:	f7ff fe1e 	bl	80010c4 <HAL_GetTick>
 8001488:	eba0 0009 	sub.w	r0, r0, r9
 800148c:	4287      	cmp	r7, r0
 800148e:	d2c8      	bcs.n	8001422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001490:	e7ee      	b.n	8001470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001492 <I2C_WaitOnFlagUntilTimeout>:
{
 8001492:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001496:	9e08      	ldr	r6, [sp, #32]
 8001498:	4604      	mov	r4, r0
 800149a:	4690      	mov	r8, r2
 800149c:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800149e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80014a2:	b28d      	uxth	r5, r1
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	f1b9 0f01 	cmp.w	r9, #1
 80014aa:	bf0c      	ite	eq
 80014ac:	695b      	ldreq	r3, [r3, #20]
 80014ae:	699b      	ldrne	r3, [r3, #24]
 80014b0:	ea35 0303 	bics.w	r3, r5, r3
 80014b4:	bf0c      	ite	eq
 80014b6:	2301      	moveq	r3, #1
 80014b8:	2300      	movne	r3, #0
 80014ba:	4543      	cmp	r3, r8
 80014bc:	d002      	beq.n	80014c4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80014be:	2000      	movs	r0, #0
}
 80014c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80014c4:	1c7b      	adds	r3, r7, #1
 80014c6:	d0ed      	beq.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014c8:	b95f      	cbnz	r7, 80014e2 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80014ca:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80014cc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80014ce:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80014d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80014d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80014d8:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80014de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014e2:	f7ff fdef 	bl	80010c4 <HAL_GetTick>
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	4287      	cmp	r7, r0
 80014ea:	d2db      	bcs.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x12>
 80014ec:	e7ed      	b.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x38>

080014ee <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80014ee:	b570      	push	{r4, r5, r6, lr}
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	061b      	lsls	r3, r3, #24
 80014fc:	d501      	bpl.n	8001502 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80014fe:	2000      	movs	r0, #0
 8001500:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ff70 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 8001508:	b9a8      	cbnz	r0, 8001536 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800150a:	1c6a      	adds	r2, r5, #1
 800150c:	d0f3      	beq.n	80014f6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800150e:	b965      	cbnz	r5, 800152a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001518:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800151e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001522:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001526:	2003      	movs	r0, #3
 8001528:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800152a:	f7ff fdcb 	bl	80010c4 <HAL_GetTick>
 800152e:	1b80      	subs	r0, r0, r6
 8001530:	4285      	cmp	r5, r0
 8001532:	d2e0      	bcs.n	80014f6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001534:	e7ec      	b.n	8001510 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
}
 8001538:	bd70      	pop	{r4, r5, r6, pc}

0800153a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800153a:	b570      	push	{r4, r5, r6, lr}
 800153c:	4604      	mov	r4, r0
 800153e:	460d      	mov	r5, r1
 8001540:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	075b      	lsls	r3, r3, #29
 8001548:	d501      	bpl.n	800154e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800154e:	4620      	mov	r0, r4
 8001550:	f7ff ff4a 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 8001554:	b9a8      	cbnz	r0, 8001582 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001556:	1c6a      	adds	r2, r5, #1
 8001558:	d0f3      	beq.n	8001542 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800155a:	b965      	cbnz	r5, 8001576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001564:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800156a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800156e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001572:	2003      	movs	r0, #3
 8001574:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001576:	f7ff fda5 	bl	80010c4 <HAL_GetTick>
 800157a:	1b80      	subs	r0, r0, r6
 800157c:	4285      	cmp	r5, r0
 800157e:	d2e0      	bcs.n	8001542 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001580:	e7ec      	b.n	800155c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
}
 8001584:	bd70      	pop	{r4, r5, r6, pc}
	...

08001588 <HAL_I2C_Init>:
{
 8001588:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800158a:	4604      	mov	r4, r0
 800158c:	2800      	cmp	r0, #0
 800158e:	d062      	beq.n	8001656 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001590:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001594:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001598:	b91b      	cbnz	r3, 80015a2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800159a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800159e:	f001 fff3 	bl	8003588 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80015a2:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015a4:	4e2d      	ldr	r6, [pc, #180]	; (800165c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80015a6:	4d2e      	ldr	r5, [pc, #184]	; (8001660 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a8:	2324      	movs	r3, #36	; 0x24
 80015aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b6:	f000 fbd5 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015ba:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80015bc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80015be:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015c2:	42b3      	cmp	r3, r6
 80015c4:	bf84      	itt	hi
 80015c6:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80015ca:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80015cc:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015ce:	bf91      	iteee	ls
 80015d0:	1c69      	addls	r1, r5, #1
 80015d2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80015d6:	fbb1 f1f5 	udivhi	r1, r1, r5
 80015da:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015dc:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015de:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015e0:	d821      	bhi.n	8001626 <HAL_I2C_Init+0x9e>
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	bf98      	it	ls
 80015f0:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f2:	6a21      	ldr	r1, [r4, #32]
 80015f4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015f6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015fc:	68e1      	ldr	r1, [r4, #12]
 80015fe:	6923      	ldr	r3, [r4, #16]
 8001600:	430b      	orrs	r3, r1
 8001602:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001604:	69a1      	ldr	r1, [r4, #24]
 8001606:	6963      	ldr	r3, [r4, #20]
 8001608:	430b      	orrs	r3, r1
 800160a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001616:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800161e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001624:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001626:	68a1      	ldr	r1, [r4, #8]
 8001628:	b949      	cbnz	r1, 800163e <HAL_I2C_Init+0xb6>
 800162a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800162e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001632:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001636:	b163      	cbz	r3, 8001652 <HAL_I2C_Init+0xca>
 8001638:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800163c:	e7d9      	b.n	80015f2 <HAL_I2C_Init+0x6a>
 800163e:	2119      	movs	r1, #25
 8001640:	434b      	muls	r3, r1
 8001642:	fbb0 f0f3 	udiv	r0, r0, r3
 8001646:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800164a:	b113      	cbz	r3, 8001652 <HAL_I2C_Init+0xca>
 800164c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001650:	e7cf      	b.n	80015f2 <HAL_I2C_Init+0x6a>
 8001652:	2001      	movs	r0, #1
 8001654:	e7cd      	b.n	80015f2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
}
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	bf00      	nop
 800165c:	000186a0 	.word	0x000186a0
 8001660:	000f4240 	.word	0x000f4240

08001664 <HAL_I2C_Master_Transmit>:
{
 8001664:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001668:	4604      	mov	r4, r0
 800166a:	461f      	mov	r7, r3
 800166c:	460d      	mov	r5, r1
 800166e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001670:	f7ff fd28 	bl	80010c4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001674:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001678:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800167a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800167c:	d004      	beq.n	8001688 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800167e:	2502      	movs	r5, #2
}
 8001680:	4628      	mov	r0, r5
 8001682:	b004      	add	sp, #16
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001688:	9000      	str	r0, [sp, #0]
 800168a:	2319      	movs	r3, #25
 800168c:	2201      	movs	r2, #1
 800168e:	495d      	ldr	r1, [pc, #372]	; (8001804 <HAL_I2C_Master_Transmit+0x1a0>)
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fefe 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 8001696:	2800      	cmp	r0, #0
 8001698:	d1f1      	bne.n	800167e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800169a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d0ed      	beq.n	800167e <HAL_I2C_Master_Transmit+0x1a>
 80016a2:	2301      	movs	r3, #1
 80016a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80016ae:	bf5e      	ittt	pl
 80016b0:	681a      	ldrpl	r2, [r3, #0]
 80016b2:	f042 0201 	orrpl.w	r2, r2, #1
 80016b6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016be:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c0:	2221      	movs	r2, #33	; 0x21
 80016c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016c6:	2210      	movs	r2, #16
 80016c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	2200      	movs	r2, #0
 80016ce:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016d0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80016d4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016d6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80016d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016da:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80016de:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d004      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0x8c>
 80016e6:	2a01      	cmp	r2, #1
 80016e8:	d002      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0x8c>
 80016ea:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016ee:	d104      	bne.n	80016fa <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e002      	b.n	8001700 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016fc:	2a12      	cmp	r2, #18
 80016fe:	d0f7      	beq.n	80016f0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001700:	9600      	str	r6, [sp, #0]
 8001702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001704:	2200      	movs	r2, #0
 8001706:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fec1 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 8001710:	bb28      	cbnz	r0, 800175e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001712:	6923      	ldr	r3, [r4, #16]
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800171a:	d112      	bne.n	8001742 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800171c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001720:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001722:	4633      	mov	r3, r6
 8001724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001726:	4938      	ldr	r1, [pc, #224]	; (8001808 <HAL_I2C_Master_Transmit+0x1a4>)
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff fe72 	bl	8001412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800172e:	4605      	mov	r5, r0
 8001730:	b9a0      	cbnz	r0, 800175c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	9003      	str	r0, [sp, #12]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	9203      	str	r2, [sp, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001740:	e050      	b.n	80017e4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001742:	11eb      	asrs	r3, r5, #7
 8001744:	f003 0306 	and.w	r3, r3, #6
 8001748:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800174c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800174e:	492f      	ldr	r1, [pc, #188]	; (800180c <HAL_I2C_Master_Transmit+0x1a8>)
 8001750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001752:	4633      	mov	r3, r6
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fe5c 	bl	8001412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800175a:	b148      	cbz	r0, 8001770 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001760:	2b04      	cmp	r3, #4
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800176c:	2501      	movs	r5, #1
 800176e:	e787      	b.n	8001680 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	b2ed      	uxtb	r5, r5
 8001774:	611d      	str	r5, [r3, #16]
 8001776:	e7d4      	b.n	8001722 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001778:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800177c:	2503      	movs	r5, #3
 800177e:	e77f      	b.n	8001680 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001780:	4632      	mov	r2, r6
 8001782:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff feb2 	bl	80014ee <I2C_WaitOnTXEFlagUntilTimeout>
 800178a:	b140      	cbz	r0, 800179e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800178e:	2b04      	cmp	r3, #4
 8001790:	d1f4      	bne.n	800177c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e7e6      	b.n	800176c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800179e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017a0:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 80017a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017a4:	1c4b      	adds	r3, r1, #1
 80017a6:	6263      	str	r3, [r4, #36]	; 0x24
 80017a8:	780b      	ldrb	r3, [r1, #0]
 80017aa:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80017ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017b4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80017b6:	1e53      	subs	r3, r2, #1
 80017b8:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ba:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80017bc:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017be:	d50a      	bpl.n	80017d6 <HAL_I2C_Master_Transmit+0x172>
 80017c0:	b14b      	cbz	r3, 80017d6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80017c2:	1c8b      	adds	r3, r1, #2
 80017c4:	6263      	str	r3, [r4, #36]	; 0x24
 80017c6:	784b      	ldrb	r3, [r1, #1]
 80017c8:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80017ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80017d0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80017d2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017d4:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d6:	4632      	mov	r2, r6
 80017d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fead 	bl	800153a <I2C_WaitOnBTFFlagUntilTimeout>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d1d3      	bne.n	800178c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80017e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ca      	bne.n	8001780 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	680a      	ldr	r2, [r1, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	2220      	movs	r2, #32
 80017f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80017fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001802:	e73d      	b.n	8001680 <HAL_I2C_Master_Transmit+0x1c>
 8001804:	00100002 	.word	0x00100002
 8001808:	00010002 	.word	0x00010002
 800180c:	00010008 	.word	0x00010008

08001810 <HAL_I2C_IsDeviceReady>:
{
 8001810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	b085      	sub	sp, #20
 8001818:	4698      	mov	r8, r3
 800181a:	4689      	mov	r9, r1
 800181c:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 800181e:	f7ff fc51 	bl	80010c4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001822:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001826:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001828:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800182a:	d003      	beq.n	8001834 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800182c:	2002      	movs	r0, #2
}
 800182e:	b005      	add	sp, #20
 8001830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	9000      	str	r0, [sp, #0]
 8001836:	2319      	movs	r3, #25
 8001838:	2201      	movs	r2, #1
 800183a:	494a      	ldr	r1, [pc, #296]	; (8001964 <HAL_I2C_IsDeviceReady+0x154>)
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fe28 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 8001842:	2800      	cmp	r0, #0
 8001844:	d1f2      	bne.n	800182c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001846:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800184a:	2b01      	cmp	r3, #1
 800184c:	d0ee      	beq.n	800182c <HAL_I2C_IsDeviceReady+0x1c>
 800184e:	2301      	movs	r3, #1
 8001850:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001854:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001856:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8001964 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800185e:	bf5e      	ittt	pl
 8001860:	681a      	ldrpl	r2, [r3, #0]
 8001862:	f042 0201 	orrpl.w	r2, r2, #1
 8001866:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001870:	2324      	movs	r3, #36	; 0x24
 8001872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001876:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001880:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800188c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001890:	9600      	str	r6, [sp, #0]
 8001892:	4643      	mov	r3, r8
 8001894:	2200      	movs	r2, #0
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff fdfb 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 800189c:	b108      	cbz	r0, 80018a2 <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 800189e:	2003      	movs	r0, #3
 80018a0:	e7c5      	b.n	800182e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80018a8:	f7ff fc0c 	bl	80010c4 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018b0:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 80018b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 80018b6:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018b8:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018bc:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 80018c0:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80018c2:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80018c4:	b911      	cbnz	r1, 80018cc <HAL_I2C_IsDeviceReady+0xbc>
 80018c6:	b90a      	cbnz	r2, 80018cc <HAL_I2C_IsDeviceReady+0xbc>
 80018c8:	2ba0      	cmp	r3, #160	; 0xa0
 80018ca:	d120      	bne.n	800190e <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80018cc:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	2720      	movs	r7, #32
 80018d0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e0:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80018e2:	d02a      	beq.n	800193a <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	2200      	movs	r2, #0
 80018e6:	9203      	str	r2, [sp, #12]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	9203      	str	r2, [sp, #12]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	9303      	str	r3, [sp, #12]
 80018f0:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f2:	9600      	str	r6, [sp, #0]
 80018f4:	2319      	movs	r3, #25
 80018f6:	2201      	movs	r2, #1
 80018f8:	491a      	ldr	r1, [pc, #104]	; (8001964 <HAL_I2C_IsDeviceReady+0x154>)
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff fdc9 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 8001900:	2800      	cmp	r0, #0
 8001902:	d1cc      	bne.n	800189e <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001904:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001908:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800190c:	e78f      	b.n	800182e <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800190e:	f1b8 0f00 	cmp.w	r8, #0
 8001912:	d10c      	bne.n	800192e <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001914:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800191c:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 800191e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001922:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001926:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 800192a:	b2db      	uxtb	r3, r3
 800192c:	e7ca      	b.n	80018c4 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800192e:	f7ff fbc9 	bl	80010c4 <HAL_GetTick>
 8001932:	1b80      	subs	r0, r0, r6
 8001934:	4580      	cmp	r8, r0
 8001936:	d3ed      	bcc.n	8001914 <HAL_I2C_IsDeviceReady+0x104>
 8001938:	e7ee      	b.n	8001918 <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800193e:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001940:	4659      	mov	r1, fp
 8001942:	9600      	str	r6, [sp, #0]
 8001944:	2319      	movs	r3, #25
 8001946:	2201      	movs	r2, #1
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff fda2 	bl	8001492 <I2C_WaitOnFlagUntilTimeout>
 800194e:	2800      	cmp	r0, #0
 8001950:	d1a5      	bne.n	800189e <HAL_I2C_IsDeviceReady+0x8e>
 8001952:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001954:	45aa      	cmp	sl, r5
 8001956:	d894      	bhi.n	8001882 <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 8001958:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e764      	b.n	800182e <HAL_I2C_IsDeviceReady+0x1e>
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000

0800196c <HAL_I2C_SlaveTxCpltCallback>:
 800196c:	4770      	bx	lr

0800196e <HAL_I2C_ListenCpltCallback>:
 800196e:	4770      	bx	lr

08001970 <HAL_I2C_ErrorCallback>:
 8001970:	4770      	bx	lr

08001972 <HAL_I2C_AbortCpltCallback>:
{
 8001972:	4770      	bx	lr

08001974 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001974:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001978:	3b29      	subs	r3, #41	; 0x29
 800197a:	2b01      	cmp	r3, #1
{
 800197c:	b510      	push	{r4, lr}
 800197e:	6803      	ldr	r3, [r0, #0]
 8001980:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001982:	d839      	bhi.n	80019f8 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001984:	2200      	movs	r2, #0
 8001986:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001988:	2228      	movs	r2, #40	; 0x28
 800198a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800199c:	d054      	beq.n	8001a48 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800199e:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80019a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80019a8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <I2C_ITError+0x120>)
 80019b0:	d031      	beq.n	8001a16 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80019b2:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80019b4:	f7ff fc19 	bl	80011ea <HAL_DMA_Abort_IT>
 80019b8:	b150      	cbz	r0, 80019d0 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 80019ba:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80019bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	2320      	movs	r3, #32
 80019c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80019cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80019ce:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80019d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80019d4:	2b28      	cmp	r3, #40	; 0x28
 80019d6:	d10e      	bne.n	80019f6 <I2C_ITError+0x82>
 80019d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019da:	075b      	lsls	r3, r3, #29
 80019dc:	d50b      	bpl.n	80019f6 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <I2C_ITError+0x124>)
 80019e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80019e8:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80019f2:	f7ff ffbc 	bl	800196e <HAL_I2C_ListenCpltCallback>
 80019f6:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80019f8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80019fc:	2a60      	cmp	r2, #96	; 0x60
 80019fe:	d005      	beq.n	8001a0c <I2C_ITError+0x98>
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	bf5c      	itt	pl
 8001a06:	2220      	movpl	r2, #32
 8001a08:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001a14:	e7bb      	b.n	800198e <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a18:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a1a:	f7ff fbe6 	bl	80011ea <HAL_DMA_Abort_IT>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	d0d6      	beq.n	80019d0 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	6953      	ldr	r3, [r2, #20]
 8001a26:	0658      	lsls	r0, r3, #25
 8001a28:	d504      	bpl.n	8001a34 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a2c:	6912      	ldr	r2, [r2, #16]
 8001a2e:	1c59      	adds	r1, r3, #1
 8001a30:	6261      	str	r1, [r4, #36]	; 0x24
 8001a32:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001a34:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	2320      	movs	r3, #32
 8001a42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001a46:	e7c1      	b.n	80019cc <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001a48:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001a4c:	2960      	cmp	r1, #96	; 0x60
 8001a4e:	d114      	bne.n	8001a7a <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	2120      	movs	r1, #32
 8001a52:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a56:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	0651      	lsls	r1, r2, #25
 8001a5c:	d504      	bpl.n	8001a68 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	1c51      	adds	r1, r2, #1
 8001a64:	6261      	str	r1, [r4, #36]	; 0x24
 8001a66:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff7d 	bl	8001972 <HAL_I2C_AbortCpltCallback>
 8001a78:	e7aa      	b.n	80019d0 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	0652      	lsls	r2, r2, #25
 8001a7e:	d504      	bpl.n	8001a8a <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	1c51      	adds	r1, r2, #1
 8001a86:	6261      	str	r1, [r4, #36]	; 0x24
 8001a88:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff ff70 	bl	8001970 <HAL_I2C_ErrorCallback>
 8001a90:	e79e      	b.n	80019d0 <I2C_ITError+0x5c>
 8001a92:	bf00      	nop
 8001a94:	08001bd1 	.word	0x08001bd1
 8001a98:	ffff0000 	.word	0xffff0000

08001a9c <HAL_I2C_ER_IRQHandler>:
{
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a9e:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001aa0:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001aa2:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001aa4:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001aa6:	4216      	tst	r6, r2
{
 8001aa8:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001aaa:	d008      	beq.n	8001abe <HAL_I2C_ER_IRQHandler+0x22>
 8001aac:	05e8      	lsls	r0, r5, #23
 8001aae:	d506      	bpl.n	8001abe <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ab0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ab8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001abc:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001abe:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8001ac2:	d008      	beq.n	8001ad6 <HAL_I2C_ER_IRQHandler+0x3a>
 8001ac4:	05e9      	lsls	r1, r5, #23
 8001ac6:	d506      	bpl.n	8001ad6 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ac8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001aca:	f042 0202 	orr.w	r2, r2, #2
 8001ace:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ad0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001ad6:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 8001ada:	d036      	beq.n	8001b4a <HAL_I2C_ER_IRQHandler+0xae>
 8001adc:	05ea      	lsls	r2, r5, #23
 8001ade:	d534      	bpl.n	8001b4a <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 8001ae0:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8001ae4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8001ae6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8001aea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001aec:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8001aee:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8001af0:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001af2:	d158      	bne.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x10a>
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d156      	bne.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x10a>
 8001af8:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8001afc:	2921      	cmp	r1, #33	; 0x21
 8001afe:	d003      	beq.n	8001b08 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b00:	2a28      	cmp	r2, #40	; 0x28
 8001b02:	d150      	bne.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b04:	2821      	cmp	r0, #33	; 0x21
 8001b06:	d14e      	bne.n	8001ba6 <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 8001b08:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001b0e:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8001b10:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_ER_IRQHandler+0x7c>
 8001b14:	2908      	cmp	r1, #8
 8001b16:	d12c      	bne.n	8001b72 <HAL_I2C_ER_IRQHandler+0xd6>
 8001b18:	2a28      	cmp	r2, #40	; 0x28
 8001b1a:	d12a      	bne.n	8001b72 <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b1c:	4a2b      	ldr	r2, [pc, #172]	; (8001bcc <HAL_I2C_ER_IRQHandler+0x130>)
 8001b1e:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b2c:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b34:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b3a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b3c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001b46:	f7ff ff12 	bl	800196e <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001b4a:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8001b4e:	d009      	beq.n	8001b64 <HAL_I2C_ER_IRQHandler+0xc8>
 8001b50:	05eb      	lsls	r3, r5, #23
 8001b52:	d507      	bpl.n	8001b64 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001b62:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b66:	b373      	cbz	r3, 8001bc6 <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 8001b68:	4620      	mov	r0, r4
}
 8001b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8001b6e:	f7ff bf01 	b.w	8001974 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b72:	2a21      	cmp	r2, #33	; 0x21
 8001b74:	d123      	bne.n	8001bbe <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b76:	4915      	ldr	r1, [pc, #84]	; (8001bcc <HAL_I2C_ER_IRQHandler+0x130>)
 8001b78:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b7a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b8e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b94:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff fee4 	bl	800196c <HAL_I2C_SlaveTxCpltCallback>
 8001ba4:	e7d1      	b.n	8001b4a <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ba6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ba8:	f042 0204 	orr.w	r2, r2, #4
 8001bac:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001bae:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001bb2:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001bb4:	bf02      	ittt	eq
 8001bb6:	681a      	ldreq	r2, [r3, #0]
 8001bb8:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	e7c1      	b.n	8001b4a <HAL_I2C_ER_IRQHandler+0xae>
 8001bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc8:	00010100 	.word	0x00010100
 8001bcc:	ffff0000 	.word	0xffff0000

08001bd0 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001bd2:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bd4:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001bd6:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8001be0:	2200      	movs	r2, #0
 8001be2:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001be4:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001be6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001be8:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001bea:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001bee:	2960      	cmp	r1, #96	; 0x60
 8001bf0:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001bfc:	d107      	bne.n	8001c0e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfe:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001c08:	f7ff feb3 	bl	8001972 <HAL_I2C_AbortCpltCallback>
 8001c0c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001c16:	f7ff feab 	bl	8001970 <HAL_I2C_ErrorCallback>
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <HAL_I2C_GetState>:
  return hi2c->State;
 8001c1c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c28:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	b910      	cbnz	r0, 8001c34 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <HAL_RCC_ClockConfig+0x124>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f002 020f 	and.w	r2, r2, #15
 8001c3c:	428a      	cmp	r2, r1
 8001c3e:	d328      	bcc.n	8001c92 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	6821      	ldr	r1, [r4, #0]
 8001c42:	078f      	lsls	r7, r1, #30
 8001c44:	d42d      	bmi.n	8001ca2 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	07c8      	lsls	r0, r1, #31
 8001c48:	d440      	bmi.n	8001ccc <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	; (8001d48 <HAL_RCC_ClockConfig+0x124>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	f002 020f 	and.w	r2, r2, #15
 8001c52:	4295      	cmp	r5, r2
 8001c54:	d366      	bcc.n	8001d24 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	0751      	lsls	r1, r2, #29
 8001c5a:	d46c      	bmi.n	8001d36 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	0713      	lsls	r3, r2, #28
 8001c5e:	d507      	bpl.n	8001c70 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c60:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
 8001c62:	6921      	ldr	r1, [r4, #16]
 8001c64:	6893      	ldr	r3, [r2, #8]
 8001c66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c6e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c70:	f000 f898 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
 8001c76:	4a36      	ldr	r2, [pc, #216]	; (8001d50 <HAL_RCC_ClockConfig+0x12c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	40d8      	lsrs	r0, r3
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_ClockConfig+0x130>)
 8001c84:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff f9d2 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	4299      	cmp	r1, r3
 8001c9e:	d1c6      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xa>
 8001ca0:	e7ce      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1c>
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	bf1e      	ittt	ne
 8001caa:	689a      	ldrne	r2, [r3, #8]
 8001cac:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001cb0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	bf42      	ittt	mi
 8001cb6:	689a      	ldrmi	r2, [r3, #8]
 8001cb8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001cbc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	68a0      	ldr	r0, [r4, #8]
 8001cc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cc6:	4302      	orrs	r2, r0
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e7bc      	b.n	8001c46 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ccc:	6862      	ldr	r2, [r4, #4]
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d11d      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	d0a8      	beq.n	8001c2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cdc:	4e1b      	ldr	r6, [pc, #108]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
 8001cde:	68b3      	ldr	r3, [r6, #8]
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f9ec 	bl	80010c4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001cf0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	68b3      	ldr	r3, [r6, #8]
 8001cf4:	6862      	ldr	r2, [r4, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cfe:	d0a4      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff f9e0 	bl	80010c4 <HAL_GetTick>
 8001d04:	1bc0      	subs	r0, r0, r7
 8001d06:	4540      	cmp	r0, r8
 8001d08:	d9f3      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d0a:	2003      	movs	r0, #3
}
 8001d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d10:	1e91      	subs	r1, r2, #2
 8001d12:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d16:	d802      	bhi.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d1c:	e7dd      	b.n	8001cda <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	f013 0f02 	tst.w	r3, #2
 8001d22:	e7da      	b.n	8001cda <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	b2ea      	uxtb	r2, r5
 8001d26:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	429d      	cmp	r5, r3
 8001d30:	f47f af7d 	bne.w	8001c2e <HAL_RCC_ClockConfig+0xa>
 8001d34:	e78f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d36:	4905      	ldr	r1, [pc, #20]	; (8001d4c <HAL_RCC_ClockConfig+0x128>)
 8001d38:	68e0      	ldr	r0, [r4, #12]
 8001d3a:	688b      	ldr	r3, [r1, #8]
 8001d3c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d40:	4303      	orrs	r3, r0
 8001d42:	608b      	str	r3, [r1, #8]
 8001d44:	e78a      	b.n	8001c5c <HAL_RCC_ClockConfig+0x38>
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	08006980 	.word	0x08006980
 8001d54:	2000001c 	.word	0x2000001c

08001d58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d58:	4b01      	ldr	r3, [pc, #4]	; (8001d60 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000001c 	.word	0x2000001c

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d72:	6810      	ldr	r0, [r2, #0]
}
 8001d74:	40d8      	lsrs	r0, r3
 8001d76:	4770      	bx	lr
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	08006990 	.word	0x08006990
 8001d80:	2000001c 	.word	0x2000001c

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d92:	6810      	ldr	r0, [r2, #0]
}
 8001d94:	40d8      	lsrs	r0, r3
 8001d96:	4770      	bx	lr
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08006990 	.word	0x08006990
 8001da0:	2000001c 	.word	0x2000001c

08001da4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4920      	ldr	r1, [pc, #128]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001da6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da8:	688b      	ldr	r3, [r1, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d007      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1e>
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d020      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x88>)
 8001db8:	481d      	ldr	r0, [pc, #116]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf18      	it	ne
 8001dbe:	4610      	movne	r0, r2
 8001dc0:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dcc:	bf14      	ite	ne
 8001dce:	4818      	ldrne	r0, [pc, #96]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd0:	4816      	ldreq	r0, [pc, #88]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001dd6:	bf18      	it	ne
 8001dd8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	fba1 0100 	umull	r0, r1, r1, r0
 8001de2:	f7fe ff25 	bl	8000c30 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x84>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8001df2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001df6:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df8:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfa:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfc:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfe:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	bf14      	ite	ne
 8001e04:	480a      	ldrne	r0, [pc, #40]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e06:	4809      	ldreq	r0, [pc, #36]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e0c:	bf18      	it	ne
 8001e0e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e10:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e14:	fba1 0100 	umull	r0, r1, r1, r0
 8001e18:	f7fe ff0a 	bl	8000c30 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x84>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001e24:	e7e5      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x4e>
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	017d7840 	.word	0x017d7840

08001e34 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e34:	6803      	ldr	r3, [r0, #0]
{
 8001e36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	07df      	lsls	r7, r3, #31
{
 8001e3c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	d410      	bmi.n	8001e62 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	079e      	lsls	r6, r3, #30
 8001e44:	d467      	bmi.n	8001f16 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	071a      	lsls	r2, r3, #28
 8001e4a:	f100 80b2 	bmi.w	8001fb2 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	075b      	lsls	r3, r3, #29
 8001e52:	f100 80d0 	bmi.w	8001ff6 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	69a2      	ldr	r2, [r4, #24]
 8001e58:	2a00      	cmp	r2, #0
 8001e5a:	f040 8139 	bne.w	80020d0 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001e5e:	2000      	movs	r0, #0
 8001e60:	e01e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	f002 020c 	and.w	r2, r2, #12
 8001e6a:	2a04      	cmp	r2, #4
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e74:	2a08      	cmp	r2, #8
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	025d      	lsls	r5, r3, #9
 8001e7c:	d408      	bmi.n	8001e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b90      	ldr	r3, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e86:	2a0c      	cmp	r2, #12
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	0250      	lsls	r0, r2, #9
 8001e8e:	d50a      	bpl.n	8001ea6 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0399      	lsls	r1, r3, #14
 8001e96:	d5d3      	bpl.n	8001e40 <HAL_RCC_OscConfig+0xc>
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1d0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e9e:	2001      	movs	r0, #1
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea6:	6862      	ldr	r2, [r4, #4]
 8001ea8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001eac:	d111      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x9e>
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001eb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f905 	bl	80010c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	4d81      	ldr	r5, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001ebc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	039a      	lsls	r2, r3, #14
 8001ec2:	d4bd      	bmi.n	8001e40 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f8fe 	bl	80010c4 <HAL_GetTick>
 8001ec8:	1b80      	subs	r0, r0, r6
 8001eca:	2864      	cmp	r0, #100	; 0x64
 8001ecc:	d9f7      	bls.n	8001ebe <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001ece:	2003      	movs	r0, #3
 8001ed0:	e7e6      	b.n	8001ea0 <HAL_RCC_OscConfig+0x6c>
 8001ed2:	4d7b      	ldr	r5, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0xb8>
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	602b      	str	r3, [r5, #0]
 8001eea:	e7e4      	b.n	8001eb6 <HAL_RCC_OscConfig+0x82>
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef0:	602b      	str	r3, [r5, #0]
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d1db      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001efe:	f7ff f8e1 	bl	80010c4 <HAL_GetTick>
 8001f02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f04:	682b      	ldr	r3, [r5, #0]
 8001f06:	039b      	lsls	r3, r3, #14
 8001f08:	d59a      	bpl.n	8001e40 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0a:	f7ff f8db 	bl	80010c4 <HAL_GetTick>
 8001f0e:	1b80      	subs	r0, r0, r6
 8001f10:	2864      	cmp	r0, #100	; 0x64
 8001f12:	d9f7      	bls.n	8001f04 <HAL_RCC_OscConfig+0xd0>
 8001f14:	e7db      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f16:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	f012 0f0c 	tst.w	r2, #12
 8001f1e:	d010      	beq.n	8001f42 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f26:	2a08      	cmp	r2, #8
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	025f      	lsls	r7, r3, #9
 8001f2e:	d508      	bpl.n	8001f42 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f30:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001f32:	6893      	ldr	r3, [r2, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d111      	bne.n	8001f60 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3c:	6853      	ldr	r3, [r2, #4]
 8001f3e:	025e      	lsls	r6, r3, #9
 8001f40:	d40e      	bmi.n	8001f60 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b5f      	ldr	r3, [pc, #380]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	0795      	lsls	r5, r2, #30
 8001f48:	d502      	bpl.n	8001f50 <HAL_RCC_OscConfig+0x11c>
 8001f4a:	68e2      	ldr	r2, [r4, #12]
 8001f4c:	2a01      	cmp	r2, #1
 8001f4e:	d1a6      	bne.n	8001e9e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	6921      	ldr	r1, [r4, #16]
 8001f54:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f58:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001f5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e772      	b.n	8001e46 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f60:	68e2      	ldr	r2, [r4, #12]
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_OscConfig+0x290>)
 8001f64:	b1b2      	cbz	r2, 8001f94 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f8ab 	bl	80010c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4d54      	ldr	r5, [pc, #336]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001f70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	0798      	lsls	r0, r3, #30
 8001f76:	d507      	bpl.n	8001f88 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	6922      	ldr	r2, [r4, #16]
 8001f7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f84:	602b      	str	r3, [r5, #0]
 8001f86:	e75e      	b.n	8001e46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f89c 	bl	80010c4 <HAL_GetTick>
 8001f8c:	1b80      	subs	r0, r0, r6
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d9ef      	bls.n	8001f72 <HAL_RCC_OscConfig+0x13e>
 8001f92:	e79c      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001f94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f96:	f7ff f895 	bl	80010c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4d49      	ldr	r5, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001f9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	0799      	lsls	r1, r3, #30
 8001fa2:	f57f af50 	bpl.w	8001e46 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f88d 	bl	80010c4 <HAL_GetTick>
 8001faa:	1b80      	subs	r0, r0, r6
 8001fac:	2802      	cmp	r0, #2
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCC_OscConfig+0x16a>
 8001fb0:	e78d      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb2:	6962      	ldr	r2, [r4, #20]
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_RCC_OscConfig+0x294>)
 8001fb6:	b17a      	cbz	r2, 8001fd8 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f882 	bl	80010c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc0:	4d3f      	ldr	r5, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001fc2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001fc6:	079f      	lsls	r7, r3, #30
 8001fc8:	f53f af41 	bmi.w	8001e4e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f87a 	bl	80010c4 <HAL_GetTick>
 8001fd0:	1b80      	subs	r0, r0, r6
 8001fd2:	2802      	cmp	r0, #2
 8001fd4:	d9f6      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x190>
 8001fd6:	e77a      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001fd8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fda:	f7ff f873 	bl	80010c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	4d38      	ldr	r5, [pc, #224]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001fe0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001fe4:	0798      	lsls	r0, r3, #30
 8001fe6:	f57f af32 	bpl.w	8001e4e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f86b 	bl	80010c4 <HAL_GetTick>
 8001fee:	1b80      	subs	r0, r0, r6
 8001ff0:	2802      	cmp	r0, #2
 8001ff2:	d9f6      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1ae>
 8001ff4:	e76b      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff6:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffa:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001ffe:	d128      	bne.n	8002052 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	9201      	str	r2, [sp, #4]
 8002002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002014:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4d2d      	ldr	r5, [pc, #180]	; (80020cc <HAL_RCC_OscConfig+0x298>)
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	05d9      	lsls	r1, r3, #23
 800201c:	d51b      	bpl.n	8002056 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201e:	68a3      	ldr	r3, [r4, #8]
 8002020:	4d27      	ldr	r5, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8002022:	2b01      	cmp	r3, #1
 8002024:	d127      	bne.n	8002076 <HAL_RCC_OscConfig+0x242>
 8002026:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800202e:	f7ff f849 	bl	80010c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002032:	4d23      	ldr	r5, [pc, #140]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002034:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800203c:	079b      	lsls	r3, r3, #30
 800203e:	d539      	bpl.n	80020b4 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002040:	2e00      	cmp	r6, #0
 8002042:	f43f af08 	beq.w	8001e56 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_RCC_OscConfig+0x28c>)
 8002048:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	6413      	str	r3, [r2, #64]	; 0x40
 8002050:	e701      	b.n	8001e56 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002052:	2600      	movs	r6, #0
 8002054:	e7df      	b.n	8002016 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800205e:	f7ff f831 	bl	80010c4 <HAL_GetTick>
 8002062:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	682b      	ldr	r3, [r5, #0]
 8002066:	05da      	lsls	r2, r3, #23
 8002068:	d4d9      	bmi.n	800201e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff f82b 	bl	80010c4 <HAL_GetTick>
 800206e:	1bc0      	subs	r0, r0, r7
 8002070:	2802      	cmp	r0, #2
 8002072:	d9f7      	bls.n	8002064 <HAL_RCC_OscConfig+0x230>
 8002074:	e72b      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002076:	2b05      	cmp	r3, #5
 8002078:	d104      	bne.n	8002084 <HAL_RCC_OscConfig+0x250>
 800207a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	672b      	str	r3, [r5, #112]	; 0x70
 8002082:	e7d0      	b.n	8002026 <HAL_RCC_OscConfig+0x1f2>
 8002084:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	672a      	str	r2, [r5, #112]	; 0x70
 800208c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800208e:	f022 0204 	bic.w	r2, r2, #4
 8002092:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ca      	bne.n	800202e <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002098:	f7ff f814 	bl	80010c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020a0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020a4:	0798      	lsls	r0, r3, #30
 80020a6:	d5cb      	bpl.n	8002040 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff f80c 	bl	80010c4 <HAL_GetTick>
 80020ac:	1bc0      	subs	r0, r0, r7
 80020ae:	4540      	cmp	r0, r8
 80020b0:	d9f7      	bls.n	80020a2 <HAL_RCC_OscConfig+0x26e>
 80020b2:	e70c      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7ff f806 	bl	80010c4 <HAL_GetTick>
 80020b8:	1bc0      	subs	r0, r0, r7
 80020ba:	4540      	cmp	r0, r8
 80020bc:	d9bd      	bls.n	800203a <HAL_RCC_OscConfig+0x206>
 80020be:	e706      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	42470000 	.word	0x42470000
 80020c8:	42470e80 	.word	0x42470e80
 80020cc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d0:	4d23      	ldr	r5, [pc, #140]	; (8002160 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	68ab      	ldr	r3, [r5, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	f43f aee0 	beq.w	8001e9e <HAL_RCC_OscConfig+0x6a>
 80020de:	4e21      	ldr	r6, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x330>)
 80020e0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020e4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	d12d      	bne.n	8002144 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80020e8:	f7fe ffec 	bl	80010c4 <HAL_GetTick>
 80020ec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	0199      	lsls	r1, r3, #6
 80020f2:	d421      	bmi.n	8002138 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	6a22      	ldr	r2, [r4, #32]
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002106:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002108:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800210c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4c14      	ldr	r4, [pc, #80]	; (8002160 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002110:	0852      	lsrs	r2, r2, #1
 8002112:	3a01      	subs	r2, #1
 8002114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002118:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800211a:	2301      	movs	r3, #1
 800211c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800211e:	f7fe ffd1 	bl	80010c4 <HAL_GetTick>
 8002122:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	019a      	lsls	r2, r3, #6
 8002128:	f53f ae99 	bmi.w	8001e5e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe ffca 	bl	80010c4 <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f6      	bls.n	8002124 <HAL_RCC_OscConfig+0x2f0>
 8002136:	e6ca      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ffc4 	bl	80010c4 <HAL_GetTick>
 800213c:	1bc0      	subs	r0, r0, r7
 800213e:	2802      	cmp	r0, #2
 8002140:	d9d5      	bls.n	80020ee <HAL_RCC_OscConfig+0x2ba>
 8002142:	e6c4      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002144:	f7fe ffbe 	bl	80010c4 <HAL_GetTick>
 8002148:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	f57f ae86 	bpl.w	8001e5e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe ffb7 	bl	80010c4 <HAL_GetTick>
 8002156:	1b00      	subs	r0, r0, r4
 8002158:	2802      	cmp	r0, #2
 800215a:	d9f6      	bls.n	800214a <HAL_RCC_OscConfig+0x316>
 800215c:	e6b7      	b.n	8001ece <HAL_RCC_OscConfig+0x9a>
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	42470060 	.word	0x42470060

08002168 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002168:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800216a:	b1b1      	cbz	r1, 800219a <HAL_TIM_Encoder_Start_IT+0x32>
 800216c:	2904      	cmp	r1, #4
 800216e:	d026      	beq.n	80021be <HAL_TIM_Encoder_Start_IT+0x56>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	f022 0210 	bic.w	r2, r2, #16
 8002186:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	f042 0210 	orr.w	r2, r2, #16
 800218e:	621a      	str	r2, [r3, #32]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	f042 0202 	orr.w	r2, r2, #2
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	e019      	b.n	80021ce <HAL_TIM_Encoder_Start_IT+0x66>
  TIMx->CCER &= ~tmp;
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	f042 0202 	orr.w	r2, r2, #2
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021b0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr
  TIMx->CCER &= ~tmp;
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	f022 0210 	bic.w	r2, r2, #16
 80021c4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80021c6:	6a1a      	ldr	r2, [r3, #32]
 80021c8:	f042 0210 	orr.w	r2, r2, #16
 80021cc:	621a      	str	r2, [r3, #32]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	e7ec      	b.n	80021b0 <HAL_TIM_Encoder_Start_IT+0x48>

080021d6 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 80021d6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d01c      	beq.n	8002218 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 80021de:	290c      	cmp	r1, #12
 80021e0:	d818      	bhi.n	8002214 <HAL_TIM_ReadCapturedValue+0x3e>
 80021e2:	e8df f001 	tbb	[pc, r1]
 80021e6:	1707      	.short	0x1707
 80021e8:	170e1717 	.word	0x170e1717
 80021ec:	17111717 	.word	0x17111717
 80021f0:	1717      	.short	0x1717
 80021f2:	14          	.byte	0x14
 80021f3:	00          	.byte	0x00
      tmpreg = htim->Instance->CCR1;
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 80021f8:	2200      	movs	r2, #0
 80021fa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
 80021fe:	4618      	mov	r0, r3
 8002200:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 8002202:	6803      	ldr	r3, [r0, #0]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8002206:	e7f7      	b.n	80021f8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR3;
 8002208:	6803      	ldr	r3, [r0, #0]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 800220c:	e7f4      	b.n	80021f8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR4;
 800220e:	6803      	ldr	r3, [r0, #0]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8002212:	e7f1      	b.n	80021f8 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	e7ef      	b.n	80021f8 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8002218:	2302      	movs	r3, #2
 800221a:	e7f0      	b.n	80021fe <HAL_TIM_ReadCapturedValue+0x28>

0800221c <HAL_TIM_PeriodElapsedCallback>:
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_OC_DelayElapsedCallback>:
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002220:	4770      	bx	lr

08002222 <HAL_TIM_TriggerCallback>:
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002224:	6803      	ldr	r3, [r0, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	0791      	lsls	r1, r2, #30
{
 800222a:	b510      	push	{r4, lr}
 800222c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222e:	d50e      	bpl.n	800224e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	0792      	lsls	r2, r2, #30
 8002234:	d50b      	bpl.n	800224e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002236:	f06f 0202 	mvn.w	r2, #2
 800223a:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002240:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	d077      	beq.n	8002336 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002246:	f000 fbc9 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	2300      	movs	r3, #0
 800224c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	0750      	lsls	r0, r2, #29
 8002254:	d510      	bpl.n	8002278 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	0751      	lsls	r1, r2, #29
 800225a:	d50d      	bpl.n	8002278 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800225c:	f06f 0204 	mvn.w	r2, #4
 8002260:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002262:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002264:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002266:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800226c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226e:	d068      	beq.n	8002342 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002270:	f000 fbb4 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002274:	2300      	movs	r3, #0
 8002276:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	0712      	lsls	r2, r2, #28
 800227e:	d50f      	bpl.n	80022a0 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	0710      	lsls	r0, r2, #28
 8002284:	d50c      	bpl.n	80022a0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002286:	f06f 0208 	mvn.w	r2, #8
 800228a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002290:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002292:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002294:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002296:	d05a      	beq.n	800234e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	f000 fba0 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229c:	2300      	movs	r3, #0
 800229e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	06d2      	lsls	r2, r2, #27
 80022a6:	d510      	bpl.n	80022ca <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	06d0      	lsls	r0, r2, #27
 80022ac:	d50d      	bpl.n	80022ca <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ae:	f06f 0210 	mvn.w	r2, #16
 80022b2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022bc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c0:	d04b      	beq.n	800235a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	f000 fb8b 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	2300      	movs	r3, #0
 80022c8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	07d1      	lsls	r1, r2, #31
 80022d0:	d508      	bpl.n	80022e4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	07d2      	lsls	r2, r2, #31
 80022d6:	d505      	bpl.n	80022e4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d8:	f06f 0201 	mvn.w	r2, #1
 80022dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff ff9c 	bl	800221c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	0610      	lsls	r0, r2, #24
 80022ea:	d508      	bpl.n	80022fe <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	0611      	lsls	r1, r2, #24
 80022f0:	d505      	bpl.n	80022fe <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f000 fa1a 	bl	8002732 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	0652      	lsls	r2, r2, #25
 8002304:	d508      	bpl.n	8002318 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	0650      	lsls	r0, r2, #25
 800230a:	d505      	bpl.n	8002318 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002310:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff ff85 	bl	8002222 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	0691      	lsls	r1, r2, #26
 800231e:	d522      	bpl.n	8002366 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	0692      	lsls	r2, r2, #26
 8002324:	d51f      	bpl.n	8002366 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002326:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800232a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	611a      	str	r2, [r3, #16]
}
 800232e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002332:	f000 b9fd 	b.w	8002730 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	f7ff ff72 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff70 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
 8002340:	e783      	b.n	800224a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	f7ff ff6c 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ff6a 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
 800234c:	e792      	b.n	8002274 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	f7ff ff66 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002352:	4620      	mov	r0, r4
 8002354:	f7ff ff64 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
 8002358:	e7a0      	b.n	800229c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	f7ff ff60 	bl	800221e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235e:	4620      	mov	r0, r4
 8002360:	f7ff ff5e 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
 8002364:	e7af      	b.n	80022c6 <HAL_TIM_IRQHandler+0xa2>
 8002366:	bd10      	pop	{r4, pc}

08002368 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002368:	4a2e      	ldr	r2, [pc, #184]	; (8002424 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800236a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800236c:	4290      	cmp	r0, r2
 800236e:	d012      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 8002370:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002374:	d00f      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 8002376:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800237a:	4290      	cmp	r0, r2
 800237c:	d00b      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 800237e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002382:	4290      	cmp	r0, r2
 8002384:	d007      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 8002386:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800238a:	4290      	cmp	r0, r2
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 800238e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002392:	4290      	cmp	r0, r2
 8002394:	d11d      	bne.n	80023d2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002396:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800239c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800239e:	4a21      	ldr	r2, [pc, #132]	; (8002424 <TIM_Base_SetConfig+0xbc>)
 80023a0:	4290      	cmp	r0, r2
 80023a2:	d104      	bne.n	80023ae <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023aa:	4313      	orrs	r3, r2
 80023ac:	e028      	b.n	8002400 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80023ae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023b2:	d0f7      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <TIM_Base_SetConfig+0xc0>)
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d0f4      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023be:	4290      	cmp	r0, r2
 80023c0:	d0f0      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c6:	4290      	cmp	r0, r2
 80023c8:	d0ec      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023ce:	4290      	cmp	r0, r2
 80023d0:	d0e8      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <TIM_Base_SetConfig+0xc4>)
 80023d4:	4290      	cmp	r0, r2
 80023d6:	d0e5      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023dc:	4290      	cmp	r0, r2
 80023de:	d0e1      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e4:	4290      	cmp	r0, r2
 80023e6:	d0dd      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023e8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023ec:	4290      	cmp	r0, r2
 80023ee:	d0d9      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023f4:	4290      	cmp	r0, r2
 80023f6:	d0d5      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
 80023f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fc:	4290      	cmp	r0, r2
 80023fe:	d0d1      	beq.n	80023a4 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002400:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002402:	688b      	ldr	r3, [r1, #8]
 8002404:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002406:	680b      	ldr	r3, [r1, #0]
 8002408:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <TIM_Base_SetConfig+0xbc>)
 800240c:	4298      	cmp	r0, r3
 800240e:	d006      	beq.n	800241e <TIM_Base_SetConfig+0xb6>
 8002410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002414:	4298      	cmp	r0, r3
 8002416:	d002      	beq.n	800241e <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002418:	2301      	movs	r3, #1
 800241a:	6143      	str	r3, [r0, #20]
}
 800241c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800241e:	690b      	ldr	r3, [r1, #16]
 8002420:	6303      	str	r3, [r0, #48]	; 0x30
 8002422:	e7f9      	b.n	8002418 <TIM_Base_SetConfig+0xb0>
 8002424:	40010000 	.word	0x40010000
 8002428:	40000400 	.word	0x40000400
 800242c:	40014000 	.word	0x40014000

08002430 <HAL_TIM_IC_Init>:
{
 8002430:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002432:	4604      	mov	r4, r0
 8002434:	b1a0      	cbz	r0, 8002460 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002436:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800243a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800243e:	b91b      	cbnz	r3, 8002448 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002440:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8002444:	f001 faa6 	bl	8003994 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002448:	2302      	movs	r3, #2
 800244a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	1d21      	adds	r1, r4, #4
 8002452:	f7ff ff89 	bl	8002368 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002456:	2301      	movs	r3, #1
 8002458:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800245c:	2000      	movs	r0, #0
 800245e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
}
 8002462:	bd10      	pop	{r4, pc}

08002464 <HAL_TIM_Encoder_Init>:
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	460c      	mov	r4, r1
  if(htim == NULL)
 8002468:	4605      	mov	r5, r0
 800246a:	2800      	cmp	r0, #0
 800246c:	d041      	beq.n	80024f2 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 800246e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002472:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002476:	b91b      	cbnz	r3, 8002480 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002478:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800247c:	f001 fab8 	bl	80039f0 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002480:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8002482:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002484:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8002488:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800248c:	6883      	ldr	r3, [r0, #8]
 800248e:	f023 0307 	bic.w	r3, r3, #7
 8002492:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002494:	f7ff ff68 	bl	8002368 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002498:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800249a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800249c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800249e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024a0:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 80024a2:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 80024a4:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024a6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80024ac:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024b0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80024b4:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024b6:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024ba:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024bc:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80024c4:	68e1      	ldr	r1, [r4, #12]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024ca:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024ce:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80024d2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024d4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024d6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024da:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024de:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80024e2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024e4:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80024e6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80024e8:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80024ea:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80024ee:	2000      	movs	r0, #0
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
}
 80024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024f8 <TIM_TI1_SetConfig>:
{
 80024f8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fa:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024fc:	4e1a      	ldr	r6, [pc, #104]	; (8002568 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	f024 0401 	bic.w	r4, r4, #1
 8002502:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002504:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002506:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002508:	42b0      	cmp	r0, r6
 800250a:	f024 0403 	bic.w	r4, r4, #3
 800250e:	d01a      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 8002510:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002514:	d017      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 8002516:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800251a:	42b0      	cmp	r0, r6
 800251c:	d013      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 800251e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002522:	42b0      	cmp	r0, r6
 8002524:	d00f      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 8002526:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800252a:	42b0      	cmp	r0, r6
 800252c:	d00b      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 800252e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002532:	42b0      	cmp	r0, r6
 8002534:	d007      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 8002536:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800253a:	42b0      	cmp	r0, r6
 800253c:	d003      	beq.n	8002546 <TIM_TI1_SetConfig+0x4e>
 800253e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002542:	42b0      	cmp	r0, r6
 8002544:	d10d      	bne.n	8002562 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8002546:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002548:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800254a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800254e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002550:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002554:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002558:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800255a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800255c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800255e:	6201      	str	r1, [r0, #32]
}
 8002560:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002562:	f044 0201 	orr.w	r2, r4, #1
 8002566:	e7ef      	b.n	8002548 <TIM_TI1_SetConfig+0x50>
 8002568:	40010000 	.word	0x40010000

0800256c <HAL_TIM_IC_ConfigChannel>:
{
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800256e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002572:	2b01      	cmp	r3, #1
{
 8002574:	4604      	mov	r4, r0
 8002576:	460d      	mov	r5, r1
 8002578:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800257c:	d019      	beq.n	80025b2 <HAL_TIM_IC_ConfigChannel+0x46>
 800257e:	2301      	movs	r3, #1
 8002580:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002588:	b9a2      	cbnz	r2, 80025b4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800258a:	68cb      	ldr	r3, [r1, #12]
 800258c:	6820      	ldr	r0, [r4, #0]
 800258e:	c906      	ldmia	r1, {r1, r2}
 8002590:	f7ff ffb2 	bl	80024f8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002594:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002596:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	f022 020c 	bic.w	r2, r2, #12
 800259e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80025ae:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80025b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80025b4:	2a04      	cmp	r2, #4
 80025b6:	688e      	ldr	r6, [r1, #8]
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	68e8      	ldr	r0, [r5, #12]
 80025bc:	c982      	ldmia	r1, {r1, r7}
 80025be:	d11f      	bne.n	8002600 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	6a1a      	ldr	r2, [r3, #32]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80025ca:	6a1d      	ldr	r5, [r3, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80025cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80025d0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80025d4:	0300      	lsls	r0, r0, #12
 80025d6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025d8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80025dc:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80025de:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80025e0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025e4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80025e8:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ec:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025f4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80025fc:	619e      	str	r6, [r3, #24]
 80025fe:	e7d2      	b.n	80025a6 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8002600:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002602:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002604:	d11c      	bne.n	8002640 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800260c:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 800260e:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002610:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002614:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002616:	0100      	lsls	r0, r0, #4
 8002618:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800261a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800261e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002620:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002622:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002626:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800262a:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800262c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800262e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	f022 020c 	bic.w	r2, r2, #12
 8002636:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800263c:	61de      	str	r6, [r3, #28]
 800263e:	e7b2      	b.n	80025a6 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002644:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002646:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002648:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800264a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800264e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002652:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002654:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002658:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800265a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800265c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800265e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002662:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002666:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002668:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800266a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002672:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800267a:	e7df      	b.n	800263c <HAL_TIM_IC_ConfigChannel+0xd0>

0800267c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800267c:	6a03      	ldr	r3, [r0, #32]
{
 800267e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002680:	2401      	movs	r4, #1
 8002682:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002684:	ea23 0304 	bic.w	r3, r3, r4
 8002688:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800268a:	6a03      	ldr	r3, [r0, #32]
 800268c:	408a      	lsls	r2, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	6202      	str	r2, [r0, #32]
 8002692:	bd10      	pop	{r4, pc}

08002694 <HAL_TIM_IC_Start_IT>:
{
 8002694:	b510      	push	{r4, lr}
 8002696:	4604      	mov	r4, r0
  switch (Channel)
 8002698:	290c      	cmp	r1, #12
 800269a:	d80d      	bhi.n	80026b8 <HAL_TIM_IC_Start_IT+0x24>
 800269c:	e8df f001 	tbb	[pc, r1]
 80026a0:	0c0c0c07 	.word	0x0c0c0c07
 80026a4:	0c0c0c17 	.word	0x0c0c0c17
 80026a8:	0c0c0c1c 	.word	0x0c0c0c1c
 80026ac:	21          	.byte	0x21
 80026ad:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026ae:	6802      	ldr	r2, [r0, #0]
 80026b0:	68d3      	ldr	r3, [r2, #12]
 80026b2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026b6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f7ff ffde 	bl	800267c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	6813      	ldr	r3, [r2, #0]
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6013      	str	r3, [r2, #0]
} 
 80026ca:	2000      	movs	r0, #0
 80026cc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026ce:	6802      	ldr	r2, [r0, #0]
 80026d0:	68d3      	ldr	r3, [r2, #12]
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	e7ee      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	68d3      	ldr	r3, [r2, #12]
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	e7e9      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026e2:	6802      	ldr	r2, [r0, #0]
 80026e4:	68d3      	ldr	r3, [r2, #12]
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	e7e4      	b.n	80026b6 <HAL_TIM_IC_Start_IT+0x22>

080026ec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80026ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80026f0:	2b01      	cmp	r3, #1
{
 80026f2:	b510      	push	{r4, lr}
 80026f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80026f8:	d018      	beq.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80026fe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002700:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002702:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002704:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002706:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800270a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4322      	orrs	r2, r4
 8002710:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002718:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002720:	2301      	movs	r3, #1
 8002722:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002726:	2300      	movs	r3, #0
 8002728:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800272c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800272e:	bd10      	pop	{r4, pc}

08002730 <HAL_TIMEx_CommutationCallback>:
 8002730:	4770      	bx	lr

08002732 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002732:	4770      	bx	lr

08002734 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002738:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800273a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800273c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800273e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002744:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002746:	6133      	str	r3, [r6, #16]
{
 8002748:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800274a:	6883      	ldr	r3, [r0, #8]
 800274c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800274e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002750:	4303      	orrs	r3, r0
 8002752:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002754:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002758:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800275a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800275e:	430b      	orrs	r3, r1
 8002760:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002762:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002764:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002766:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800276c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002772:	6173      	str	r3, [r6, #20]
 8002774:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002776:	d17c      	bne.n	8002872 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002778:	429e      	cmp	r6, r3
 800277a:	d003      	beq.n	8002784 <UART_SetConfig+0x50>
 800277c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002780:	429e      	cmp	r6, r3
 8002782:	d144      	bne.n	800280e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002784:	f7ff fafe 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8002788:	2519      	movs	r5, #25
 800278a:	fb05 f300 	mul.w	r3, r5, r0
 800278e:	6860      	ldr	r0, [r4, #4]
 8002790:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002794:	0040      	lsls	r0, r0, #1
 8002796:	fbb3 f3f0 	udiv	r3, r3, r0
 800279a:	fbb3 f3f9 	udiv	r3, r3, r9
 800279e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027a2:	f7ff faef 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	4368      	muls	r0, r5
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fbb0 f7f3 	udiv	r7, r0, r3
 80027b0:	f7ff fae8 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80027b4:	6863      	ldr	r3, [r4, #4]
 80027b6:	4368      	muls	r0, r5
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	fbb3 f3f9 	udiv	r3, r3, r9
 80027c2:	fb09 7313 	mls	r3, r9, r3, r7
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	3332      	adds	r3, #50	; 0x32
 80027ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80027d4:	f7ff fad6 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80027d8:	6862      	ldr	r2, [r4, #4]
 80027da:	4368      	muls	r0, r5
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	fbb0 faf2 	udiv	sl, r0, r2
 80027e2:	f7ff facf 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027e6:	6863      	ldr	r3, [r4, #4]
 80027e8:	4368      	muls	r0, r5
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80027f4:	fb09 a313 	mls	r3, r9, r3, sl
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002806:	443b      	add	r3, r7
 8002808:	60b3      	str	r3, [r6, #8]
 800280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800280e:	f7ff faa9 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002812:	2519      	movs	r5, #25
 8002814:	fb05 f300 	mul.w	r3, r5, r0
 8002818:	6860      	ldr	r0, [r4, #4]
 800281a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800281e:	0040      	lsls	r0, r0, #1
 8002820:	fbb3 f3f0 	udiv	r3, r3, r0
 8002824:	fbb3 f3f9 	udiv	r3, r3, r9
 8002828:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800282c:	f7ff fa9a 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002830:	6863      	ldr	r3, [r4, #4]
 8002832:	4368      	muls	r0, r5
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb0 f7f3 	udiv	r7, r0, r3
 800283a:	f7ff fa93 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	4368      	muls	r0, r5
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb0 f3f3 	udiv	r3, r0, r3
 8002848:	fbb3 f3f9 	udiv	r3, r3, r9
 800284c:	fb09 7313 	mls	r3, r9, r3, r7
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	fbb3 f3f9 	udiv	r3, r3, r9
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800285e:	f7ff fa81 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002862:	6862      	ldr	r2, [r4, #4]
 8002864:	4368      	muls	r0, r5
 8002866:	0052      	lsls	r2, r2, #1
 8002868:	fbb0 faf2 	udiv	sl, r0, r2
 800286c:	f7ff fa7a 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002870:	e7b9      	b.n	80027e6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002872:	429e      	cmp	r6, r3
 8002874:	d002      	beq.n	800287c <UART_SetConfig+0x148>
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <UART_SetConfig+0x230>)
 8002878:	429e      	cmp	r6, r3
 800287a:	d140      	bne.n	80028fe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800287c:	f7ff fa82 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8002880:	6867      	ldr	r7, [r4, #4]
 8002882:	2519      	movs	r5, #25
 8002884:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002888:	fb05 f300 	mul.w	r3, r5, r0
 800288c:	00bf      	lsls	r7, r7, #2
 800288e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002892:	fbb3 f3f9 	udiv	r3, r3, r9
 8002896:	011f      	lsls	r7, r3, #4
 8002898:	f7ff fa74 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 800289c:	6863      	ldr	r3, [r4, #4]
 800289e:	4368      	muls	r0, r5
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	fbb0 f8f3 	udiv	r8, r0, r3
 80028a6:	f7ff fa6d 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80028aa:	6863      	ldr	r3, [r4, #4]
 80028ac:	4368      	muls	r0, r5
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80028b8:	fb09 8313 	mls	r3, r9, r3, r8
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	3332      	adds	r3, #50	; 0x32
 80028c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80028c4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80028c8:	f7ff fa5c 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80028cc:	6862      	ldr	r2, [r4, #4]
 80028ce:	4368      	muls	r0, r5
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	fbb0 faf2 	udiv	sl, r0, r2
 80028d6:	f7ff fa55 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028da:	6863      	ldr	r3, [r4, #4]
 80028dc:	4368      	muls	r0, r5
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80028e8:	fb09 a313 	mls	r3, r9, r3, sl
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	3332      	adds	r3, #50	; 0x32
 80028f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	ea43 0308 	orr.w	r3, r3, r8
 80028fc:	e783      	b.n	8002806 <UART_SetConfig+0xd2>
 80028fe:	f7ff fa31 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8002902:	6867      	ldr	r7, [r4, #4]
 8002904:	2519      	movs	r5, #25
 8002906:	f04f 0964 	mov.w	r9, #100	; 0x64
 800290a:	fb05 f300 	mul.w	r3, r5, r0
 800290e:	00bf      	lsls	r7, r7, #2
 8002910:	fbb3 f3f7 	udiv	r3, r3, r7
 8002914:	fbb3 f3f9 	udiv	r3, r3, r9
 8002918:	011f      	lsls	r7, r3, #4
 800291a:	f7ff fa23 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800291e:	6863      	ldr	r3, [r4, #4]
 8002920:	4368      	muls	r0, r5
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	fbb0 f8f3 	udiv	r8, r0, r3
 8002928:	f7ff fa1c 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800292c:	6863      	ldr	r3, [r4, #4]
 800292e:	4368      	muls	r0, r5
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	fbb3 f3f9 	udiv	r3, r3, r9
 800293a:	fb09 8313 	mls	r3, r9, r3, r8
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	fbb3 f3f9 	udiv	r3, r3, r9
 8002946:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800294a:	f7ff fa0b 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800294e:	6862      	ldr	r2, [r4, #4]
 8002950:	4368      	muls	r0, r5
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	fbb0 faf2 	udiv	sl, r0, r2
 8002958:	f7ff fa04 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 800295c:	e7bd      	b.n	80028da <UART_SetConfig+0x1a6>
 800295e:	bf00      	nop
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400

08002968 <HAL_UART_Init>:
{
 8002968:	b510      	push	{r4, lr}
  if(huart == NULL)
 800296a:	4604      	mov	r4, r0
 800296c:	b340      	cbz	r0, 80029c0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800296e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002976:	b91b      	cbnz	r3, 8002980 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002978:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800297c:	f001 f884 	bl	8003a88 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002980:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002982:	2324      	movs	r3, #36	; 0x24
 8002984:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002988:	68d3      	ldr	r3, [r2, #12]
 800298a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800298e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fecf 	bl	8002734 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800299e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80029b2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80029b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80029ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80029be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029c0:	2001      	movs	r0, #1
}
 80029c2:	bd10      	pop	{r4, pc}

080029c4 <event_get>:
event_t event_handler = event_z;

event_t event_get()
{
	return event_handler;
}
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <event_get+0x8>)
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000210 	.word	0x20000210

080029d0 <event_set>:

void event_set(event_t event_new)
{
	event_handler = event_new;
 80029d0:	4b01      	ldr	r3, [pc, #4]	; (80029d8 <event_set+0x8>)
 80029d2:	7018      	strb	r0, [r3, #0]
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000210 	.word	0x20000210

080029dc <HAL_TIM_IC_CaptureCallback>:
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

	if (htim->Instance == TIM1)
 80029dc:	6803      	ldr	r3, [r0, #0]
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_TIM_IC_CaptureCallback+0x74>)
 80029e0:	4293      	cmp	r3, r2
{
 80029e2:	b510      	push	{r4, lr}
 80029e4:	4604      	mov	r4, r0
	if (htim->Instance == TIM1)
 80029e6:	d11d      	bne.n	8002a24 <HAL_TIM_IC_CaptureCallback+0x48>
	{
		// =FALLING= EDGE DETECTED AT FIRST
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80029e8:	7e03      	ldrb	r3, [r0, #24]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			// Get =FALLING= EDGE Capture value
			pulse_width = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80029ee:	2100      	movs	r1, #0
 80029f0:	f7ff fbf1 	bl	80021d6 <HAL_TIM_ReadCapturedValue>
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_TIM_IC_CaptureCallback+0x78>)
 80029f6:	b280      	uxth	r0, r0
 80029f8:	8018      	strh	r0, [r3, #0]

			if ((pulse_width <= BTN_PUSH_TIME_MAX)
 80029fa:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
 80029fe:	2b96      	cmp	r3, #150	; 0x96
 8002a00:	d80a      	bhi.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x3c>
					&& (pulse_width >= BTN_PUSH_TIME_MIN))
			{
				event_handler = event_enc_push_quick;
 8002a02:	2203      	movs	r2, #3
			} else if (pulse_width <= BTN_HOLD_TIME)
			{
				event_handler = event_enc_push_long;
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002a06:	701a      	strb	r2, [r3, #0]
			}
		}
		// =RISING= EDGE DETECTED
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002a08:	7e23      	ldrb	r3, [r4, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11e      	bne.n	8002a4c <HAL_TIM_IC_CaptureCallback+0x70>
		{
			__HAL_TIM_SET_COUNTER(&htim1, 0x0);
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_TIM_IC_CaptureCallback+0x80>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
 8002a16:	bd10      	pop	{r4, pc}
			} else if (pulse_width <= BTN_HOLD_TIME)
 8002a18:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d8f3      	bhi.n	8002a08 <HAL_TIM_IC_CaptureCallback+0x2c>
				event_handler = event_enc_push_long;
 8002a20:	2204      	movs	r2, #4
 8002a22:	e7ef      	b.n	8002a04 <HAL_TIM_IC_CaptureCallback+0x28>
		}

	} else if (htim->Instance == TIM2)
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d110      	bne.n	8002a4c <HAL_TIM_IC_CaptureCallback+0x70>
	{
//		encoder = __HAL_TIM_GET_COUNTER(&htim2);

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002a2e:	f013 0f10 	tst.w	r3, #16
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_TIM_IC_CaptureCallback+0x84>)
		{
			event_handler = event_enc_rotation_left;
 8002a34:	bf15      	itete	ne
 8002a36:	2101      	movne	r1, #1
			temp++;
		} else
		{
			event_handler = event_enc_rotation_right;
 8002a38:	2102      	moveq	r1, #2
			event_handler = event_enc_rotation_left;
 8002a3a:	7011      	strbne	r1, [r2, #0]
			event_handler = event_enc_rotation_right;
 8002a3c:	7011      	strbeq	r1, [r2, #0]
			temp++;
 8002a3e:	bf15      	itete	ne
 8002a40:	681a      	ldrne	r2, [r3, #0]
			temp--;
 8002a42:	681a      	ldreq	r2, [r3, #0]
			temp++;
 8002a44:	1852      	addne	r2, r2, r1
			temp--;
 8002a46:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	20000268 	.word	0x20000268
 8002a58:	20000210 	.word	0x20000210
 8002a5c:	200003d4 	.word	0x200003d4
 8002a60:	20000214 	.word	0x20000214

08002a64 <find_slave>:
node_t generator_init;
node_t generator_change_param;
node_t generator_select_order;

uint16_t find_slave()
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;
	uint16_t addr = 0;
	for (uint16_t i = 0; i < 128; i++)
	{
		addr = i << 1;
		res = HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 10);
 8002a66:	4d08      	ldr	r5, [pc, #32]	; (8002a88 <find_slave+0x24>)
{
 8002a68:	2400      	movs	r4, #0
		res = HAL_I2C_IsDeviceReady(&hi2c1, addr, 1, 10);
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4628      	mov	r0, r5
 8002a72:	f7fe fecd 	bl	8001810 <HAL_I2C_IsDeviceReady>
		if (res == HAL_OK)
 8002a76:	b128      	cbz	r0, 8002a84 <find_slave+0x20>
 8002a78:	3402      	adds	r4, #2
 8002a7a:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < 128; i++)
 8002a7c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002a80:	d1f3      	bne.n	8002a6a <find_slave+0x6>
		{
			return addr;
		}
	}
	return 0;
 8002a82:	2400      	movs	r4, #0
}
 8002a84:	4620      	mov	r0, r4
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	20000380 	.word	0x20000380

08002a8c <menu_init>:

void menu_init()
{
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Set starting point for menu
	node_set_ptr(&list_generator);
 8002a90:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8002be0 <menu_init+0x154>

	node_init(&list_generator, vm_generator_cb,
 8002a94:	4e41      	ldr	r6, [pc, #260]	; (8002b9c <menu_init+0x110>)
 8002a96:	4d42      	ldr	r5, [pc, #264]	; (8002ba0 <menu_init+0x114>)
 8002a98:	4f42      	ldr	r7, [pc, #264]	; (8002ba4 <menu_init+0x118>)
 8002a9a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8002be4 <menu_init+0x158>
 8002a9e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8002be8 <menu_init+0x15c>
 8002aa2:	f8df b148 	ldr.w	fp, [pc, #328]	; 8002bec <menu_init+0x160>
{
 8002aa6:	b087      	sub	sp, #28
	node_init(&list_generator, vm_generator_cb,
 8002aa8:	2400      	movs	r4, #0
	node_set_ptr(&list_generator);
 8002aaa:	4640      	mov	r0, r8
 8002aac:	f000 f8ae 	bl	8002c0c <node_set_ptr>
	node_init(&list_generator, vm_generator_cb,
 8002ab0:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ab4:	4633      	mov	r3, r6
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4640      	mov	r0, r8
 8002aba:	9405      	str	r4, [sp, #20]
 8002abc:	9704      	str	r7, [sp, #16]
 8002abe:	f8cd b00c 	str.w	fp, [sp, #12]
 8002ac2:	f8cd a008 	str.w	sl, [sp, #8]
 8002ac6:	9500      	str	r5, [sp, #0]
 8002ac8:	4937      	ldr	r1, [pc, #220]	; (8002ba8 <menu_init+0x11c>)
 8002aca:	f000 f91d 	bl	8002d08 <node_init>
	NULL, rendering_child, rendering_next, rendering_prev, &list_freq_meter,
			&list_PSK, &generator_init,
			NULL);

	node_init(&list_freq_meter, vm_frequency_meter_cb,
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <menu_init+0x120>)
 8002ad0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	e88d 0220 	stmia.w	sp, {r5, r9}
 8002ada:	4633      	mov	r3, r6
 8002adc:	4622      	mov	r2, r4
 8002ade:	4650      	mov	r0, sl
 8002ae0:	9405      	str	r4, [sp, #20]
 8002ae2:	9404      	str	r4, [sp, #16]
 8002ae4:	4932      	ldr	r1, [pc, #200]	; (8002bb0 <menu_init+0x124>)
 8002ae6:	f000 f90f 	bl	8002d08 <node_init>
	NULL, rendering_child, rendering_next, rendering_prev, &list_FSK,
			&list_generator,
			NULL,
			NULL);

	node_init(&list_FSK, vm_FSK_cb,
 8002aea:	e88d 0a20 	stmia.w	sp, {r5, r9, fp}
 8002aee:	4633      	mov	r3, r6
 8002af0:	4622      	mov	r2, r4
 8002af2:	9405      	str	r4, [sp, #20]
 8002af4:	9404      	str	r4, [sp, #16]
 8002af6:	f8cd a00c 	str.w	sl, [sp, #12]
 8002afa:	492e      	ldr	r1, [pc, #184]	; (8002bb4 <menu_init+0x128>)
 8002afc:	482b      	ldr	r0, [pc, #172]	; (8002bac <menu_init+0x120>)
 8002afe:	f000 f903 	bl	8002d08 <node_init>
	NULL, rendering_child, rendering_next, rendering_prev, &list_PSK,
			&list_freq_meter,
			NULL,
			NULL);

	node_init(&list_PSK, vm_PSK_cb,
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <menu_init+0x120>)
 8002b04:	9303      	str	r3, [sp, #12]
 8002b06:	e88d 0620 	stmia.w	sp, {r5, r9, sl}
 8002b0a:	4633      	mov	r3, r6
 8002b0c:	4622      	mov	r2, r4
 8002b0e:	4658      	mov	r0, fp
	NULL, rendering_child, rendering_next, rendering_prev, &list_freq_meter,
			&list_FSK,
			NULL,
			NULL);

	node_init(&generator_init,
 8002b10:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8002bf0 <menu_init+0x164>
	node_init(&list_PSK, vm_PSK_cb,
 8002b14:	9405      	str	r4, [sp, #20]
 8002b16:	9404      	str	r4, [sp, #16]
 8002b18:	4927      	ldr	r1, [pc, #156]	; (8002bb8 <menu_init+0x12c>)
 8002b1a:	f000 f8f5 	bl	8002d08 <node_init>
	node_init(&generator_init,
 8002b1e:	f8cd 8014 	str.w	r8, [sp, #20]
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <menu_init+0x130>)
 8002b24:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002bf4 <menu_init+0x168>
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	464a      	mov	r2, r9
 8002b2e:	4633      	mov	r3, r6
 8002b30:	4638      	mov	r0, r7
 8002b32:	f8cd 8010 	str.w	r8, [sp, #16]
 8002b36:	9403      	str	r4, [sp, #12]
 8002b38:	9402      	str	r4, [sp, #8]
 8002b3a:	4921      	ldr	r1, [pc, #132]	; (8002bc0 <menu_init+0x134>)
			NULL,
			NULL,
			&generator_select_order,
			&list_generator);

	node_init(&generator_select_order,
 8002b3c:	4e21      	ldr	r6, [pc, #132]	; (8002bc4 <menu_init+0x138>)
	node_init(&generator_init,
 8002b3e:	f000 f8e3 	bl	8002d08 <node_init>
	node_init(&generator_select_order,
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <menu_init+0x13c>)
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	464a      	mov	r2, r9
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	4640      	mov	r0, r8
 8002b4e:	9705      	str	r7, [sp, #20]
 8002b50:	9404      	str	r4, [sp, #16]
 8002b52:	9403      	str	r4, [sp, #12]
 8002b54:	9602      	str	r6, [sp, #8]
 8002b56:	491d      	ldr	r1, [pc, #116]	; (8002bcc <menu_init+0x140>)
 8002b58:	f000 f8d6 	bl	8002d08 <node_init>
			&generator_change_param,
			NULL,
			NULL,
			&generator_init);

	node_init(&generator_change_param,
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <menu_init+0x144>)
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	4621      	mov	r1, r4
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <menu_init+0x148>)
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <menu_init+0x14c>)
 8002b68:	9705      	str	r7, [sp, #20]
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	9404      	str	r4, [sp, #16]
 8002b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b72:	9402      	str	r4, [sp, #8]
 8002b74:	f000 f8c8 	bl	8002d08 <node_init>
			&generator_select_order,
			NULL,
			&generator_init);

	// LCD Init
	lcdInit(&hi2c1, (uint8_t) find_slave(), (uint8_t) 2, (uint8_t) 16);
 8002b78:	f7ff ff74 	bl	8002a64 <find_slave>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	2202      	movs	r2, #2
 8002b80:	b2c1      	uxtb	r1, r0
 8002b82:	4816      	ldr	r0, [pc, #88]	; (8002bdc <menu_init+0x150>)
 8002b84:	f001 f86c 	bl	8003c60 <lcdInit>
	lcdDisplayClear();
 8002b88:	2101      	movs	r1, #1
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f000 ffdc 	bl	8003b48 <lcdCommand>

	node_execute(event_rendering);
 8002b90:	2005      	movs	r0, #5
}
 8002b92:	b007      	add	sp, #28
 8002b94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	node_execute(event_rendering);
 8002b98:	f000 b896 	b.w	8002cc8 <node_execute>
 8002b9c:	08002d47 	.word	0x08002d47
 8002ba0:	08002d27 	.word	0x08002d27
 8002ba4:	2000026c 	.word	0x2000026c
 8002ba8:	08002dcd 	.word	0x08002dcd
 8002bac:	20000290 	.word	0x20000290
 8002bb0:	08002de5 	.word	0x08002de5
 8002bb4:	08002dfd 	.word	0x08002dfd
 8002bb8:	08002e15 	.word	0x08002e15
 8002bbc:	08003355 	.word	0x08003355
 8002bc0:	08002fa5 	.word	0x08002fa5
 8002bc4:	200002b4 	.word	0x200002b4
 8002bc8:	08003475 	.word	0x08003475
 8002bcc:	08003395 	.word	0x08003395
 8002bd0:	0800325d 	.word	0x0800325d
 8002bd4:	080032e9 	.word	0x080032e9
 8002bd8:	080032ed 	.word	0x080032ed
 8002bdc:	20000380 	.word	0x20000380
 8002be0:	200002d8 	.word	0x200002d8
 8002be4:	200002fc 	.word	0x200002fc
 8002be8:	08002d37 	.word	0x08002d37
 8002bec:	20000344 	.word	0x20000344
 8002bf0:	08002d57 	.word	0x08002d57
 8002bf4:	20000320 	.word	0x20000320

08002bf8 <menu_execute>:

void menu_execute()
{
 8002bf8:	b508      	push	{r3, lr}
	event_t event = event_get();
 8002bfa:	f7ff fee3 	bl	80029c4 <event_get>
	node_execute(event);
 8002bfe:	f000 f863 	bl	8002cc8 <node_execute>
	event_set(event_z);
 8002c02:	2000      	movs	r0, #0
}
 8002c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	event_set(event_z);
 8002c08:	f7ff bee2 	b.w	80029d0 <event_set>

08002c0c <node_set_ptr>:
	return node_ptr;
}

void node_set_ptr(node_t* ptr)
{
	node_ptr = ptr;
 8002c0c:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <node_set_ptr+0x8>)
 8002c0e:	6018      	str	r0, [r3, #0]
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000368 	.word	0x20000368

08002c18 <node_has_child>:
}

bool node_has_child()
{
	return (node_ptr->child != NULL);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <node_has_child+0x10>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6958      	ldr	r0, [r3, #20]
}
 8002c1e:	3000      	adds	r0, #0
 8002c20:	bf18      	it	ne
 8002c22:	2001      	movne	r0, #1
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000368 	.word	0x20000368

08002c2c <node_has_parent>:

bool node_has_parent()
{
	return (node_ptr->parent != NULL);
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <node_has_parent+0x10>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6998      	ldr	r0, [r3, #24]
}
 8002c32:	3000      	adds	r0, #0
 8002c34:	bf18      	it	ne
 8002c36:	2001      	movne	r0, #1
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000368 	.word	0x20000368

08002c40 <node_has_next>:

bool node_has_next()
{
	return (node_ptr->next != NULL);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <node_has_next+0x10>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69d8      	ldr	r0, [r3, #28]
}
 8002c46:	3000      	adds	r0, #0
 8002c48:	bf18      	it	ne
 8002c4a:	2001      	movne	r0, #1
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000368 	.word	0x20000368

08002c54 <node_has_prev>:

bool node_has_prev()
{
	return (node_ptr->prev != NULL);
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <node_has_prev+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a18      	ldr	r0, [r3, #32]
}
 8002c5a:	3000      	adds	r0, #0
 8002c5c:	bf18      	it	ne
 8002c5e:	2001      	movne	r0, #1
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000368 	.word	0x20000368

08002c68 <node_get_child>:

void node_get_child()
{
	node_ptr = node_has_child(node_ptr) ? node_ptr->child : node_ptr;
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <node_get_child+0x14>)
 8002c6a:	6811      	ldr	r1, [r2, #0]
{
 8002c6c:	b508      	push	{r3, lr}
	node_ptr = node_has_child(node_ptr) ? node_ptr->child : node_ptr;
 8002c6e:	4608      	mov	r0, r1
 8002c70:	f7ff ffd2 	bl	8002c18 <node_has_child>
 8002c74:	b100      	cbz	r0, 8002c78 <node_get_child+0x10>
 8002c76:	6949      	ldr	r1, [r1, #20]
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	bd08      	pop	{r3, pc}
 8002c7c:	20000368 	.word	0x20000368

08002c80 <node_get_parent>:
}

void node_get_parent()
{
	node_ptr = node_has_parent(node_ptr) ? node_ptr->parent : node_ptr;
 8002c80:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <node_get_parent+0x14>)
 8002c82:	6811      	ldr	r1, [r2, #0]
{
 8002c84:	b508      	push	{r3, lr}
	node_ptr = node_has_parent(node_ptr) ? node_ptr->parent : node_ptr;
 8002c86:	4608      	mov	r0, r1
 8002c88:	f7ff ffd0 	bl	8002c2c <node_has_parent>
 8002c8c:	b100      	cbz	r0, 8002c90 <node_get_parent+0x10>
 8002c8e:	6989      	ldr	r1, [r1, #24]
 8002c90:	6011      	str	r1, [r2, #0]
 8002c92:	bd08      	pop	{r3, pc}
 8002c94:	20000368 	.word	0x20000368

08002c98 <node_get_next>:
}

void node_get_next()
{
	node_ptr = node_has_next(node_ptr) ? node_ptr->next : node_ptr;
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <node_get_next+0x14>)
 8002c9a:	6811      	ldr	r1, [r2, #0]
{
 8002c9c:	b508      	push	{r3, lr}
	node_ptr = node_has_next(node_ptr) ? node_ptr->next : node_ptr;
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	f7ff ffce 	bl	8002c40 <node_has_next>
 8002ca4:	b100      	cbz	r0, 8002ca8 <node_get_next+0x10>
 8002ca6:	69c9      	ldr	r1, [r1, #28]
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	bd08      	pop	{r3, pc}
 8002cac:	20000368 	.word	0x20000368

08002cb0 <node_get_prev>:
}

void node_get_prev()
{
	node_ptr = node_has_prev(node_ptr) ? node_ptr->prev : node_ptr;
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <node_get_prev+0x14>)
 8002cb2:	6811      	ldr	r1, [r2, #0]
{
 8002cb4:	b508      	push	{r3, lr}
	node_ptr = node_has_prev(node_ptr) ? node_ptr->prev : node_ptr;
 8002cb6:	4608      	mov	r0, r1
 8002cb8:	f7ff ffcc 	bl	8002c54 <node_has_prev>
 8002cbc:	b100      	cbz	r0, 8002cc0 <node_get_prev+0x10>
 8002cbe:	6a09      	ldr	r1, [r1, #32]
 8002cc0:	6011      	str	r1, [r2, #0]
 8002cc2:	bd08      	pop	{r3, pc}
 8002cc4:	20000368 	.word	0x20000368

08002cc8 <node_execute>:
}

void node_execute(event_t event)
{

	switch (event)
 8002cc8:	3801      	subs	r0, #1
 8002cca:	2804      	cmp	r0, #4
 8002ccc:	d819      	bhi.n	8002d02 <node_execute+0x3a>
 8002cce:	e8df f000 	tbb	[pc, r0]
 8002cd2:	0803      	.short	0x0803
 8002cd4:	100c      	.short	0x100c
 8002cd6:	14          	.byte	0x14
 8002cd7:	00          	.byte	0x00
	{
	case event_enc_rotation_left:
		if (node_ptr->enc_rot_left_cb != NULL)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <node_execute+0x3c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
			(node_ptr->enc_push_long_cb)();
		}
		break;

	case event_rendering:
		if (node_ptr->rendering_cb != NULL)
 8002cde:	b183      	cbz	r3, 8002d02 <node_execute+0x3a>
		{
			(node_ptr->rendering_cb)();
 8002ce0:	4718      	bx	r3
		if (node_ptr->enc_rot_right_cb != NULL)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <node_execute+0x3c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	e7f9      	b.n	8002cde <node_execute+0x16>
		if (node_ptr->enc_push_quick_cb != NULL)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <node_execute+0x3c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	e7f5      	b.n	8002cde <node_execute+0x16>
		if (node_ptr->enc_push_long_cb != NULL)
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <node_execute+0x3c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	e7f1      	b.n	8002cde <node_execute+0x16>
		if (node_ptr->rendering_cb != NULL)
 8002cfa:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <node_execute+0x3c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	e7ed      	b.n	8002cde <node_execute+0x16>
 8002d02:	4770      	bx	lr
 8002d04:	20000368 	.word	0x20000368

08002d08 <node_init>:
		node_t * prev, node_t * child, node_t * parent)
{

	node->rendering_cb = rendering_cb;
	node->enc_push_long_cb = enc_push_long_cb;
	node->enc_push_quick_cb = enc_push_quick_cb;
 8002d08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	node->enc_rot_right_cb = enc_rot_right_cb;
 8002d0c:	9b00      	ldr	r3, [sp, #0]
 8002d0e:	60c3      	str	r3, [r0, #12]
	node->enc_rot_left_cb = enc_rot_left_cb;
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	6103      	str	r3, [r0, #16]
	node->next = next;
 8002d14:	9b02      	ldr	r3, [sp, #8]
 8002d16:	61c3      	str	r3, [r0, #28]
	node->prev = prev;
 8002d18:	9b03      	ldr	r3, [sp, #12]
 8002d1a:	6203      	str	r3, [r0, #32]
	node->child = child;
 8002d1c:	9b04      	ldr	r3, [sp, #16]
 8002d1e:	6143      	str	r3, [r0, #20]
	node->parent = parent;
 8002d20:	9b05      	ldr	r3, [sp, #20]
 8002d22:	6183      	str	r3, [r0, #24]
 8002d24:	4770      	bx	lr

08002d26 <rendering_next>:
#include "event.h"
#include "node.h"
#include "stdbool.h"


void rendering_next(){
 8002d26:	b508      	push	{r3, lr}
	node_get_next();
 8002d28:	f7ff ffb6 	bl	8002c98 <node_get_next>
	node_execute(event_rendering);
 8002d2c:	2005      	movs	r0, #5
}
 8002d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	node_execute(event_rendering);
 8002d32:	f7ff bfc9 	b.w	8002cc8 <node_execute>

08002d36 <rendering_prev>:

void rendering_prev(){
 8002d36:	b508      	push	{r3, lr}
	node_get_prev();
 8002d38:	f7ff ffba 	bl	8002cb0 <node_get_prev>
	node_execute(event_rendering);
 8002d3c:	2005      	movs	r0, #5
}
 8002d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	node_execute(event_rendering);
 8002d42:	f7ff bfc1 	b.w	8002cc8 <node_execute>

08002d46 <rendering_child>:

void rendering_child(){
 8002d46:	b508      	push	{r3, lr}
	node_get_child();
 8002d48:	f7ff ff8e 	bl	8002c68 <node_get_child>
	node_execute(event_rendering);
 8002d4c:	2005      	movs	r0, #5
}
 8002d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	node_execute(event_rendering);
 8002d52:	f7ff bfb9 	b.w	8002cc8 <node_execute>

08002d56 <rendering_parent>:

void rendering_parent(){
 8002d56:	b508      	push	{r3, lr}
	node_get_parent();
 8002d58:	f7ff ff92 	bl	8002c80 <node_get_parent>
	node_execute(event_rendering);
 8002d5c:	2005      	movs	r0, #5
}
 8002d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	node_execute(event_rendering);
 8002d62:	f7ff bfb1 	b.w	8002cc8 <node_execute>
	...

08002d68 <show_title>:
#include "event.h"
#include "menu.h"
#include "string.h"


void show_title (char * title) {
 8002d68:	b530      	push	{r4, r5, lr}
 8002d6a:	b089      	sub	sp, #36	; 0x24
	char row0 [16];
	char row1 [16];

	sscanf(title, "%s %s", row0, row1);
 8002d6c:	ab04      	add	r3, sp, #16
 8002d6e:	466a      	mov	r2, sp
 8002d70:	4915      	ldr	r1, [pc, #84]	; (8002dc8 <show_title+0x60>)
 8002d72:	f001 f905 	bl	8003f80 <siscanf>
	uint8_t col0 = (16-strlen(row0))/2;
 8002d76:	4668      	mov	r0, sp
 8002d78:	f7fd fa4a 	bl	8000210 <strlen>
 8002d7c:	4605      	mov	r5, r0
	uint8_t col1 = (16-strlen(row1))/2;
 8002d7e:	a804      	add	r0, sp, #16
 8002d80:	f7fd fa46 	bl	8000210 <strlen>
 8002d84:	4604      	mov	r4, r0
	uint8_t col0 = (16-strlen(row0))/2;
 8002d86:	f1c5 0010 	rsb	r0, r5, #16

	lcdSetCursorPosition(col0,0);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8002d90:	f000 ffdc 	bl	8003d4c <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*) row0, strlen(row0));
 8002d94:	4668      	mov	r0, sp
 8002d96:	f7fd fa3b 	bl	8000210 <strlen>
 8002d9a:	b2c1      	uxtb	r1, r0
 8002d9c:	4668      	mov	r0, sp
 8002d9e:	f000 ffef 	bl	8003d80 <lcdPrintStr>

	if (strlen(row1) != 0) {
 8002da2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002da6:	b16b      	cbz	r3, 8002dc4 <show_title+0x5c>
	uint8_t col1 = (16-strlen(row1))/2;
 8002da8:	f1c4 0010 	rsb	r0, r4, #16
		lcdSetCursorPosition(col1, 1);
 8002dac:	2101      	movs	r1, #1
 8002dae:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8002db2:	f000 ffcb 	bl	8003d4c <lcdSetCursorPosition>
		lcdPrintStr((uint8_t*) row1, strlen(row1));
 8002db6:	a804      	add	r0, sp, #16
 8002db8:	f7fd fa2a 	bl	8000210 <strlen>
 8002dbc:	b2c1      	uxtb	r1, r0
 8002dbe:	a804      	add	r0, sp, #16
 8002dc0:	f000 ffde 	bl	8003d80 <lcdPrintStr>
	}

}
 8002dc4:	b009      	add	sp, #36	; 0x24
 8002dc6:	bd30      	pop	{r4, r5, pc}
 8002dc8:	080068fc 	.word	0x080068fc

08002dcc <vm_generator_cb>:

void vm_generator_cb (){
 8002dcc:	b508      	push	{r3, lr}
	lcdDisplayClear();
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f000 feb9 	bl	8003b48 <lcdCommand>
	show_title ("GENERATOR");
 8002dd6:	4802      	ldr	r0, [pc, #8]	; (8002de0 <vm_generator_cb+0x14>)

}
 8002dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	show_title ("GENERATOR");
 8002ddc:	f7ff bfc4 	b.w	8002d68 <show_title>
 8002de0:	08006930 	.word	0x08006930

08002de4 <vm_frequency_meter_cb>:

void vm_frequency_meter_cb (){
 8002de4:	b508      	push	{r3, lr}
	lcdDisplayClear();
 8002de6:	2101      	movs	r1, #1
 8002de8:	2002      	movs	r0, #2
 8002dea:	f000 fead 	bl	8003b48 <lcdCommand>
	show_title ("FREQUENCY METER");
 8002dee:	4802      	ldr	r0, [pc, #8]	; (8002df8 <vm_frequency_meter_cb+0x14>)
}
 8002df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	show_title ("FREQUENCY METER");
 8002df4:	f7ff bfb8 	b.w	8002d68 <show_title>
 8002df8:	08006920 	.word	0x08006920

08002dfc <vm_FSK_cb>:

void vm_FSK_cb (){
 8002dfc:	b508      	push	{r3, lr}
	lcdDisplayClear();
 8002dfe:	2101      	movs	r1, #1
 8002e00:	2002      	movs	r0, #2
 8002e02:	f000 fea1 	bl	8003b48 <lcdCommand>
	show_title ("FSK MODULATION");
 8002e06:	4802      	ldr	r0, [pc, #8]	; (8002e10 <vm_FSK_cb+0x14>)
}
 8002e08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	show_title ("FSK MODULATION");
 8002e0c:	f7ff bfac 	b.w	8002d68 <show_title>
 8002e10:	08006902 	.word	0x08006902

08002e14 <vm_PSK_cb>:

void vm_PSK_cb (){
 8002e14:	b508      	push	{r3, lr}
	lcdDisplayClear();
 8002e16:	2101      	movs	r1, #1
 8002e18:	2002      	movs	r0, #2
 8002e1a:	f000 fe95 	bl	8003b48 <lcdCommand>
	show_title ("PSK MODULATION");
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <vm_PSK_cb+0x14>)
}
 8002e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	show_title ("PSK MODULATION");
 8002e24:	f7ff bfa0 	b.w	8002d68 <show_title>
 8002e28:	08006911 	.word	0x08006911

08002e2c <prefix_get_symbol>:
parameter_t TEMP_FREQ;
parameter_t TEMP_AMPLITUDE;
AD9834_form_t TEMP_FORM;

char prefix_get_symbol(prefix_CI_unit_t prefix)
{
 8002e2c:	3003      	adds	r0, #3
 8002e2e:	b2c0      	uxtb	r0, r0
 8002e30:	2809      	cmp	r0, #9
 8002e32:	bf9a      	itte	ls
 8002e34:	4b01      	ldrls	r3, [pc, #4]	; (8002e3c <prefix_get_symbol+0x10>)
 8002e36:	5c18      	ldrbls	r0, [r3, r0]
	switch (prefix)
 8002e38:	2020      	movhi	r0, #32
		break;
	default:
		return CHAR_EMPTY;
		break;
	}
}
 8002e3a:	4770      	bx	lr
 8002e3c:	0800693a 	.word	0x0800693a

08002e40 <signal_form_get_symbol>:

char signal_form_get_symbol()
{
	switch (TEMP_FORM)
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <signal_form_get_symbol+0x14>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b123      	cbz	r3, 8002e50 <signal_form_get_symbol+0x10>
 8002e46:	2b01      	cmp	r3, #1
		break;
	case AD9834_TRIANGLE:
		return 'T';
		break;
	default:
		return 0;
 8002e48:	bf0c      	ite	eq
 8002e4a:	2054      	moveq	r0, #84	; 0x54
 8002e4c:	2000      	movne	r0, #0
 8002e4e:	4770      	bx	lr
		return 'S';
 8002e50:	2053      	movs	r0, #83	; 0x53
		break;
	}

}
 8002e52:	4770      	bx	lr
 8002e54:	20000374 	.word	0x20000374

08002e58 <parameter_show>:

uint8_t parameter_show(char* FORMAT, parameter_t param)
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b08f      	sub	sp, #60	; 0x3c
 8002e5c:	ab04      	add	r3, sp, #16
 8002e5e:	e883 0006 	stmia.w	r3, {r1, r2}
 8002e62:	f99d 7014 	ldrsb.w	r7, [sp, #20]
 8002e66:	4604      	mov	r4, r0
	char buffer[16];
	char value_buffer [11];
	char prefix_char = prefix_get_symbol(param.prefix);
 8002e68:	4638      	mov	r0, r7
 8002e6a:	f7ff ffdf 	bl	8002e2c <prefix_get_symbol>
 8002e6e:	4605      	mov	r5, r0
	float value = param.value;
	value /= pow(10, param.prefix);
 8002e70:	4638      	mov	r0, r7
 8002e72:	f7fd fb77 	bl	8000564 <__aeabi_i2d>
 8002e76:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8002ef8 <parameter_show+0xa0>
 8002e7a:	ec41 0b11 	vmov	d1, r0, r1
	float value = param.value;
 8002e7e:	9e04      	ldr	r6, [sp, #16]
	value /= pow(10, param.prefix);
 8002e80:	f002 fcbc 	bl	80057fc <pow>
 8002e84:	ec53 2b10 	vmov	r2, r3, d0
 8002e88:	4630      	mov	r0, r6
 8002e8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e8e:	f7fd fb7b 	bl	8000588 <__aeabi_f2d>
 8002e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e96:	f7fd fcf5 	bl	8000884 <__aeabi_ddiv>
 8002e9a:	f7fd fe79 	bl	8000b90 <__aeabi_d2f>
 8002e9e:	ee07 0a90 	vmov	s15, r0

	uint32_t whole = (uint32_t) value;
 8002ea2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
	float temp_fract = value - whole;
	uint32_t fract = (uint32_t) (temp_fract * 10);

	snprintf(value_buffer, sizeof(value_buffer), "%d.%d", (int) whole, (int) fract);
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <parameter_show+0xa8>)
	float temp_fract = value - whole;
 8002ea8:	eef8 6a47 	vcvt.f32.u32	s13, s14
	snprintf(value_buffer, sizeof(value_buffer), "%d.%d", (int) whole, (int) fract);
 8002eac:	ee17 3a10 	vmov	r3, s14
	float temp_fract = value - whole;
 8002eb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
	uint32_t fract = (uint32_t) (temp_fract * 10);
 8002eb4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002eb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	snprintf(value_buffer, sizeof(value_buffer), "%d.%d", (int) whole, (int) fract);
 8002ebc:	210b      	movs	r1, #11
	uint32_t fract = (uint32_t) (temp_fract * 10);
 8002ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	snprintf(value_buffer, sizeof(value_buffer), "%d.%d", (int) whole, (int) fract);
 8002ec2:	a807      	add	r0, sp, #28
 8002ec4:	edcd 7a00 	vstr	s15, [sp]
 8002ec8:	f001 f826 	bl	8003f18 <sniprintf>
	snprintf(buffer, sizeof(buffer), FORMAT, value_buffer, prefix_char);
 8002ecc:	ab07      	add	r3, sp, #28
 8002ece:	4622      	mov	r2, r4
 8002ed0:	2110      	movs	r1, #16
 8002ed2:	9500      	str	r5, [sp, #0]
 8002ed4:	a80a      	add	r0, sp, #40	; 0x28
 8002ed6:	f001 f81f 	bl	8003f18 <sniprintf>
	lcdPrintStr((uint8_t*) buffer, strlen(buffer));
 8002eda:	a80a      	add	r0, sp, #40	; 0x28
 8002edc:	f7fd f998 	bl	8000210 <strlen>
 8002ee0:	b2c1      	uxtb	r1, r0
 8002ee2:	a80a      	add	r0, sp, #40	; 0x28
 8002ee4:	f000 ff4c 	bl	8003d80 <lcdPrintStr>

	return strlen(value_buffer);
 8002ee8:	a807      	add	r0, sp, #28
 8002eea:	f7fd f991 	bl	8000210 <strlen>
}
 8002eee:	b2c0      	uxtb	r0, r0
 8002ef0:	b00f      	add	sp, #60	; 0x3c
 8002ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef4:	f3af 8000 	nop.w
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	40240000 	.word	0x40240000
 8002f00:	08006944 	.word	0x08006944

08002f04 <cursor_hide>:

void cursor_hide()
{
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t col_correction = 0;
	for (option_t i = 0; i < 5; i++)
	{
		switch (i) {
				case opt_amplitude_val:
					col_correction = voc_order_low - amplitude_val_length;
 8002f06:	4e10      	ldr	r6, [pc, #64]	; (8002f48 <cursor_hide+0x44>)
					break;
				case opt_frequency_val:
					col_correction = voc_order_low - frequency_val_length;
 8002f08:	4f10      	ldr	r7, [pc, #64]	; (8002f4c <cursor_hide+0x48>)
					break;
				default:
					col_correction = 0;
					break;
			}
		lcdSetCursorPosition((col_correction + generator_select_option[i][1]), generator_select_option[i][0]);
 8002f0a:	4d11      	ldr	r5, [pc, #68]	; (8002f50 <cursor_hide+0x4c>)
{
 8002f0c:	2400      	movs	r4, #0
		switch (i) {
 8002f0e:	b2e3      	uxtb	r3, r4
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d003      	beq.n	8002f1c <cursor_hide+0x18>
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d015      	beq.n	8002f44 <cursor_hide+0x40>
					col_correction = 0;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e003      	b.n	8002f24 <cursor_hide+0x20>
					col_correction = voc_order_low - amplitude_val_length;
 8002f1c:	7830      	ldrb	r0, [r6, #0]
					col_correction = voc_order_low - frequency_val_length;
 8002f1e:	f1c0 000a 	rsb	r0, r0, #10
 8002f22:	b2c0      	uxtb	r0, r0
		lcdSetCursorPosition((col_correction + generator_select_option[i][1]), generator_select_option[i][0]);
 8002f24:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8002f28:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	4418      	add	r0, r3
 8002f30:	b2c0      	uxtb	r0, r0
 8002f32:	f000 ff0b 	bl	8003d4c <lcdSetCursorPosition>
 8002f36:	3401      	adds	r4, #1
		lcdPrintChar(CHAR_EMPTY);
 8002f38:	2020      	movs	r0, #32
 8002f3a:	f000 ff30 	bl	8003d9e <lcdPrintChar>
	for (option_t i = 0; i < 5; i++)
 8002f3e:	2c05      	cmp	r4, #5
 8002f40:	d1e5      	bne.n	8002f0e <cursor_hide+0xa>
	}
}
 8002f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					col_correction = voc_order_low - frequency_val_length;
 8002f44:	7838      	ldrb	r0, [r7, #0]
 8002f46:	e7ea      	b.n	8002f1e <cursor_hide+0x1a>
 8002f48:	20000218 	.word	0x20000218
 8002f4c:	2000021b 	.word	0x2000021b
 8002f50:	2000000d 	.word	0x2000000d

08002f54 <cursor_show>:

void cursor_show()
{
 8002f54:	b508      	push	{r3, lr}
	uint8_t col_correction = 0;
	switch (option_current) {
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <cursor_show+0x40>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d003      	beq.n	8002f66 <cursor_show+0x12>
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d015      	beq.n	8002f8e <cursor_show+0x3a>
	uint8_t col_correction = 0;
 8002f62:	2000      	movs	r0, #0
 8002f64:	e004      	b.n	8002f70 <cursor_show+0x1c>
		case opt_amplitude_val:
			col_correction = voc_order_low - amplitude_val_length;
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <cursor_show+0x44>)
			break;
		case opt_frequency_val:
			col_correction = voc_order_low - frequency_val_length;
 8002f68:	7810      	ldrb	r0, [r2, #0]
 8002f6a:	f1c0 000a 	rsb	r0, r0, #10
 8002f6e:	b2c0      	uxtb	r0, r0
			break;
		default:

			break;
	}
	lcdSetCursorPosition((col_correction + generator_select_option[option_current][1]), generator_select_option[option_current][0]);
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <cursor_show+0x48>)
 8002f72:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8002f76:	7849      	ldrb	r1, [r1, #1]
 8002f78:	4408      	add	r0, r1
 8002f7a:	b2c0      	uxtb	r0, r0
 8002f7c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8002f80:	f000 fee4 	bl	8003d4c <lcdSetCursorPosition>
		lcdPrintChar(CHAR_POINTER);
 8002f84:	203e      	movs	r0, #62	; 0x3e
}
 8002f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		lcdPrintChar(CHAR_POINTER);
 8002f8a:	f000 bf08 	b.w	8003d9e <lcdPrintChar>
			col_correction = voc_order_low - frequency_val_length;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <cursor_show+0x4c>)
 8002f90:	e7ea      	b.n	8002f68 <cursor_show+0x14>
 8002f92:	bf00      	nop
 8002f94:	2000021c 	.word	0x2000021c
 8002f98:	20000218 	.word	0x20000218
 8002f9c:	2000000d 	.word	0x2000000d
 8002fa0:	2000021b 	.word	0x2000021b

08002fa4 <vtg_init>:

void vtg_init()
{
 8002fa4:	b538      	push	{r3, r4, r5, lr}
	lcdDisplayClear();
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	2002      	movs	r0, #2
 8002faa:	f000 fdcd 	bl	8003b48 <lcdCommand>
	lcdCursorOff();
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2003      	movs	r0, #3
 8002fb2:	f000 fdc9 	bl	8003b48 <lcdCommand>

	TEMP_FORM = AD9834_form_get();
 8002fb6:	f7fe f835 	bl	8001024 <AD9834_form_get>
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <vtg_init+0x84>)
	TEMP_AMPLITUDE.value = AD9834_amplitude_get();
 8002fbc:	4d1b      	ldr	r5, [pc, #108]	; (800302c <vtg_init+0x88>)
	TEMP_FORM = AD9834_form_get();
 8002fbe:	7018      	strb	r0, [r3, #0]
	TEMP_AMPLITUDE.value = AD9834_amplitude_get();
 8002fc0:	f7fe f820 	bl	8001004 <AD9834_amplitude_get>
 8002fc4:	ed85 0a00 	vstr	s0, [r5]
	TEMP_AMPLITUDE.prefix = AD9834_amplitude_prefix_get();
 8002fc8:	f7fe f80c 	bl	8000fe4 <AD9834_amplitude_prefix_get>
 8002fcc:	7128      	strb	r0, [r5, #4]
	TEMP_FREQ.value = AD9834_frequency_get(AD9834_REG0);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe f81e 	bl	8001010 <AD9834_frequency_get>
 8002fd4:	4c16      	ldr	r4, [pc, #88]	; (8003030 <vtg_init+0x8c>)
	TEMP_FREQ.prefix = AD9834_frequency_prefix_get(AD9834_REG0);
 8002fd6:	2000      	movs	r0, #0
	TEMP_FREQ.value = AD9834_frequency_get(AD9834_REG0);
 8002fd8:	ed84 0a00 	vstr	s0, [r4]
	TEMP_FREQ.prefix = AD9834_frequency_prefix_get(AD9834_REG0);
 8002fdc:	f7fe f808 	bl	8000ff0 <AD9834_frequency_prefix_get>

	lcdSetCursorPosition(1, 0);
 8002fe0:	2100      	movs	r1, #0
	TEMP_FREQ.prefix = AD9834_frequency_prefix_get(AD9834_REG0);
 8002fe2:	7120      	strb	r0, [r4, #4]
	lcdSetCursorPosition(1, 0);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f000 feb1 	bl	8003d4c <lcdSetCursorPosition>
	lcdPrintChar((uint8_t) signal_form_get_symbol());
 8002fea:	f7ff ff29 	bl	8002e40 <signal_form_get_symbol>
 8002fee:	f000 fed6 	bl	8003d9e <lcdPrintChar>

	lcdSetCursorPosition(5, 0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2005      	movs	r0, #5
 8002ff6:	f000 fea9 	bl	8003d4c <lcdSetCursorPosition>
	amplitude_val_length = parameter_show("%6s%3cV", TEMP_AMPLITUDE);
 8002ffa:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <vtg_init+0x90>)
 8003000:	f7ff ff2a 	bl	8002e58 <parameter_show>
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <vtg_init+0x94>)

	lcdSetCursorPosition(1, 1);
 8003006:	2101      	movs	r1, #1
	amplitude_val_length = parameter_show("%6s%3cV", TEMP_AMPLITUDE);
 8003008:	7018      	strb	r0, [r3, #0]
	lcdSetCursorPosition(1, 1);
 800300a:	4608      	mov	r0, r1
 800300c:	f000 fe9e 	bl	8003d4c <lcdSetCursorPosition>
	frequency_val_length = parameter_show("%10s%3cHz", TEMP_FREQ);
 8003010:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <vtg_init+0x98>)
 8003016:	f7ff ff1f 	bl	8002e58 <parameter_show>
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <vtg_init+0x9c>)
 800301c:	7018      	strb	r0, [r3, #0]

	cursor_show();
}
 800301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	cursor_show();
 8003022:	f7ff bf97 	b.w	8002f54 <cursor_show>
 8003026:	bf00      	nop
 8003028:	20000374 	.word	0x20000374
 800302c:	2000036c 	.word	0x2000036c
 8003030:	20000378 	.word	0x20000378
 8003034:	0800694a 	.word	0x0800694a
 8003038:	20000218 	.word	0x20000218
 800303c:	08006952 	.word	0x08006952
 8003040:	2000021b 	.word	0x2000021b

08003044 <form_changing>:

void form_changing()
{
 8003044:	b508      	push	{r3, lr}
	event_t event = event_get();
 8003046:	f7ff fcbd 	bl	80029c4 <event_get>
	if ((event == event_enc_rotation_left) || (event == event_enc_rotation_right))
 800304a:	3801      	subs	r0, #1
 800304c:	b2c0      	uxtb	r0, r0
 800304e:	2801      	cmp	r0, #1
 8003050:	d807      	bhi.n	8003062 <form_changing+0x1e>
	{
		TEMP_FORM = (TEMP_FORM++ == 1) ? 0 : TEMP_FORM;
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <form_changing+0x34>)
 8003054:	7813      	ldrb	r3, [r2, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	bf1a      	itte	ne
 800305a:	3301      	addne	r3, #1
 800305c:	b2db      	uxtbne	r3, r3
 800305e:	2300      	moveq	r3, #0
 8003060:	7013      	strb	r3, [r2, #0]
	}
	lcdSetCursorPosition(1, 0);
 8003062:	2100      	movs	r1, #0
 8003064:	2001      	movs	r0, #1
 8003066:	f000 fe71 	bl	8003d4c <lcdSetCursorPosition>
	lcdPrintChar((uint8_t) signal_form_get_symbol());
 800306a:	f7ff fee9 	bl	8002e40 <signal_form_get_symbol>
}
 800306e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcdPrintChar((uint8_t) signal_form_get_symbol());
 8003072:	f000 be94 	b.w	8003d9e <lcdPrintChar>
 8003076:	bf00      	nop
 8003078:	20000374 	.word	0x20000374

0800307c <frequency_prefix_changing>:

void frequency_prefix_changing()
{
 800307c:	b510      	push	{r4, lr}
	event_t event = event_get();
 800307e:	f7ff fca1 	bl	80029c4 <event_get>
	if (event == event_enc_rotation_left)
 8003082:	2801      	cmp	r0, #1
 8003084:	4c11      	ldr	r4, [pc, #68]	; (80030cc <frequency_prefix_changing+0x50>)
 8003086:	d117      	bne.n	80030b8 <frequency_prefix_changing+0x3c>
	{
		current_frequency_prefix = (current_frequency_prefix--) == 0 ? sizeof(frequency_prefix)-1 : current_frequency_prefix;
 8003088:	7823      	ldrb	r3, [r4, #0]
 800308a:	b113      	cbz	r3, 8003092 <frequency_prefix_changing+0x16>
 800308c:	3b01      	subs	r3, #1
	} else if (event == event_enc_rotation_right)
	{
		current_frequency_prefix = (current_frequency_prefix++) == (sizeof(frequency_prefix)-1) ? 0 : current_frequency_prefix;
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e000      	b.n	8003094 <frequency_prefix_changing+0x18>
		current_frequency_prefix = (current_frequency_prefix--) == 0 ? sizeof(frequency_prefix)-1 : current_frequency_prefix;
 8003092:	2302      	movs	r3, #2
		current_frequency_prefix = (current_frequency_prefix++) == (sizeof(frequency_prefix)-1) ? 0 : current_frequency_prefix;
 8003094:	7023      	strb	r3, [r4, #0]
	}

	lcdSetCursorPosition(1, 1);
 8003096:	2101      	movs	r1, #1
 8003098:	4608      	mov	r0, r1
 800309a:	f000 fe57 	bl	8003d4c <lcdSetCursorPosition>
	TEMP_FREQ.prefix = frequency_prefix[current_frequency_prefix];
 800309e:	7822      	ldrb	r2, [r4, #0]
 80030a0:	490b      	ldr	r1, [pc, #44]	; (80030d0 <frequency_prefix_changing+0x54>)
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <frequency_prefix_changing+0x58>)
 80030a4:	5c8a      	ldrb	r2, [r1, r2]
 80030a6:	711a      	strb	r2, [r3, #4]
	frequency_val_length = parameter_show("%10s%3cHz", TEMP_FREQ);
 80030a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80030ac:	480a      	ldr	r0, [pc, #40]	; (80030d8 <frequency_prefix_changing+0x5c>)
 80030ae:	f7ff fed3 	bl	8002e58 <parameter_show>
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <frequency_prefix_changing+0x60>)
 80030b4:	7018      	strb	r0, [r3, #0]
 80030b6:	bd10      	pop	{r4, pc}
	} else if (event == event_enc_rotation_right)
 80030b8:	2802      	cmp	r0, #2
 80030ba:	d1ec      	bne.n	8003096 <frequency_prefix_changing+0x1a>
		current_frequency_prefix = (current_frequency_prefix++) == (sizeof(frequency_prefix)-1) ? 0 : current_frequency_prefix;
 80030bc:	7823      	ldrb	r3, [r4, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d001      	beq.n	80030c6 <frequency_prefix_changing+0x4a>
 80030c2:	3301      	adds	r3, #1
 80030c4:	e7e3      	b.n	800308e <frequency_prefix_changing+0x12>
 80030c6:	2300      	movs	r3, #0
 80030c8:	e7e4      	b.n	8003094 <frequency_prefix_changing+0x18>
 80030ca:	bf00      	nop
 80030cc:	2000021a 	.word	0x2000021a
 80030d0:	2000000a 	.word	0x2000000a
 80030d4:	20000378 	.word	0x20000378
 80030d8:	08006952 	.word	0x08006952
 80030dc:	2000021b 	.word	0x2000021b

080030e0 <amplitude_prefix_changing>:
}

void amplitude_prefix_changing()
{
 80030e0:	b510      	push	{r4, lr}
	event_t event = event_get();
 80030e2:	f7ff fc6f 	bl	80029c4 <event_get>
	if ((event == event_enc_rotation_left) || (event == event_enc_rotation_right))
 80030e6:	3801      	subs	r0, #1
 80030e8:	b2c0      	uxtb	r0, r0
 80030ea:	2801      	cmp	r0, #1
 80030ec:	4c0c      	ldr	r4, [pc, #48]	; (8003120 <amplitude_prefix_changing+0x40>)
 80030ee:	d80a      	bhi.n	8003106 <amplitude_prefix_changing+0x26>
	{
		current_amplitude_prefix = (current_amplitude_prefix++ == (sizeof(amplitude_prefix) - 1)) ?
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <amplitude_prefix_changing+0x44>)
 80030f2:	7813      	ldrb	r3, [r2, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf1a      	itte	ne
 80030f8:	3301      	addne	r3, #1
 80030fa:	b2db      	uxtbne	r3, r3
 80030fc:	2300      	moveq	r3, #0
 80030fe:	7013      	strb	r3, [r2, #0]
						0 : current_amplitude_prefix;
		TEMP_AMPLITUDE.prefix = amplitude_prefix[current_amplitude_prefix];
 8003100:	4a09      	ldr	r2, [pc, #36]	; (8003128 <amplitude_prefix_changing+0x48>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	7123      	strb	r3, [r4, #4]
	}

	lcdSetCursorPosition(5, 0);
 8003106:	2100      	movs	r1, #0
 8003108:	2005      	movs	r0, #5
 800310a:	f000 fe1f 	bl	8003d4c <lcdSetCursorPosition>
	amplitude_val_length = parameter_show("%6s%3cV", TEMP_AMPLITUDE);
 800310e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003112:	4806      	ldr	r0, [pc, #24]	; (800312c <amplitude_prefix_changing+0x4c>)
 8003114:	f7ff fea0 	bl	8002e58 <parameter_show>
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <amplitude_prefix_changing+0x50>)
 800311a:	7018      	strb	r0, [r3, #0]
 800311c:	bd10      	pop	{r4, pc}
 800311e:	bf00      	nop
 8003120:	2000036c 	.word	0x2000036c
 8003124:	20000219 	.word	0x20000219
 8003128:	20000008 	.word	0x20000008
 800312c:	0800694a 	.word	0x0800694a
 8003130:	20000218 	.word	0x20000218
 8003134:	00000000 	.word	0x00000000

08003138 <val_changing>:
}

void val_changing (AD9834_parameter_t param, parameter_t * TEMP)
{
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313a:	ed2d 8b02 	vpush	{d8}
 800313e:	4604      	mov	r4, r0
 8003140:	b083      	sub	sp, #12
 8003142:	460d      	mov	r5, r1
	uint32_t limit_max = 0, limit_min = 0;
	float step = 0;
	event_t event = event_get();
 8003144:	f7ff fc3e 	bl	80029c4 <event_get>

	switch (param)
 8003148:	b15c      	cbz	r4, 8003162 <val_changing+0x2a>
	uint32_t limit_max = 0, limit_min = 0;
 800314a:	2c02      	cmp	r4, #2
 800314c:	bf0c      	ite	eq
 800314e:	2403      	moveq	r4, #3
 8003150:	2400      	movne	r4, #0
		break;
	default:
		break;
	}

	switch (event)
 8003152:	2801      	cmp	r0, #1
 8003154:	d007      	beq.n	8003166 <val_changing+0x2e>
 8003156:	2802      	cmp	r0, #2
 8003158:	d03e      	beq.n	80031d8 <val_changing+0xa0>
		break;
	default:
		break;
	}

}
 800315a:	b003      	add	sp, #12
 800315c:	ecbd 8b02 	vpop	{d8}
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		limit_max = AD9834_FREQUENCY_MAX;
 8003162:	4c3b      	ldr	r4, [pc, #236]	; (8003250 <val_changing+0x118>)
 8003164:	e7f5      	b.n	8003152 <val_changing+0x1a>
		step = (float) pow(10, value_order) * (float) pow(10, TEMP->prefix);
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <val_changing+0x11c>)
 8003168:	f993 0000 	ldrsb.w	r0, [r3]
 800316c:	f7fd f9fa 	bl	8000564 <__aeabi_i2d>
 8003170:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8003248 <val_changing+0x110>
 8003174:	ec41 0b11 	vmov	d1, r0, r1
 8003178:	f002 fb40 	bl	80057fc <pow>
 800317c:	f995 0004 	ldrsb.w	r0, [r5, #4]
 8003180:	ec57 6b10 	vmov	r6, r7, d0
 8003184:	f7fd f9ee 	bl	8000564 <__aeabi_i2d>
 8003188:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8003248 <val_changing+0x110>
 800318c:	ec41 0b11 	vmov	d1, r0, r1
 8003190:	f002 fb34 	bl	80057fc <pow>
 8003194:	4639      	mov	r1, r7
 8003196:	4630      	mov	r0, r6
 8003198:	ed8d 0b00 	vstr	d0, [sp]
 800319c:	f7fd fcf8 	bl	8000b90 <__aeabi_d2f>
 80031a0:	ed9d 0b00 	vldr	d0, [sp]
 80031a4:	ee08 0a10 	vmov	s16, r0
 80031a8:	ec51 0b10 	vmov	r0, r1, d0
 80031ac:	f7fd fcf0 	bl	8000b90 <__aeabi_d2f>
		TEMP->value += step;
 80031b0:	ed95 7a00 	vldr	s14, [r5]
 80031b4:	ee07 0a90 	vmov	s15, r0
 80031b8:	eea8 7a27 	vfma.f32	s14, s16, s15
		TEMP->value = (TEMP->value > limit_max) ? limit_max : TEMP->value;
 80031bc:	ee07 4a90 	vmov	s15, r4
 80031c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	bfd8      	it	le
 80031ce:	eef0 7a47 	vmovle.f32	s15, s14
		TEMP->value = (TEMP->value < limit_min) ? limit_min : TEMP->value;
 80031d2:	edc5 7a00 	vstr	s15, [r5]
}
 80031d6:	e7c0      	b.n	800315a <val_changing+0x22>
		step = (float) pow(10, value_order) * (float) pow(10, TEMP->prefix);
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <val_changing+0x11c>)
 80031da:	f993 0000 	ldrsb.w	r0, [r3]
 80031de:	f7fd f9c1 	bl	8000564 <__aeabi_i2d>
 80031e2:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8003248 <val_changing+0x110>
 80031e6:	ec41 0b11 	vmov	d1, r0, r1
 80031ea:	f002 fb07 	bl	80057fc <pow>
 80031ee:	f995 0004 	ldrsb.w	r0, [r5, #4]
 80031f2:	ec57 6b10 	vmov	r6, r7, d0
 80031f6:	f7fd f9b5 	bl	8000564 <__aeabi_i2d>
 80031fa:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8003248 <val_changing+0x110>
 80031fe:	ec41 0b11 	vmov	d1, r0, r1
 8003202:	f002 fafb 	bl	80057fc <pow>
 8003206:	4639      	mov	r1, r7
 8003208:	4630      	mov	r0, r6
 800320a:	ed8d 0b00 	vstr	d0, [sp]
 800320e:	f7fd fcbf 	bl	8000b90 <__aeabi_d2f>
 8003212:	ed9d 0b00 	vldr	d0, [sp]
		TEMP->value -= step;
 8003216:	ee07 0a90 	vmov	s15, r0
		step = (float) pow(10, value_order) * (float) pow(10, TEMP->prefix);
 800321a:	ec51 0b10 	vmov	r0, r1, d0
		TEMP->value -= step;
 800321e:	eeb1 8a67 	vneg.f32	s16, s15
		step = (float) pow(10, value_order) * (float) pow(10, TEMP->prefix);
 8003222:	f7fd fcb5 	bl	8000b90 <__aeabi_d2f>
		TEMP->value -= step;
 8003226:	edd5 7a00 	vldr	s15, [r5]
 800322a:	ee07 0a10 	vmov	s14, r0
 800322e:	eee8 7a07 	vfma.f32	s15, s16, s14
		TEMP->value = (TEMP->value < limit_min) ? limit_min : TEMP->value;
 8003232:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003258 <val_changing+0x120>
 8003236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	bf48      	it	mi
 8003240:	eef0 7a47 	vmovmi.f32	s15, s14
 8003244:	e7c5      	b.n	80031d2 <val_changing+0x9a>
 8003246:	bf00      	nop
 8003248:	00000000 	.word	0x00000000
 800324c:	40240000 	.word	0x40240000
 8003250:	023c3460 	.word	0x023c3460
 8003254:	20000017 	.word	0x20000017
 8003258:	00000000 	.word	0x00000000

0800325c <vtg_parameter_change>:

void vtg_parameter_change()
{
	switch (option_current)
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <vtg_parameter_change+0x70>)
 800325e:	781b      	ldrb	r3, [r3, #0]
{
 8003260:	b510      	push	{r4, lr}
	switch (option_current)
 8003262:	2b04      	cmp	r3, #4
 8003264:	d831      	bhi.n	80032ca <vtg_parameter_change+0x6e>
 8003266:	e8df f003 	tbb	[pc, r3]
 800326a:	0703      	.short	0x0703
 800326c:	1c18      	.short	0x1c18
 800326e:	2c          	.byte	0x2c
 800326f:	00          	.byte	0x00
	default:
	{
		break;
	}
	}
}
 8003270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		form_changing();
 8003274:	f7ff bee6 	b.w	8003044 <form_changing>
		val_changing(AD9834_AMPLITUDE,&TEMP_AMPLITUDE);
 8003278:	4c15      	ldr	r4, [pc, #84]	; (80032d0 <vtg_parameter_change+0x74>)
 800327a:	2002      	movs	r0, #2
 800327c:	4621      	mov	r1, r4
 800327e:	f7ff ff5b 	bl	8003138 <val_changing>
		lcdSetCursorPosition(5, 0);
 8003282:	2100      	movs	r1, #0
 8003284:	2005      	movs	r0, #5
 8003286:	f000 fd61 	bl	8003d4c <lcdSetCursorPosition>
		amplitude_val_length = parameter_show("%6s%3cV", TEMP_AMPLITUDE);
 800328a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800328e:	4811      	ldr	r0, [pc, #68]	; (80032d4 <vtg_parameter_change+0x78>)
 8003290:	f7ff fde2 	bl	8002e58 <parameter_show>
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <vtg_parameter_change+0x7c>)
		frequency_val_length = parameter_show("%10s%3cHz", TEMP_FREQ);
 8003296:	7018      	strb	r0, [r3, #0]
		break;
 8003298:	bd10      	pop	{r4, pc}
}
 800329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		amplitude_prefix_changing();
 800329e:	f7ff bf1f 	b.w	80030e0 <amplitude_prefix_changing>
		val_changing(AD9834_FREQUENCY, &TEMP_FREQ);
 80032a2:	4c0e      	ldr	r4, [pc, #56]	; (80032dc <vtg_parameter_change+0x80>)
 80032a4:	2000      	movs	r0, #0
 80032a6:	4621      	mov	r1, r4
 80032a8:	f7ff ff46 	bl	8003138 <val_changing>
		lcdSetCursorPosition(1, 1);
 80032ac:	2101      	movs	r1, #1
 80032ae:	4608      	mov	r0, r1
 80032b0:	f000 fd4c 	bl	8003d4c <lcdSetCursorPosition>
		frequency_val_length = parameter_show("%10s%3cHz", TEMP_FREQ);
 80032b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <vtg_parameter_change+0x84>)
 80032ba:	f7ff fdcd 	bl	8002e58 <parameter_show>
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <vtg_parameter_change+0x88>)
 80032c0:	e7e9      	b.n	8003296 <vtg_parameter_change+0x3a>
}
 80032c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		frequency_prefix_changing();
 80032c6:	f7ff bed9 	b.w	800307c <frequency_prefix_changing>
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	2000021c 	.word	0x2000021c
 80032d0:	2000036c 	.word	0x2000036c
 80032d4:	0800694a 	.word	0x0800694a
 80032d8:	20000218 	.word	0x20000218
 80032dc:	20000378 	.word	0x20000378
 80032e0:	08006952 	.word	0x08006952
 80032e4:	2000021b 	.word	0x2000021b

080032e8 <vtg_parameter_cancel>:

void vtg_parameter_cancel()
{
	rendering_parent();
 80032e8:	f7ff bd35 	b.w	8002d56 <rendering_parent>

080032ec <vtg_parameter_apply>:
}

void vtg_parameter_apply()
{
 80032ec:	b508      	push	{r3, lr}
	switch (option_current)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <vtg_parameter_apply+0x58>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d808      	bhi.n	8003308 <vtg_parameter_apply+0x1c>
 80032f6:	e8df f003 	tbb	[pc, r3]
 80032fa:	0b03      	.short	0x0b03
 80032fc:	1711      	.short	0x1711
 80032fe:	1e          	.byte	0x1e
 80032ff:	00          	.byte	0x00
	{
	case opt_form:
		AD9834_form_set(TEMP_FORM);
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <vtg_parameter_apply+0x5c>)
 8003302:	7818      	ldrb	r0, [r3, #0]
 8003304:	f7fd fe68 	bl	8000fd8 <AD9834_form_set>
		break;
	default:
		break;
	}
	rendering_parent();
}
 8003308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rendering_parent();
 800330c:	f7ff bd23 	b.w	8002d56 <rendering_parent>
		AD9834_amplitude_set(TEMP_AMPLITUDE.value);
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <vtg_parameter_apply+0x60>)
 8003312:	ed93 0a00 	vldr	s0, [r3]
 8003316:	f7fd fe37 	bl	8000f88 <AD9834_amplitude_set>
		break;
 800331a:	e7f5      	b.n	8003308 <vtg_parameter_apply+0x1c>
		AD9834_amplitude_prefix_set(TEMP_AMPLITUDE.prefix);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <vtg_parameter_apply+0x60>)
 800331e:	f993 0004 	ldrsb.w	r0, [r3, #4]
 8003322:	f7fd fe2b 	bl	8000f7c <AD9834_amplitude_prefix_set>
		break;
 8003326:	e7ef      	b.n	8003308 <vtg_parameter_apply+0x1c>
		AD9834_frequency_set(AD9834_REG0, TEMP_FREQ.value);
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <vtg_parameter_apply+0x64>)
 800332a:	2000      	movs	r0, #0
 800332c:	ed93 0a00 	vldr	s0, [r3]
 8003330:	f7fd fe30 	bl	8000f94 <AD9834_frequency_set>
		break;
 8003334:	e7e8      	b.n	8003308 <vtg_parameter_apply+0x1c>
		AD9834_frequency_prefix_set(AD9834_REG0, TEMP_FREQ.prefix);
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <vtg_parameter_apply+0x64>)
 8003338:	2000      	movs	r0, #0
 800333a:	f993 1004 	ldrsb.w	r1, [r3, #4]
 800333e:	f7fd fe15 	bl	8000f6c <AD9834_frequency_prefix_set>
		break;
 8003342:	e7e1      	b.n	8003308 <vtg_parameter_apply+0x1c>
 8003344:	2000021c 	.word	0x2000021c
 8003348:	20000374 	.word	0x20000374
 800334c:	2000036c 	.word	0x2000036c
 8003350:	20000378 	.word	0x20000378

08003354 <vtg_select_param>:

void vtg_select_param()
{
 8003354:	b508      	push	{r3, lr}
	cursor_hide();
 8003356:	f7ff fdd5 	bl	8002f04 <cursor_hide>
	switch (event_get())
 800335a:	f7ff fb33 	bl	80029c4 <event_get>
 800335e:	2801      	cmp	r0, #1
 8003360:	d00d      	beq.n	800337e <vtg_select_param+0x2a>
 8003362:	2802      	cmp	r0, #2
 8003364:	d107      	bne.n	8003376 <vtg_select_param+0x22>
	{
	case event_enc_rotation_right:
		option_current = ((option_current++) == 4 ? 0 : option_current);
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <vtg_select_param+0x3c>)
 8003368:	7811      	ldrb	r1, [r2, #0]
 800336a:	1c4b      	adds	r3, r1, #1
 800336c:	2904      	cmp	r1, #4
 800336e:	b2db      	uxtb	r3, r3
 8003370:	bf08      	it	eq
 8003372:	2300      	moveq	r3, #0
		break;
	case event_enc_rotation_left:
		option_current = ((option_current--) == 0 ? 4 : option_current);
 8003374:	7013      	strb	r3, [r2, #0]
	default:
		break;
	}

	cursor_show();
}
 8003376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cursor_show();
 800337a:	f7ff bdeb 	b.w	8002f54 <cursor_show>
		option_current = ((option_current--) == 0 ? 4 : option_current);
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <vtg_select_param+0x3c>)
 8003380:	7813      	ldrb	r3, [r2, #0]
 8003382:	b113      	cbz	r3, 800338a <vtg_select_param+0x36>
 8003384:	3b01      	subs	r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	e7f4      	b.n	8003374 <vtg_select_param+0x20>
 800338a:	2304      	movs	r3, #4
 800338c:	e7f2      	b.n	8003374 <vtg_select_param+0x20>
 800338e:	bf00      	nop
 8003390:	2000021c 	.word	0x2000021c

08003394 <vtg_select_order>:

void vtg_select_order()
{
 8003394:	b508      	push	{r3, lr}
	cursor_hide();
 8003396:	f7ff fdb5 	bl	8002f04 <cursor_hide>

	if ((option_current == opt_form) || (option_current == opt_amplitude_pref) || (option_current == opt_frequency_pref))
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <vtg_select_order+0x4c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80033a2:	d001      	beq.n	80033a8 <vtg_select_order+0x14>
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d103      	bne.n	80033b0 <vtg_select_order+0x1c>
	}
	value_order_column = voc_order_low;
	value_order = -1;		// setting order to 10^-1
	lcdSetCursorPosition(value_order_column, value_order_row);
	lcdCursorOn();
}
 80033a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rendering_next();
 80033ac:	f7ff bcbb 	b.w	8002d26 <rendering_next>
	} else if (option_current == opt_amplitude_val)
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <vtg_select_order+0x50>)
 80033b4:	d110      	bne.n	80033d8 <vtg_select_order+0x44>
		value_order_row = vor_amplitude;
 80033b6:	2300      	movs	r3, #0
		value_order_row = var_frequency;
 80033b8:	7013      	strb	r3, [r2, #0]
	value_order_column = voc_order_low;
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <vtg_select_order+0x54>)
 80033bc:	200a      	movs	r0, #10
 80033be:	7018      	strb	r0, [r3, #0]
	value_order = -1;		// setting order to 10^-1
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <vtg_select_order+0x58>)
 80033c2:	21ff      	movs	r1, #255	; 0xff
 80033c4:	7019      	strb	r1, [r3, #0]
	lcdSetCursorPosition(value_order_column, value_order_row);
 80033c6:	7811      	ldrb	r1, [r2, #0]
 80033c8:	f000 fcc0 	bl	8003d4c <lcdSetCursorPosition>
	lcdCursorOn();
 80033cc:	2101      	movs	r1, #1
 80033ce:	2003      	movs	r0, #3
}
 80033d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcdCursorOn();
 80033d4:	f000 bbb8 	b.w	8003b48 <lcdCommand>
	} else if (option_current == opt_frequency_val)
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d1ee      	bne.n	80033ba <vtg_select_order+0x26>
		value_order_row = var_frequency;
 80033dc:	2301      	movs	r3, #1
 80033de:	e7eb      	b.n	80033b8 <vtg_select_order+0x24>
 80033e0:	2000021c 	.word	0x2000021c
 80033e4:	2000021d 	.word	0x2000021d
 80033e8:	20000018 	.word	0x20000018
 80033ec:	20000017 	.word	0x20000017

080033f0 <order_changing>:

void  order_changing (uint8_t col_order_low, uint8_t col_order_hight)
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	460d      	mov	r5, r1
	event_t event = event_get();
 80033f6:	f7ff fae5 	bl	80029c4 <event_get>

	switch (event)
 80033fa:	2801      	cmp	r0, #1
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <order_changing+0x78>)
 80033fe:	d008      	beq.n	8003412 <order_changing+0x22>
 8003400:	2802      	cmp	r0, #2
 8003402:	d01a      	beq.n	800343a <order_changing+0x4a>
		}
		break;
	default:
		break;
	}
		lcdSetCursorPosition(value_order_column, value_order_row);
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <order_changing+0x7c>)
 8003406:	7818      	ldrb	r0, [r3, #0]
 8003408:	7811      	ldrb	r1, [r2, #0]

}
 800340a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		lcdSetCursorPosition(value_order_column, value_order_row);
 800340e:	f000 bc9d 	b.w	8003d4c <lcdSetCursorPosition>
		value_order_column--;
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	4916      	ldr	r1, [pc, #88]	; (8003470 <order_changing+0x80>)
 8003416:	3a01      	subs	r2, #1
 8003418:	b2d2      	uxtb	r2, r2
		if (value_order_column < col_order_hight)
 800341a:	42aa      	cmp	r2, r5
		value_order_column--;
 800341c:	701a      	strb	r2, [r3, #0]
		if (value_order_column < col_order_hight)
 800341e:	d203      	bcs.n	8003428 <order_changing+0x38>
			value_order_column = col_order_low;
 8003420:	701c      	strb	r4, [r3, #0]
			value_order = -1;				// setting order to 1^-1
 8003422:	22ff      	movs	r2, #255	; 0xff
			value_order++;
 8003424:	700a      	strb	r2, [r1, #0]
 8003426:	e7ed      	b.n	8003404 <order_changing+0x14>
		} else if (value_order_column == voc_order_skip)
 8003428:	2a09      	cmp	r2, #9
			value_order++;
 800342a:	bf13      	iteet	ne
 800342c:	780a      	ldrbne	r2, [r1, #0]
			value_order_column--;
 800342e:	2208      	moveq	r2, #8
 8003430:	701a      	strbeq	r2, [r3, #0]
			value_order++;
 8003432:	3201      	addne	r2, #1
			value_order = 0;
 8003434:	bf08      	it	eq
 8003436:	2200      	moveq	r2, #0
 8003438:	e7f4      	b.n	8003424 <order_changing+0x34>
		value_order_column++;
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <order_changing+0x80>)
 800343e:	3201      	adds	r2, #1
 8003440:	b2d2      	uxtb	r2, r2
		if (value_order_column > col_order_low)
 8003442:	4294      	cmp	r4, r2
		value_order_column++;
 8003444:	701a      	strb	r2, [r3, #0]
		if (value_order_column > col_order_low)
 8003446:	d204      	bcs.n	8003452 <order_changing+0x62>
			value_order = (col_order_low - col_order_hight) - 2;	// given that value has 10^-1 order
 8003448:	3c02      	subs	r4, #2
 800344a:	1b61      	subs	r1, r4, r5
			value_order_column = col_order_hight;
 800344c:	701d      	strb	r5, [r3, #0]
			value_order = (col_order_low - col_order_hight) - 2;	// given that value has 10^-1 order
 800344e:	7001      	strb	r1, [r0, #0]
 8003450:	e7d8      	b.n	8003404 <order_changing+0x14>
		} else if (value_order_column == voc_order_skip)
 8003452:	2a09      	cmp	r2, #9
			value_order--;
 8003454:	bf13      	iteet	ne
 8003456:	7802      	ldrbne	r2, [r0, #0]
			value_order_column++;
 8003458:	220a      	moveq	r2, #10
 800345a:	701a      	strbeq	r2, [r3, #0]
			value_order--;
 800345c:	f102 32ff 	addne.w	r2, r2, #4294967295
			value_order = 0;
 8003460:	bf08      	it	eq
 8003462:	2200      	moveq	r2, #0
			value_order--;
 8003464:	7002      	strb	r2, [r0, #0]
 8003466:	e7cd      	b.n	8003404 <order_changing+0x14>
 8003468:	20000018 	.word	0x20000018
 800346c:	2000021d 	.word	0x2000021d
 8003470:	20000017 	.word	0x20000017

08003474 <vtg_order_change>:

void vtg_order_change()
{
	switch (option_current)
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <vtg_order_change+0x24>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d002      	beq.n	8003482 <vtg_order_change+0xe>
 800347c:	2b03      	cmp	r3, #3
 800347e:	d008      	beq.n	8003492 <vtg_order_change+0x1e>
 8003480:	4770      	bx	lr
	{
	case opt_amplitude_val:
		order_changing (voc_order_low, (voc_order_low-amplitude_val_length)+1);
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <vtg_order_change+0x28>)
		break;
	case opt_frequency_val:
		order_changing (voc_order_low, (voc_order_low-frequency_val_length)+1);
 8003484:	7819      	ldrb	r1, [r3, #0]
 8003486:	f1c1 010b 	rsb	r1, r1, #11
 800348a:	b2c9      	uxtb	r1, r1
 800348c:	200a      	movs	r0, #10
 800348e:	f7ff bfaf 	b.w	80033f0 <order_changing>
 8003492:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <vtg_order_change+0x2c>)
 8003494:	e7f6      	b.n	8003484 <vtg_order_change+0x10>
 8003496:	bf00      	nop
 8003498:	2000021c 	.word	0x2000021c
 800349c:	20000218 	.word	0x20000218
 80034a0:	2000021b 	.word	0x2000021b

080034a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a8:	2400      	movs	r4, #0
 80034aa:	4b21      	ldr	r3, [pc, #132]	; (8003530 <MX_GPIO_Init+0x8c>)
 80034ac:	9400      	str	r4, [sp, #0]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034b0:	4d20      	ldr	r5, [pc, #128]	; (8003534 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	f042 0204 	orr.w	r2, r2, #4
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
 80034b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ba:	f002 0204 	and.w	r2, r2, #4
 80034be:	9200      	str	r2, [sp, #0]
 80034c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c2:	9401      	str	r4, [sp, #4]
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	f002 0201 	and.w	r2, r2, #1
 80034d2:	9201      	str	r2, [sp, #4]
 80034d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d6:	9402      	str	r4, [sp, #8]
 80034d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034da:	f042 0202 	orr.w	r2, r2, #2
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034e6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034ea:	4628      	mov	r0, r5
 80034ec:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80034f0:	f7fd ff68 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80034f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fa:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_GPIO_Init+0x94>)
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80034fe:	480f      	ldr	r0, [pc, #60]	; (800353c <MX_GPIO_Init+0x98>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003500:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003502:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003504:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003506:	f7fd fe83 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800350a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800350c:	a903      	add	r1, sp, #12
 800350e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LED_Pin;
 8003510:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003512:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003518:	f7fd fe7a 	bl	8001210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800351c:	4622      	mov	r2, r4
 800351e:	4621      	mov	r1, r4
 8003520:	2028      	movs	r0, #40	; 0x28
 8003522:	f7fd fdfb 	bl	800111c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003526:	2028      	movs	r0, #40	; 0x28
 8003528:	f7fd fe2c 	bl	8001184 <HAL_NVIC_EnableIRQ>

}
 800352c:	b008      	add	sp, #32
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000
 8003538:	10110000 	.word	0x10110000
 800353c:	40020800 	.word	0x40020800

08003540 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003540:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003542:	480d      	ldr	r0, [pc, #52]	; (8003578 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 8003544:	4b0d      	ldr	r3, [pc, #52]	; (800357c <MX_I2C1_Init+0x3c>)
 8003546:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8003584 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800354a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800354e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003552:	2300      	movs	r3, #0
 8003554:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003556:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003558:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800355a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800355c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800355e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003560:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003562:	f7fe f811 	bl	8001588 <HAL_I2C_Init>
 8003566:	b128      	cbz	r0, 8003574 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003568:	2142      	movs	r1, #66	; 0x42
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_I2C1_Init+0x40>)
  }

}
 800356c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003570:	f000 b8b0 	b.w	80036d4 <_Error_Handler>
 8003574:	bd08      	pop	{r3, pc}
 8003576:	bf00      	nop
 8003578:	20000380 	.word	0x20000380
 800357c:	40005400 	.word	0x40005400
 8003580:	0800695c 	.word	0x0800695c
 8003584:	000186a0 	.word	0x000186a0

08003588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800358a:	6802      	ldr	r2, [r0, #0]
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_I2C_MspInit+0x58>)
 800358e:	429a      	cmp	r2, r3
 8003590:	d122      	bne.n	80035d8 <HAL_I2C_MspInit+0x50>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003596:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003598:	2312      	movs	r3, #18
 800359a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800359c:	2301      	movs	r3, #1
 800359e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035a4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a6:	eb0d 0103 	add.w	r1, sp, r3
 80035aa:	480e      	ldr	r0, [pc, #56]	; (80035e4 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ae:	f7fd fe2f 	bl	8001210 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <HAL_I2C_MspInit+0x60>)
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035ba:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80035be:	6419      	str	r1, [r3, #64]	; 0x40
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c6:	9300      	str	r3, [sp, #0]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80035c8:	2020      	movs	r0, #32
 80035ca:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035cc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80035ce:	f7fd fda5 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80035d2:	2020      	movs	r0, #32
 80035d4:	f7fd fdd6 	bl	8001184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80035d8:	b007      	add	sp, #28
 80035da:	f85d fb04 	ldr.w	pc, [sp], #4
 80035de:	bf00      	nop
 80035e0:	40005400 	.word	0x40005400
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40023800 	.word	0x40023800

080035ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035ec:	b510      	push	{r4, lr}
 80035ee:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	2400      	movs	r4, #0
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <SystemClock_Config+0x84>)
 80035f4:	9400      	str	r4, [sp, #0]
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <SystemClock_Config+0x88>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800360a:	9401      	str	r4, [sp, #4]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	6813      	ldr	r3, [r2, #0]
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800361a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800361c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003624:	2302      	movs	r3, #2
 8003626:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003628:	2301      	movs	r3, #1
 800362a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362c:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800362e:	2310      	movs	r3, #16
 8003630:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003632:	f7fe fbff 	bl	8001e34 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003636:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003638:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800363a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800363c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800363e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003640:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003642:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003644:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003646:	f7fe faed 	bl	8001c24 <HAL_RCC_ClockConfig>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800364a:	f7fe fb85 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 800364e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003652:	fbb0 f0f3 	udiv	r0, r0, r3
 8003656:	f7fd fda1 	bl	800119c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800365a:	2004      	movs	r0, #4
 800365c:	f7fd fdb4 	bl	80011c8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003660:	4622      	mov	r2, r4
 8003662:	4621      	mov	r1, r4
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7fd fd58 	bl	800111c <HAL_NVIC_SetPriority>
}
 800366c:	b014      	add	sp, #80	; 0x50
 800366e:	bd10      	pop	{r4, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000

08003678 <main>:
{
 8003678:	b508      	push	{r3, lr}
  HAL_Init();
 800367a:	f7fd fcfd 	bl	8001078 <HAL_Init>
  SystemClock_Config();
 800367e:	f7ff ffb5 	bl	80035ec <SystemClock_Config>
  MX_GPIO_Init();
 8003682:	f7ff ff0f 	bl	80034a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003686:	f7ff ff5b 	bl	8003540 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800368a:	f000 f9dd 	bl	8003a48 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800368e:	f000 f907 	bl	80038a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003692:	f000 f94d 	bl	8003930 <MX_TIM2_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003696:	2118      	movs	r1, #24
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <main+0x50>)
 800369a:	f7fe fd65 	bl	8002168 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800369e:	2100      	movs	r1, #0
 80036a0:	480a      	ldr	r0, [pc, #40]	; (80036cc <main+0x54>)
 80036a2:	f7fe fff7 	bl	8002694 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80036a6:	2104      	movs	r1, #4
 80036a8:	4808      	ldr	r0, [pc, #32]	; (80036cc <main+0x54>)
 80036aa:	f7fe fff3 	bl	8002694 <HAL_TIM_IC_Start_IT>
  AD9834_init();
 80036ae:	f7fd fc47 	bl	8000f40 <AD9834_init>
  menu_init();
 80036b2:	f7ff f9eb 	bl	8002a8c <menu_init>
  printf("perepherial has inited\n");
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <main+0x58>)
 80036b8:	f000 fc26 	bl	8003f08 <puts>
	  menu_execute();
 80036bc:	f7ff fa9c 	bl	8002bf8 <menu_execute>
	  HAL_Delay(100);
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	f7fd fd05 	bl	80010d0 <HAL_Delay>
 80036c6:	e7f9      	b.n	80036bc <main+0x44>
 80036c8:	20000410 	.word	0x20000410
 80036cc:	200003d4 	.word	0x200003d4
 80036d0:	08006969 	.word	0x08006969

080036d4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_MspInit+0x8c>)
 80036dc:	2400      	movs	r4, #0
 80036de:	9400      	str	r4, [sp, #0]
 80036e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80036ee:	9200      	str	r2, [sp, #0]
 80036f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	9401      	str	r4, [sp, #4]
 80036f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003704:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	f7fd fcf6 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800370c:	4622      	mov	r2, r4
 800370e:	4621      	mov	r1, r4
 8003710:	f06f 000b 	mvn.w	r0, #11
 8003714:	f7fd fd02 	bl	800111c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003718:	4622      	mov	r2, r4
 800371a:	4621      	mov	r1, r4
 800371c:	f06f 000a 	mvn.w	r0, #10
 8003720:	f7fd fcfc 	bl	800111c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003724:	4622      	mov	r2, r4
 8003726:	4621      	mov	r1, r4
 8003728:	f06f 0009 	mvn.w	r0, #9
 800372c:	f7fd fcf6 	bl	800111c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003730:	4622      	mov	r2, r4
 8003732:	4621      	mov	r1, r4
 8003734:	f06f 0004 	mvn.w	r0, #4
 8003738:	f7fd fcf0 	bl	800111c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800373c:	4622      	mov	r2, r4
 800373e:	4621      	mov	r1, r4
 8003740:	f06f 0003 	mvn.w	r0, #3
 8003744:	f7fd fcea 	bl	800111c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003748:	4622      	mov	r2, r4
 800374a:	4621      	mov	r1, r4
 800374c:	f06f 0001 	mvn.w	r0, #1
 8003750:	f7fd fce4 	bl	800111c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003754:	4622      	mov	r2, r4
 8003756:	4621      	mov	r1, r4
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7fd fcde 	bl	800111c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003760:	b002      	add	sp, #8
 8003762:	bd10      	pop	{r4, pc}
 8003764:	40023800 	.word	0x40023800

08003768 <NMI_Handler>:
 8003768:	4770      	bx	lr

0800376a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800376a:	e7fe      	b.n	800376a <HardFault_Handler>

0800376c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800376c:	e7fe      	b.n	800376c <MemManage_Handler>

0800376e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800376e:	e7fe      	b.n	800376e <BusFault_Handler>

08003770 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003770:	e7fe      	b.n	8003770 <UsageFault_Handler>

08003772 <SVC_Handler>:
 8003772:	4770      	bx	lr

08003774 <DebugMon_Handler>:
 8003774:	4770      	bx	lr

08003776 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003776:	4770      	bx	lr

08003778 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003778:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800377a:	f7fd fc97 	bl	80010ac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800377e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003782:	f7fd bd2e 	b.w	80011e2 <HAL_SYSTICK_IRQHandler>
	...

08003788 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003788:	4801      	ldr	r0, [pc, #4]	; (8003790 <TIM1_CC_IRQHandler+0x8>)
 800378a:	f7fe bd4b 	b.w	8002224 <HAL_TIM_IRQHandler>
 800378e:	bf00      	nop
 8003790:	200003d4 	.word	0x200003d4

08003794 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <TIM2_IRQHandler+0x8>)
 8003796:	f7fe bd45 	b.w	8002224 <HAL_TIM_IRQHandler>
 800379a:	bf00      	nop
 800379c:	20000410 	.word	0x20000410

080037a0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <I2C1_ER_IRQHandler+0x8>)
 80037a2:	f7fe b97b 	b.w	8001a9c <HAL_I2C_ER_IRQHandler>
 80037a6:	bf00      	nop
 80037a8:	20000380 	.word	0x20000380

080037ac <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037b0:	f7fd be0e 	b.w	80013d0 <HAL_GPIO_EXTI_IRQHandler>

080037b4 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80037b4:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < len; i++)
 80037b6:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037b8:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80037bc:	4293      	cmp	r3, r2
 80037be:	db01      	blt.n	80037c4 <_write+0x10>
		ITM_SendChar(*ptr++);

	return len;
}
 80037c0:	4610      	mov	r0, r2
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80037c8:	07c0      	lsls	r0, r0, #31
 80037ca:	d503      	bpl.n	80037d4 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80037cc:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037d0:	07c0      	lsls	r0, r0, #31
 80037d2:	d402      	bmi.n	80037da <_write+0x26>
	for (i = 0; i < len; i++)
 80037d4:	3301      	adds	r3, #1
 80037d6:	e7f1      	b.n	80037bc <_write+0x8>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80037d8:	bf00      	nop
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	2800      	cmp	r0, #0
 80037de:	d0fb      	beq.n	80037d8 <_write+0x24>
		ITM_SendChar(*ptr++);
 80037e0:	5cc8      	ldrb	r0, [r1, r3]
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80037e2:	7020      	strb	r0, [r4, #0]
 80037e4:	e7f6      	b.n	80037d4 <_write+0x20>
	...

080037e8 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <_sbrk+0x14>)
 80037ea:	6819      	ldr	r1, [r3, #0]
{
 80037ec:	4602      	mov	r2, r0
	if (heap_end == 0) {
 80037ee:	b909      	cbnz	r1, 80037f4 <_sbrk+0xc>
		heap_end = & end;
 80037f0:	4903      	ldr	r1, [pc, #12]	; (8003800 <_sbrk+0x18>)
 80037f2:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 80037f4:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 80037f6:	4402      	add	r2, r0
 80037f8:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 80037fa:	4770      	bx	lr
 80037fc:	20000220 	.word	0x20000220
 8003800:	20000490 	.word	0x20000490

08003804 <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <_close+0xc>)
 8003806:	2258      	movs	r2, #88	; 0x58
 8003808:	601a      	str	r2, [r3, #0]
	return -1;
}
 800380a:	f04f 30ff 	mov.w	r0, #4294967295
 800380e:	4770      	bx	lr
 8003810:	2000048c 	.word	0x2000048c

08003814 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <_fstat+0xc>)
 8003816:	2258      	movs	r2, #88	; 0x58
 8003818:	601a      	str	r2, [r3, #0]
	return -1;
}
 800381a:	f04f 30ff 	mov.w	r0, #4294967295
 800381e:	4770      	bx	lr
 8003820:	2000048c 	.word	0x2000048c

08003824 <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <_isatty+0xc>)
 8003826:	2258      	movs	r2, #88	; 0x58
 8003828:	601a      	str	r2, [r3, #0]
	return 0;
}
 800382a:	2000      	movs	r0, #0
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000048c 	.word	0x2000048c

08003834 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <_lseek+0xc>)
 8003836:	2258      	movs	r2, #88	; 0x58
 8003838:	601a      	str	r2, [r3, #0]
	return -1;
}
 800383a:	f04f 30ff 	mov.w	r0, #4294967295
 800383e:	4770      	bx	lr
 8003840:	2000048c 	.word	0x2000048c

08003844 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
	errno = ENOSYS;
 8003844:	4b02      	ldr	r3, [pc, #8]	; (8003850 <_read+0xc>)
 8003846:	2258      	movs	r2, #88	; 0x58
 8003848:	601a      	str	r2, [r3, #0]
	return -1;
}
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	4770      	bx	lr
 8003850:	2000048c 	.word	0x2000048c

08003854 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003854:	490f      	ldr	r1, [pc, #60]	; (8003894 <SystemInit+0x40>)
 8003856:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800385a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <SystemInit+0x44>)
 8003864:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003866:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800386e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003876:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800387a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <SystemInit+0x48>)
 800387e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003886:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003888:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800388a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800388e:	608b      	str	r3, [r1, #8]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00
 8003898:	40023800 	.word	0x40023800
 800389c:	24003010 	.word	0x24003010

080038a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038a0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim1.Instance = TIM1;
 80038a2:	4820      	ldr	r0, [pc, #128]	; (8003924 <MX_TIM1_Init+0x84>)
  htim1.Init.Prescaler = 15999;
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <MX_TIM1_Init+0x88>)
 80038a6:	f643 6c7f 	movw	ip, #15999	; 0x3e7f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038aa:	2400      	movs	r4, #0
{
 80038ac:	b086      	sub	sp, #24
  htim1.Init.Prescaler = 15999;
 80038ae:	e880 1008 	stmia.w	r0, {r3, ip}
  htim1.Init.Period = 1999;
 80038b2:	f240 73cf 	movw	r3, #1999	; 0x7cf
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1999;
 80038b8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ba:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80038bc:	6144      	str	r4, [r0, #20]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80038be:	f7fe fdb7 	bl	8002430 <HAL_TIM_IC_Init>
 80038c2:	b118      	cbz	r0, 80038cc <MX_TIM1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038c4:	2142      	movs	r1, #66	; 0x42
 80038c6:	4819      	ldr	r0, [pc, #100]	; (800392c <MX_TIM1_Init+0x8c>)
 80038c8:	f7ff ff04 	bl	80036d4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038cc:	4669      	mov	r1, sp
 80038ce:	4815      	ldr	r0, [pc, #84]	; (8003924 <MX_TIM1_Init+0x84>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d0:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d2:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038d4:	f7fe ff0a 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 80038d8:	b118      	cbz	r0, 80038e2 <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038da:	2149      	movs	r1, #73	; 0x49
 80038dc:	4813      	ldr	r0, [pc, #76]	; (800392c <MX_TIM1_Init+0x8c>)
 80038de:	f7ff fef9 	bl	80036d4 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038e2:	2301      	movs	r3, #1
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038e4:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038e6:	9303      	str	r3, [sp, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 15;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038e8:	a902      	add	r1, sp, #8
  sConfigIC.ICFilter = 15;
 80038ea:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <MX_TIM1_Init+0x84>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038ee:	9202      	str	r2, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038f0:	9204      	str	r2, [sp, #16]
  sConfigIC.ICFilter = 15;
 80038f2:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038f4:	f7fe fe3a 	bl	800256c <HAL_TIM_IC_ConfigChannel>
 80038f8:	b118      	cbz	r0, 8003902 <MX_TIM1_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038fa:	2152      	movs	r1, #82	; 0x52
 80038fc:	480b      	ldr	r0, [pc, #44]	; (800392c <MX_TIM1_Init+0x8c>)
 80038fe:	f7ff fee9 	bl	80036d4 <_Error_Handler>
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003902:	2302      	movs	r3, #2
 8003904:	9302      	str	r3, [sp, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003906:	9303      	str	r3, [sp, #12]
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003908:	2204      	movs	r2, #4
  sConfigIC.ICFilter = 0;
 800390a:	2300      	movs	r3, #0
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800390c:	a902      	add	r1, sp, #8
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <MX_TIM1_Init+0x84>)
  sConfigIC.ICFilter = 0;
 8003910:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003912:	f7fe fe2b 	bl	800256c <HAL_TIM_IC_ConfigChannel>
 8003916:	b118      	cbz	r0, 8003920 <MX_TIM1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003918:	215a      	movs	r1, #90	; 0x5a
 800391a:	4804      	ldr	r0, [pc, #16]	; (800392c <MX_TIM1_Init+0x8c>)
 800391c:	f7ff feda 	bl	80036d4 <_Error_Handler>
  }

}
 8003920:	b006      	add	sp, #24
 8003922:	bd10      	pop	{r4, pc}
 8003924:	200003d4 	.word	0x200003d4
 8003928:	40010000 	.word	0x40010000
 800392c:	08006998 	.word	0x08006998

08003930 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003930:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8003932:	4816      	ldr	r0, [pc, #88]	; (800398c <MX_TIM2_Init+0x5c>)
{
 8003934:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 8003936:	2400      	movs	r4, #0
 8003938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0x255;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800393c:	2102      	movs	r1, #2
  htim2.Init.Prescaler = 0;
 800393e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.Period = 0x255;
 8003942:	f240 2355 	movw	r3, #597	; 0x255
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 15;
 8003946:	220f      	movs	r2, #15
  htim2.Init.Period = 0x255;
 8003948:	60c3      	str	r3, [r0, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800394a:	9104      	str	r1, [sp, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800394c:	2301      	movs	r3, #1
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800394e:	9108      	str	r1, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 15;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003950:	a903      	add	r1, sp, #12
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003952:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003954:	6104      	str	r4, [r0, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003956:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003958:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800395a:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 15;
 800395c:	9207      	str	r2, [sp, #28]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800395e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003960:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003962:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003964:	f7fe fd7e 	bl	8002464 <HAL_TIM_Encoder_Init>
 8003968:	b118      	cbz	r0, 8003972 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800396a:	2174      	movs	r1, #116	; 0x74
 800396c:	4808      	ldr	r0, [pc, #32]	; (8003990 <MX_TIM2_Init+0x60>)
 800396e:	f7ff feb1 	bl	80036d4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003972:	a901      	add	r1, sp, #4
 8003974:	4805      	ldr	r0, [pc, #20]	; (800398c <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003976:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003978:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800397a:	f7fe feb7 	bl	80026ec <HAL_TIMEx_MasterConfigSynchronization>
 800397e:	b118      	cbz	r0, 8003988 <MX_TIM2_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003980:	217b      	movs	r1, #123	; 0x7b
 8003982:	4803      	ldr	r0, [pc, #12]	; (8003990 <MX_TIM2_Init+0x60>)
 8003984:	f7ff fea6 	bl	80036d4 <_Error_Handler>
  }

}
 8003988:	b00c      	add	sp, #48	; 0x30
 800398a:	bd10      	pop	{r4, pc}
 800398c:	20000410 	.word	0x20000410
 8003990:	08006998 	.word	0x08006998

08003994 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003994:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_icHandle->Instance==TIM1)
 8003996:	6802      	ldr	r2, [r0, #0]
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_TIM_IC_MspInit+0x54>)
 800399a:	429a      	cmp	r2, r3
{
 800399c:	b086      	sub	sp, #24
  if(tim_icHandle->Instance==TIM1)
 800399e:	d121      	bne.n	80039e4 <HAL_TIM_IC_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039a0:	2400      	movs	r4, #0
 80039a2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80039a6:	9400      	str	r4, [sp, #0]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	4810      	ldr	r0, [pc, #64]	; (80039ec <HAL_TIM_IC_MspInit+0x58>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	9404      	str	r4, [sp, #16]
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f7fd fc1e 	bl	8001210 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80039d4:	201b      	movs	r0, #27
 80039d6:	4622      	mov	r2, r4
 80039d8:	4621      	mov	r1, r4
 80039da:	f7fd fb9f 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80039de:	201b      	movs	r0, #27
 80039e0:	f7fd fbd0 	bl	8001184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039e4:	b006      	add	sp, #24
 80039e6:	bd10      	pop	{r4, pc}
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40020000 	.word	0x40020000

080039f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80039f0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 80039f2:	6803      	ldr	r3, [r0, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80039f8:	b086      	sub	sp, #24
  if(tim_encoderHandle->Instance==TIM2)
 80039fa:	d120      	bne.n	8003a3e <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039fc:	2400      	movs	r4, #0
 80039fe:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003a02:	9400      	str	r4, [sp, #0]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a06:	480f      	ldr	r0, [pc, #60]	; (8003a44 <HAL_TIM_Encoder_MspInit+0x54>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a10:	9404      	str	r4, [sp, #16]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a1e:	2312      	movs	r3, #18
 8003a20:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a24:	2301      	movs	r3, #1
 8003a26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a28:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2a:	f7fd fbf1 	bl	8001210 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a2e:	201c      	movs	r0, #28
 8003a30:	4622      	mov	r2, r4
 8003a32:	4621      	mov	r1, r4
 8003a34:	f7fd fb72 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a38:	201c      	movs	r0, #28
 8003a3a:	f7fd fba3 	bl	8001184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003a3e:	b006      	add	sp, #24
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	bf00      	nop
 8003a44:	40020000 	.word	0x40020000

08003a48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a48:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_USART2_UART_Init+0x38>)
 8003a4e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003a52:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a56:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a5c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a5e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a60:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a66:	f7fe ff7f 	bl	8002968 <HAL_UART_Init>
 8003a6a:	b128      	cbz	r0, 8003a78 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003a6c:	2142      	movs	r1, #66	; 0x42
 8003a6e:	4805      	ldr	r0, [pc, #20]	; (8003a84 <MX_USART2_UART_Init+0x3c>)
  }

}
 8003a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003a74:	f7ff be2e 	b.w	80036d4 <_Error_Handler>
 8003a78:	bd08      	pop	{r3, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000044c 	.word	0x2000044c
 8003a80:	40004400 	.word	0x40004400
 8003a84:	080069a5 	.word	0x080069a5

08003a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003a8a:	6802      	ldr	r2, [r0, #0]
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_UART_MspInit+0x44>)
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d119      	bne.n	8003ac6 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aac:	230c      	movs	r3, #12
 8003aae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003abe:	2307      	movs	r3, #7
 8003ac0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	f7fd fba5 	bl	8001210 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ac6:	b007      	add	sp, #28
 8003ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40020000 	.word	0x40020000

08003ad8 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8003ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8003ada:	4c19      	ldr	r4, [pc, #100]	; (8003b40 <lcdWriteByte+0x68>)
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <lcdWriteByte+0x6c>)
 8003ade:	79e3      	ldrb	r3, [r4, #7]
 8003ae0:	4318      	orrs	r0, r3
 8003ae2:	780b      	ldrb	r3, [r1, #0]
 8003ae4:	f023 030f 	bic.w	r3, r3, #15
 8003ae8:	4303      	orrs	r3, r0
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8003af0:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8003af2:	780b      	ldrb	r3, [r1, #0]
 8003af4:	b245      	sxtb	r5, r0
 8003af6:	f023 030f 	bic.w	r3, r3, #15
 8003afa:	432b      	orrs	r3, r5
 8003afc:	7093      	strb	r3, [r2, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8003afe:	780b      	ldrb	r3, [r1, #0]
 8003b00:	f040 0004 	orr.w	r0, r0, #4
 8003b04:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8003b08:	b2c0      	uxtb	r0, r0
 8003b0a:	70d0      	strb	r0, [r2, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8003b0c:	7110      	strb	r0, [r2, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8003b0e:	780b      	ldrb	r3, [r1, #0]

    if (HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, 100) != HAL_OK) {
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	79a1      	ldrb	r1, [r4, #6]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8003b14:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    if (HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, 100) != HAL_OK) {
 8003b18:	2364      	movs	r3, #100	; 0x64
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8003b1a:	7155      	strb	r5, [r2, #5]
    if (HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6, 100) != HAL_OK) {
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2306      	movs	r3, #6
 8003b20:	f7fd fda0 	bl	8001664 <HAL_I2C_Master_Transmit>
 8003b24:	b118      	cbz	r0, 8003b2e <lcdWriteByte+0x56>
        return false;
 8003b26:	2000      	movs	r0, #0
 8003b28:	e008      	b.n	8003b3c <lcdWriteByte+0x64>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
    	HAL_Delay(1);
 8003b2a:	f7fd fad1 	bl	80010d0 <HAL_Delay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f7fe f874 	bl	8001c1c <HAL_I2C_GetState>
 8003b34:	2820      	cmp	r0, #32
    	HAL_Delay(1);
 8003b36:	f04f 0001 	mov.w	r0, #1
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8003b3a:	d1f6      	bne.n	8003b2a <lcdWriteByte+0x52>
    }

    return true;
}
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd30      	pop	{r4, r5, pc}
 8003b40:	2000022c 	.word	0x2000022c
 8003b44:	20000224 	.word	0x20000224

08003b48 <lcdCommand>:
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8003b48:	b507      	push	{r0, r1, r2, lr}
    uint8_t lcdData = 0x00;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (action) {
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d047      	beq.n	8003be4 <lcdCommand+0x9c>
 8003b54:	2901      	cmp	r1, #1
 8003b56:	d12e      	bne.n	8003bb6 <lcdCommand+0x6e>
            switch (command) {
 8003b58:	1e43      	subs	r3, r0, #1
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	d82b      	bhi.n	8003bb6 <lcdCommand+0x6e>
 8003b5e:	e8df f003 	tbb	[pc, r3]
 8003b62:	2204      	.short	0x2204
 8003b64:	09331d18 	.word	0x09331d18
 8003b68:	3c36      	.short	0x3c36
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <lcdCommand+0x114>)
 8003b6c:	7a13      	ldrb	r3, [r2, #8]
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8003b72:	7213      	strb	r3, [r2, #8]
 8003b74:	2301      	movs	r3, #1
 8003b76:	fa03 f000 	lsl.w	r0, r3, r0
 8003b7a:	f010 0f1a 	tst.w	r0, #26
 8003b7e:	d160      	bne.n	8003c42 <lcdCommand+0xfa>
 8003b80:	f410 7fe0 	tst.w	r0, #448	; 0x1c0
 8003b84:	d164      	bne.n	8003c50 <lcdCommand+0x108>
    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8003b86:	f10d 0107 	add.w	r1, sp, #7
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f7ff ffa4 	bl	8003ad8 <lcdWriteByte>
 8003b90:	e017      	b.n	8003bc2 <lcdCommand+0x7a>
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8003b92:	4a32      	ldr	r2, [pc, #200]	; (8003c5c <lcdCommand+0x114>)
 8003b94:	7a13      	ldrb	r3, [r2, #8]
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	e7ea      	b.n	8003b72 <lcdCommand+0x2a>
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <lcdCommand+0x114>)
 8003b9e:	7a13      	ldrb	r3, [r2, #8]
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	e7e5      	b.n	8003b72 <lcdCommand+0x2a>
                    lcdData = LCD_BIT_DISP_CLEAR;
 8003ba6:	a902      	add	r1, sp, #8
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f801 3d01 	strb.w	r3, [r1, #-1]!
                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7ff ff92 	bl	8003ad8 <lcdWriteByte>
 8003bb4:	b908      	cbnz	r0, 8003bba <lcdCommand+0x72>
                    return false;
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e003      	b.n	8003bc2 <lcdCommand+0x7a>
                        HAL_Delay(2);
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f7fd fa88 	bl	80010d0 <HAL_Delay>
                        return true;
 8003bc0:	2001      	movs	r0, #1
}
 8003bc2:	b003      	add	sp, #12
 8003bc4:	f85d fb04 	ldr.w	pc, [sp], #4
                    lcdData = LCD_BIT_CURSOR_HOME;
 8003bc8:	a902      	add	r1, sp, #8
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e7ed      	b.n	8003baa <lcdCommand+0x62>
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8003bce:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <lcdCommand+0x114>)
 8003bd0:	7a53      	ldrb	r3, [r2, #9]
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8003bd6:	7253      	strb	r3, [r2, #9]
                    break;
 8003bd8:	e7cc      	b.n	8003b74 <lcdCommand+0x2c>
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8003bda:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <lcdCommand+0x114>)
 8003bdc:	7a53      	ldrb	r3, [r2, #9]
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	e7f8      	b.n	8003bd6 <lcdCommand+0x8e>
            switch (command) {
 8003be4:	1e43      	subs	r3, r0, #1
 8003be6:	2b07      	cmp	r3, #7
 8003be8:	d8e5      	bhi.n	8003bb6 <lcdCommand+0x6e>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <lcdCommand+0xa8>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c11 	.word	0x08003c11
 8003bf4:	08003bb7 	.word	0x08003bb7
 8003bf8:	08003c1b 	.word	0x08003c1b
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003bb7 	.word	0x08003bb7
 8003c04:	08003b75 	.word	0x08003b75
 8003c08:	08003c2f 	.word	0x08003c2f
 8003c0c:	08003c39 	.word	0x08003c39
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <lcdCommand+0x114>)
 8003c12:	7a13      	ldrb	r3, [r2, #8]
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	e7ab      	b.n	8003b72 <lcdCommand+0x2a>
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <lcdCommand+0x114>)
 8003c1c:	7a13      	ldrb	r3, [r2, #8]
 8003c1e:	f023 0302 	bic.w	r3, r3, #2
 8003c22:	e7a6      	b.n	8003b72 <lcdCommand+0x2a>
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <lcdCommand+0x114>)
 8003c26:	7a13      	ldrb	r3, [r2, #8]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	e7a1      	b.n	8003b72 <lcdCommand+0x2a>
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8003c2e:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <lcdCommand+0x114>)
 8003c30:	7a53      	ldrb	r3, [r2, #9]
 8003c32:	f023 0302 	bic.w	r3, r3, #2
 8003c36:	e7ce      	b.n	8003bd6 <lcdCommand+0x8e>
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8003c38:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <lcdCommand+0x114>)
 8003c3a:	7a53      	ldrb	r3, [r2, #9]
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	e7c9      	b.n	8003bd6 <lcdCommand+0x8e>
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <lcdCommand+0x114>)
 8003c44:	7a1b      	ldrb	r3, [r3, #8]
 8003c46:	f043 0308 	orr.w	r3, r3, #8
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8003c4a:	f88d 3007 	strb.w	r3, [sp, #7]
            break;
 8003c4e:	e79a      	b.n	8003b86 <lcdCommand+0x3e>
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <lcdCommand+0x114>)
 8003c52:	7a5b      	ldrb	r3, [r3, #9]
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	e7f7      	b.n	8003c4a <lcdCommand+0x102>
 8003c5a:	bf00      	nop
 8003c5c:	2000022c 	.word	0x2000022c

08003c60 <lcdInit>:
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8003c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    lcdParams.hi2c      = hi2c;
 8003c64:	4c37      	ldr	r4, [pc, #220]	; (8003d44 <lcdInit+0xe4>)
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8003c66:	4e38      	ldr	r6, [pc, #224]	; (8003d48 <lcdInit+0xe8>)
    lcdParams.columns   = columns;
 8003c68:	7163      	strb	r3, [r4, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	71e3      	strb	r3, [r4, #7]
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8003c6e:	2334      	movs	r3, #52	; 0x34
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8003c70:	2500      	movs	r5, #0
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8003c72:	7033      	strb	r3, [r6, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8003c74:	7073      	strb	r3, [r6, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8003c76:	2330      	movs	r3, #48	; 0x30
    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8003c78:	f88d 500f 	strb.w	r5, [sp, #15]
    lcdParams.hi2c      = hi2c;
 8003c7c:	6020      	str	r0, [r4, #0]
    lcdParams.address   = address;
 8003c7e:	71a1      	strb	r1, [r4, #6]
    lcdParams.lines     = lines;
 8003c80:	7122      	strb	r2, [r4, #4]
    lcdCommandBuffer[2] = (0x03 << 4);
 8003c82:	70b3      	strb	r3, [r6, #2]
        if (HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, 100) != HAL_OK) {
 8003c84:	2764      	movs	r7, #100	; 0x64
 8003c86:	46b0      	mov	r8, r6
 8003c88:	79a1      	ldrb	r1, [r4, #6]
 8003c8a:	9700      	str	r7, [sp, #0]
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	4642      	mov	r2, r8
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	f7fd fce7 	bl	8001664 <HAL_I2C_Master_Transmit>
 8003c96:	b130      	cbz	r0, 8003ca6 <lcdInit+0x46>
            return false;
 8003c98:	2000      	movs	r0, #0
}
 8003c9a:	b004      	add	sp, #16
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            HAL_Delay(1);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7fd fa15 	bl	80010d0 <HAL_Delay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	f7fd ffb8 	bl	8001c1c <HAL_I2C_GetState>
 8003cac:	2820      	cmp	r0, #32
 8003cae:	d1f7      	bne.n	8003ca0 <lcdInit+0x40>
        if (i == 2) {
 8003cb0:	2d02      	cmp	r5, #2
    for (uint8_t i = 0; i < 3; ++i) {
 8003cb2:	f105 0501 	add.w	r5, r5, #1
        	HAL_Delay(1);
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2001      	moveq	r0, #1
        	HAL_Delay(5);
 8003cba:	2005      	movne	r0, #5
    for (uint8_t i = 0; i < 3; ++i) {
 8003cbc:	b2ed      	uxtb	r5, r5
        	HAL_Delay(5);
 8003cbe:	f7fd fa07 	bl	80010d0 <HAL_Delay>
    for (uint8_t i = 0; i < 3; ++i) {
 8003cc2:	2d03      	cmp	r5, #3
 8003cc4:	d1e0      	bne.n	8003c88 <lcdInit+0x28>
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8003cc6:	232c      	movs	r3, #44	; 0x2c
 8003cc8:	7033      	strb	r3, [r6, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8003cca:	7073      	strb	r3, [r6, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8003ccc:	2328      	movs	r3, #40	; 0x28
 8003cce:	70b3      	strb	r3, [r6, #2]
    if (HAL_I2C_Master_Transmit(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3, 100) != HAL_OK) {
 8003cd0:	2364      	movs	r3, #100	; 0x64
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	79a1      	ldrb	r1, [r4, #6]
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <lcdInit+0xe8>)
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	462b      	mov	r3, r5
 8003cdc:	f7fd fcc2 	bl	8001664 <HAL_I2C_Master_Transmit>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d1d9      	bne.n	8003c98 <lcdInit+0x38>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	f7fd ff99 	bl	8001c1c <HAL_I2C_GetState>
 8003cea:	2820      	cmp	r0, #32
 8003cec:	d125      	bne.n	8003d3a <lcdInit+0xda>
    lcdData |= LCD_MODE_4BITS;
 8003cee:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	f88d 200f 	strb.w	r2, [sp, #15]
    if (lcdParams.lines > 1) {
 8003cfa:	7922      	ldrb	r2, [r4, #4]
 8003cfc:	2a01      	cmp	r2, #1
        lcdData |= LCD_BIT_2LINE;
 8003cfe:	bf88      	it	hi
 8003d00:	f043 030a 	orrhi.w	r3, r3, #10
    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8003d04:	f10d 010f 	add.w	r1, sp, #15
 8003d08:	f04f 0000 	mov.w	r0, #0
        lcdData |= LCD_BIT_2LINE;
 8003d0c:	bf88      	it	hi
 8003d0e:	f88d 300f 	strbhi.w	r3, [sp, #15]
    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8003d12:	f7ff fee1 	bl	8003ad8 <lcdWriteByte>
    lcdDisplayOn();
 8003d16:	2101      	movs	r1, #1
 8003d18:	4608      	mov	r0, r1
 8003d1a:	f7ff ff15 	bl	8003b48 <lcdCommand>
    lcdCursorDirToRight();
 8003d1e:	2101      	movs	r1, #1
 8003d20:	2007      	movs	r0, #7
 8003d22:	f7ff ff11 	bl	8003b48 <lcdCommand>
    lcdDisplayClear();
 8003d26:	2101      	movs	r1, #1
 8003d28:	2002      	movs	r0, #2
 8003d2a:	f7ff ff0d 	bl	8003b48 <lcdCommand>
    lcdCursorHome();
 8003d2e:	2101      	movs	r1, #1
 8003d30:	2005      	movs	r0, #5
 8003d32:	f7ff ff09 	bl	8003b48 <lcdCommand>
    return true;
 8003d36:	2001      	movs	r0, #1
 8003d38:	e7af      	b.n	8003c9a <lcdInit+0x3a>
    	HAL_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f7fd f9c8 	bl	80010d0 <HAL_Delay>
 8003d40:	e7d0      	b.n	8003ce4 <lcdInit+0x84>
 8003d42:	bf00      	nop
 8003d44:	2000022c 	.word	0x2000022c
 8003d48:	20000224 	.word	0x20000224

08003d4c <lcdSetCursorPosition>:
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8003d4c:	b507      	push	{r0, r1, r2, lr}
    if ( line >= lcdParams.lines ) {
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <lcdSetCursorPosition+0x2c>)
 8003d50:	791b      	ldrb	r3, [r3, #4]
 8003d52:	428b      	cmp	r3, r1
        line = lcdParams.lines - 1;
 8003d54:	bf9c      	itt	ls
 8003d56:	f103 33ff 	addls.w	r3, r3, #4294967295
 8003d5a:	b2d9      	uxtbls	r1, r3
    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <lcdSetCursorPosition+0x30>)
 8003d5e:	5c5b      	ldrb	r3, [r3, r1]
 8003d60:	a902      	add	r1, sp, #8
 8003d62:	4418      	add	r0, r3
 8003d64:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003d68:	f801 0d01 	strb.w	r0, [r1, #-1]!
    return lcdWriteByte(0x00, &lcdCommand);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7ff feb3 	bl	8003ad8 <lcdWriteByte>
}
 8003d72:	b003      	add	sp, #12
 8003d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d78:	2000022c 	.word	0x2000022c
 8003d7c:	080069b4 	.word	0x080069b4

08003d80 <lcdPrintStr>:
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	1845      	adds	r5, r0, r1
    for (uint8_t i = 0; i < length; ++i) {
 8003d86:	42ac      	cmp	r4, r5
 8003d88:	d101      	bne.n	8003d8e <lcdPrintStr+0xe>
    return true;
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	e006      	b.n	8003d9c <lcdPrintStr+0x1c>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8003d8e:	4621      	mov	r1, r4
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7ff fea1 	bl	8003ad8 <lcdWriteByte>
 8003d96:	3401      	adds	r4, #1
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1f4      	bne.n	8003d86 <lcdPrintStr+0x6>
}
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}

08003d9e <lcdPrintChar>:
bool lcdPrintChar(uint8_t data) {
 8003d9e:	b507      	push	{r0, r1, r2, lr}
 8003da0:	a902      	add	r1, sp, #8
 8003da2:	f801 0d01 	strb.w	r0, [r1, #-1]!
    return lcdWriteByte(LCD_BIT_RS, &data);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7ff fe96 	bl	8003ad8 <lcdWriteByte>
}
 8003dac:	b003      	add	sp, #12
 8003dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003dba:	e003      	b.n	8003dc4 <LoopCopyDataInit>

08003dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003dc2:	3104      	adds	r1, #4

08003dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003dc4:	480b      	ldr	r0, [pc, #44]	; (8003df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003dcc:	d3f6      	bcc.n	8003dbc <CopyDataInit>
  ldr  r2, =_sbss
 8003dce:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003dd0:	e002      	b.n	8003dd8 <LoopFillZerobss>

08003dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003dd4:	f842 3b04 	str.w	r3, [r2], #4

08003dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ddc:	d3f9      	bcc.n	8003dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dde:	f7ff fd39 	bl	8003854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003de2:	f000 f811 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003de6:	f7ff fc47 	bl	8003678 <main>
  bx  lr    
 8003dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003df0:	08006bd0 	.word	0x08006bd0
  ldr  r0, =_sdata
 8003df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003df8:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003dfc:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8003e00:	20000490 	.word	0x20000490

08003e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e04:	e7fe      	b.n	8003e04 <ADC_IRQHandler>
	...

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	4e0d      	ldr	r6, [pc, #52]	; (8003e40 <__libc_init_array+0x38>)
 8003e0c:	4c0d      	ldr	r4, [pc, #52]	; (8003e44 <__libc_init_array+0x3c>)
 8003e0e:	1ba4      	subs	r4, r4, r6
 8003e10:	10a4      	asrs	r4, r4, #2
 8003e12:	2500      	movs	r5, #0
 8003e14:	42a5      	cmp	r5, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	4e0b      	ldr	r6, [pc, #44]	; (8003e48 <__libc_init_array+0x40>)
 8003e1a:	4c0c      	ldr	r4, [pc, #48]	; (8003e4c <__libc_init_array+0x44>)
 8003e1c:	f002 fd5a 	bl	80068d4 <_init>
 8003e20:	1ba4      	subs	r4, r4, r6
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	2500      	movs	r5, #0
 8003e26:	42a5      	cmp	r5, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e30:	4798      	blx	r3
 8003e32:	3501      	adds	r5, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e3a:	4798      	blx	r3
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08006bc8 	.word	0x08006bc8
 8003e44:	08006bc8 	.word	0x08006bc8
 8003e48:	08006bc8 	.word	0x08006bc8
 8003e4c:	08006bcc 	.word	0x08006bcc

08003e50 <_puts_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460e      	mov	r6, r1
 8003e54:	4605      	mov	r5, r0
 8003e56:	b118      	cbz	r0, 8003e60 <_puts_r+0x10>
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	b90b      	cbnz	r3, 8003e60 <_puts_r+0x10>
 8003e5c:	f000 fad4 	bl	8004408 <__sinit>
 8003e60:	69ab      	ldr	r3, [r5, #24]
 8003e62:	68ac      	ldr	r4, [r5, #8]
 8003e64:	b913      	cbnz	r3, 8003e6c <_puts_r+0x1c>
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 face 	bl	8004408 <__sinit>
 8003e6c:	4b23      	ldr	r3, [pc, #140]	; (8003efc <_puts_r+0xac>)
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	d117      	bne.n	8003ea2 <_puts_r+0x52>
 8003e72:	686c      	ldr	r4, [r5, #4]
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	071b      	lsls	r3, r3, #28
 8003e78:	d51d      	bpl.n	8003eb6 <_puts_r+0x66>
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	b1db      	cbz	r3, 8003eb6 <_puts_r+0x66>
 8003e7e:	3e01      	subs	r6, #1
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e86:	3b01      	subs	r3, #1
 8003e88:	60a3      	str	r3, [r4, #8]
 8003e8a:	b9e9      	cbnz	r1, 8003ec8 <_puts_r+0x78>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da2e      	bge.n	8003eee <_puts_r+0x9e>
 8003e90:	4622      	mov	r2, r4
 8003e92:	210a      	movs	r1, #10
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 f8e3 	bl	8004060 <__swbuf_r>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d011      	beq.n	8003ec2 <_puts_r+0x72>
 8003e9e:	200a      	movs	r0, #10
 8003ea0:	bd70      	pop	{r4, r5, r6, pc}
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <_puts_r+0xb0>)
 8003ea4:	429c      	cmp	r4, r3
 8003ea6:	d101      	bne.n	8003eac <_puts_r+0x5c>
 8003ea8:	68ac      	ldr	r4, [r5, #8]
 8003eaa:	e7e3      	b.n	8003e74 <_puts_r+0x24>
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <_puts_r+0xb4>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	bf08      	it	eq
 8003eb2:	68ec      	ldreq	r4, [r5, #12]
 8003eb4:	e7de      	b.n	8003e74 <_puts_r+0x24>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f935 	bl	8004128 <__swsetup_r>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d0dd      	beq.n	8003e7e <_puts_r+0x2e>
 8003ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da04      	bge.n	8003ed6 <_puts_r+0x86>
 8003ecc:	69a2      	ldr	r2, [r4, #24]
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	db06      	blt.n	8003ee0 <_puts_r+0x90>
 8003ed2:	290a      	cmp	r1, #10
 8003ed4:	d004      	beq.n	8003ee0 <_puts_r+0x90>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	6022      	str	r2, [r4, #0]
 8003edc:	7019      	strb	r1, [r3, #0]
 8003ede:	e7cf      	b.n	8003e80 <_puts_r+0x30>
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f8bc 	bl	8004060 <__swbuf_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d1c9      	bne.n	8003e80 <_puts_r+0x30>
 8003eec:	e7e9      	b.n	8003ec2 <_puts_r+0x72>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	200a      	movs	r0, #10
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	6022      	str	r2, [r4, #0]
 8003ef6:	7018      	strb	r0, [r3, #0]
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	bf00      	nop
 8003efc:	080069d8 	.word	0x080069d8
 8003f00:	080069f8 	.word	0x080069f8
 8003f04:	080069b8 	.word	0x080069b8

08003f08 <puts>:
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <puts+0xc>)
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f7ff bf9f 	b.w	8003e50 <_puts_r>
 8003f12:	bf00      	nop
 8003f14:	20000020 	.word	0x20000020

08003f18 <sniprintf>:
 8003f18:	b40c      	push	{r2, r3}
 8003f1a:	b530      	push	{r4, r5, lr}
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <sniprintf+0x64>)
 8003f1e:	1e0c      	subs	r4, r1, #0
 8003f20:	b09d      	sub	sp, #116	; 0x74
 8003f22:	681d      	ldr	r5, [r3, #0]
 8003f24:	da08      	bge.n	8003f38 <sniprintf+0x20>
 8003f26:	238b      	movs	r3, #139	; 0x8b
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2e:	b01d      	add	sp, #116	; 0x74
 8003f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f34:	b002      	add	sp, #8
 8003f36:	4770      	bx	lr
 8003f38:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f40:	bf14      	ite	ne
 8003f42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f46:	4623      	moveq	r3, r4
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	9307      	str	r3, [sp, #28]
 8003f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f50:	9002      	str	r0, [sp, #8]
 8003f52:	9006      	str	r0, [sp, #24]
 8003f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f5a:	ab21      	add	r3, sp, #132	; 0x84
 8003f5c:	a902      	add	r1, sp, #8
 8003f5e:	4628      	mov	r0, r5
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	f000 fc61 	bl	8004828 <_svfiprintf_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	bfbc      	itt	lt
 8003f6a:	238b      	movlt	r3, #139	; 0x8b
 8003f6c:	602b      	strlt	r3, [r5, #0]
 8003f6e:	2c00      	cmp	r4, #0
 8003f70:	d0dd      	beq.n	8003f2e <sniprintf+0x16>
 8003f72:	9b02      	ldr	r3, [sp, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e7d9      	b.n	8003f2e <sniprintf+0x16>
 8003f7a:	bf00      	nop
 8003f7c:	20000020 	.word	0x20000020

08003f80 <siscanf>:
 8003f80:	b40e      	push	{r1, r2, r3}
 8003f82:	b530      	push	{r4, r5, lr}
 8003f84:	b09c      	sub	sp, #112	; 0x70
 8003f86:	ac1f      	add	r4, sp, #124	; 0x7c
 8003f88:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003f8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f90:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003f94:	9002      	str	r0, [sp, #8]
 8003f96:	9006      	str	r0, [sp, #24]
 8003f98:	f7fc f93a 	bl	8000210 <strlen>
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <siscanf+0x4c>)
 8003f9e:	9003      	str	r0, [sp, #12]
 8003fa0:	9007      	str	r0, [sp, #28]
 8003fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fa4:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <siscanf+0x50>)
 8003fa6:	9401      	str	r4, [sp, #4]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fac:	9314      	str	r3, [sp, #80]	; 0x50
 8003fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	4623      	mov	r3, r4
 8003fba:	a902      	add	r1, sp, #8
 8003fbc:	6800      	ldr	r0, [r0, #0]
 8003fbe:	f000 fd81 	bl	8004ac4 <__ssvfiscanf_r>
 8003fc2:	b01c      	add	sp, #112	; 0x70
 8003fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc8:	b003      	add	sp, #12
 8003fca:	4770      	bx	lr
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	20000020 	.word	0x20000020

08003fd4 <__sread>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	f001 f9b4 	bl	8005348 <_read_r>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	bfab      	itete	ge
 8003fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fe8:	181b      	addge	r3, r3, r0
 8003fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fee:	bfac      	ite	ge
 8003ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ff2:	81a3      	strhlt	r3, [r4, #12]
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <__seofread>:
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	4770      	bx	lr

08003ffa <__swrite>:
 8003ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffe:	461f      	mov	r7, r3
 8004000:	898b      	ldrh	r3, [r1, #12]
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	4605      	mov	r5, r0
 8004006:	460c      	mov	r4, r1
 8004008:	4616      	mov	r6, r2
 800400a:	d505      	bpl.n	8004018 <__swrite+0x1e>
 800400c:	2302      	movs	r3, #2
 800400e:	2200      	movs	r2, #0
 8004010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004014:	f000 fa82 	bl	800451c <_lseek_r>
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800401e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004022:	81a3      	strh	r3, [r4, #12]
 8004024:	4632      	mov	r2, r6
 8004026:	463b      	mov	r3, r7
 8004028:	4628      	mov	r0, r5
 800402a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800402e:	f000 b869 	b.w	8004104 <_write_r>

08004032 <__sseek>:
 8004032:	b510      	push	{r4, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403a:	f000 fa6f 	bl	800451c <_lseek_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	bf15      	itete	ne
 8004044:	6560      	strne	r0, [r4, #84]	; 0x54
 8004046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800404a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800404e:	81a3      	strheq	r3, [r4, #12]
 8004050:	bf18      	it	ne
 8004052:	81a3      	strhne	r3, [r4, #12]
 8004054:	bd10      	pop	{r4, pc}

08004056 <__sclose>:
 8004056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405a:	f000 b8d3 	b.w	8004204 <_close_r>
	...

08004060 <__swbuf_r>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	460e      	mov	r6, r1
 8004064:	4614      	mov	r4, r2
 8004066:	4605      	mov	r5, r0
 8004068:	b118      	cbz	r0, 8004072 <__swbuf_r+0x12>
 800406a:	6983      	ldr	r3, [r0, #24]
 800406c:	b90b      	cbnz	r3, 8004072 <__swbuf_r+0x12>
 800406e:	f000 f9cb 	bl	8004408 <__sinit>
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <__swbuf_r+0x98>)
 8004074:	429c      	cmp	r4, r3
 8004076:	d12a      	bne.n	80040ce <__swbuf_r+0x6e>
 8004078:	686c      	ldr	r4, [r5, #4]
 800407a:	69a3      	ldr	r3, [r4, #24]
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	071a      	lsls	r2, r3, #28
 8004082:	d52e      	bpl.n	80040e2 <__swbuf_r+0x82>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	b363      	cbz	r3, 80040e2 <__swbuf_r+0x82>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	6820      	ldr	r0, [r4, #0]
 800408c:	1ac0      	subs	r0, r0, r3
 800408e:	6963      	ldr	r3, [r4, #20]
 8004090:	b2f6      	uxtb	r6, r6
 8004092:	4298      	cmp	r0, r3
 8004094:	4637      	mov	r7, r6
 8004096:	db04      	blt.n	80040a2 <__swbuf_r+0x42>
 8004098:	4621      	mov	r1, r4
 800409a:	4628      	mov	r0, r5
 800409c:	f000 f94a 	bl	8004334 <_fflush_r>
 80040a0:	bb28      	cbnz	r0, 80040ee <__swbuf_r+0x8e>
 80040a2:	68a3      	ldr	r3, [r4, #8]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	6022      	str	r2, [r4, #0]
 80040ae:	701e      	strb	r6, [r3, #0]
 80040b0:	6963      	ldr	r3, [r4, #20]
 80040b2:	3001      	adds	r0, #1
 80040b4:	4298      	cmp	r0, r3
 80040b6:	d004      	beq.n	80040c2 <__swbuf_r+0x62>
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d519      	bpl.n	80040f2 <__swbuf_r+0x92>
 80040be:	2e0a      	cmp	r6, #10
 80040c0:	d117      	bne.n	80040f2 <__swbuf_r+0x92>
 80040c2:	4621      	mov	r1, r4
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f935 	bl	8004334 <_fflush_r>
 80040ca:	b190      	cbz	r0, 80040f2 <__swbuf_r+0x92>
 80040cc:	e00f      	b.n	80040ee <__swbuf_r+0x8e>
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <__swbuf_r+0x9c>)
 80040d0:	429c      	cmp	r4, r3
 80040d2:	d101      	bne.n	80040d8 <__swbuf_r+0x78>
 80040d4:	68ac      	ldr	r4, [r5, #8]
 80040d6:	e7d0      	b.n	800407a <__swbuf_r+0x1a>
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <__swbuf_r+0xa0>)
 80040da:	429c      	cmp	r4, r3
 80040dc:	bf08      	it	eq
 80040de:	68ec      	ldreq	r4, [r5, #12]
 80040e0:	e7cb      	b.n	800407a <__swbuf_r+0x1a>
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f81f 	bl	8004128 <__swsetup_r>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d0cc      	beq.n	8004088 <__swbuf_r+0x28>
 80040ee:	f04f 37ff 	mov.w	r7, #4294967295
 80040f2:	4638      	mov	r0, r7
 80040f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	080069d8 	.word	0x080069d8
 80040fc:	080069f8 	.word	0x080069f8
 8004100:	080069b8 	.word	0x080069b8

08004104 <_write_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4c07      	ldr	r4, [pc, #28]	; (8004124 <_write_r+0x20>)
 8004108:	4605      	mov	r5, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	6022      	str	r2, [r4, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7ff fb4e 	bl	80037b4 <_write>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_write_r+0x1e>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	b103      	cbz	r3, 8004122 <_write_r+0x1e>
 8004120:	602b      	str	r3, [r5, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	2000048c 	.word	0x2000048c

08004128 <__swsetup_r>:
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <__swsetup_r+0xcc>)
 800412a:	b570      	push	{r4, r5, r6, lr}
 800412c:	681d      	ldr	r5, [r3, #0]
 800412e:	4606      	mov	r6, r0
 8004130:	460c      	mov	r4, r1
 8004132:	b125      	cbz	r5, 800413e <__swsetup_r+0x16>
 8004134:	69ab      	ldr	r3, [r5, #24]
 8004136:	b913      	cbnz	r3, 800413e <__swsetup_r+0x16>
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f965 	bl	8004408 <__sinit>
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <__swsetup_r+0xd0>)
 8004140:	429c      	cmp	r4, r3
 8004142:	d10f      	bne.n	8004164 <__swsetup_r+0x3c>
 8004144:	686c      	ldr	r4, [r5, #4]
 8004146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800414a:	b29a      	uxth	r2, r3
 800414c:	0715      	lsls	r5, r2, #28
 800414e:	d42c      	bmi.n	80041aa <__swsetup_r+0x82>
 8004150:	06d0      	lsls	r0, r2, #27
 8004152:	d411      	bmi.n	8004178 <__swsetup_r+0x50>
 8004154:	2209      	movs	r2, #9
 8004156:	6032      	str	r2, [r6, #0]
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	f04f 30ff 	mov.w	r0, #4294967295
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <__swsetup_r+0xd4>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d101      	bne.n	800416e <__swsetup_r+0x46>
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	e7eb      	b.n	8004146 <__swsetup_r+0x1e>
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <__swsetup_r+0xd8>)
 8004170:	429c      	cmp	r4, r3
 8004172:	bf08      	it	eq
 8004174:	68ec      	ldreq	r4, [r5, #12]
 8004176:	e7e6      	b.n	8004146 <__swsetup_r+0x1e>
 8004178:	0751      	lsls	r1, r2, #29
 800417a:	d512      	bpl.n	80041a2 <__swsetup_r+0x7a>
 800417c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800417e:	b141      	cbz	r1, 8004192 <__swsetup_r+0x6a>
 8004180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004184:	4299      	cmp	r1, r3
 8004186:	d002      	beq.n	800418e <__swsetup_r+0x66>
 8004188:	4630      	mov	r0, r6
 800418a:	f000 fa45 	bl	8004618 <_free_r>
 800418e:	2300      	movs	r3, #0
 8004190:	6363      	str	r3, [r4, #52]	; 0x34
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	2300      	movs	r3, #0
 800419c:	6063      	str	r3, [r4, #4]
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	b94b      	cbnz	r3, 80041c2 <__swsetup_r+0x9a>
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d003      	beq.n	80041c2 <__swsetup_r+0x9a>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 f9e3 	bl	8004588 <__smakebuf_r>
 80041c2:	89a2      	ldrh	r2, [r4, #12]
 80041c4:	f012 0301 	ands.w	r3, r2, #1
 80041c8:	d00c      	beq.n	80041e4 <__swsetup_r+0xbc>
 80041ca:	2300      	movs	r3, #0
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	6963      	ldr	r3, [r4, #20]
 80041d0:	425b      	negs	r3, r3
 80041d2:	61a3      	str	r3, [r4, #24]
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b953      	cbnz	r3, 80041ee <__swsetup_r+0xc6>
 80041d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041e0:	d1ba      	bne.n	8004158 <__swsetup_r+0x30>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	0792      	lsls	r2, r2, #30
 80041e6:	bf58      	it	pl
 80041e8:	6963      	ldrpl	r3, [r4, #20]
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	e7f2      	b.n	80041d4 <__swsetup_r+0xac>
 80041ee:	2000      	movs	r0, #0
 80041f0:	e7f7      	b.n	80041e2 <__swsetup_r+0xba>
 80041f2:	bf00      	nop
 80041f4:	20000020 	.word	0x20000020
 80041f8:	080069d8 	.word	0x080069d8
 80041fc:	080069f8 	.word	0x080069f8
 8004200:	080069b8 	.word	0x080069b8

08004204 <_close_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4c06      	ldr	r4, [pc, #24]	; (8004220 <_close_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4605      	mov	r5, r0
 800420c:	4608      	mov	r0, r1
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	f7ff faf8 	bl	8003804 <_close>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_close_r+0x1a>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b103      	cbz	r3, 800421e <_close_r+0x1a>
 800421c:	602b      	str	r3, [r5, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	2000048c 	.word	0x2000048c

08004224 <__sflush_r>:
 8004224:	898a      	ldrh	r2, [r1, #12]
 8004226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800422a:	4605      	mov	r5, r0
 800422c:	0710      	lsls	r0, r2, #28
 800422e:	460c      	mov	r4, r1
 8004230:	d45a      	bmi.n	80042e8 <__sflush_r+0xc4>
 8004232:	684b      	ldr	r3, [r1, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	dc05      	bgt.n	8004244 <__sflush_r+0x20>
 8004238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	dc02      	bgt.n	8004244 <__sflush_r+0x20>
 800423e:	2000      	movs	r0, #0
 8004240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004246:	2e00      	cmp	r6, #0
 8004248:	d0f9      	beq.n	800423e <__sflush_r+0x1a>
 800424a:	2300      	movs	r3, #0
 800424c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004250:	682f      	ldr	r7, [r5, #0]
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	d033      	beq.n	80042be <__sflush_r+0x9a>
 8004256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	075a      	lsls	r2, r3, #29
 800425c:	d505      	bpl.n	800426a <__sflush_r+0x46>
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	1ac0      	subs	r0, r0, r3
 8004262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004264:	b10b      	cbz	r3, 800426a <__sflush_r+0x46>
 8004266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004268:	1ac0      	subs	r0, r0, r3
 800426a:	2300      	movs	r3, #0
 800426c:	4602      	mov	r2, r0
 800426e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004270:	6a21      	ldr	r1, [r4, #32]
 8004272:	4628      	mov	r0, r5
 8004274:	47b0      	blx	r6
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	d106      	bne.n	800428a <__sflush_r+0x66>
 800427c:	6829      	ldr	r1, [r5, #0]
 800427e:	291d      	cmp	r1, #29
 8004280:	d84b      	bhi.n	800431a <__sflush_r+0xf6>
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <__sflush_r+0x10c>)
 8004284:	40ca      	lsrs	r2, r1
 8004286:	07d6      	lsls	r6, r2, #31
 8004288:	d547      	bpl.n	800431a <__sflush_r+0xf6>
 800428a:	2200      	movs	r2, #0
 800428c:	6062      	str	r2, [r4, #4]
 800428e:	04d9      	lsls	r1, r3, #19
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	6022      	str	r2, [r4, #0]
 8004294:	d504      	bpl.n	80042a0 <__sflush_r+0x7c>
 8004296:	1c42      	adds	r2, r0, #1
 8004298:	d101      	bne.n	800429e <__sflush_r+0x7a>
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	b903      	cbnz	r3, 80042a0 <__sflush_r+0x7c>
 800429e:	6560      	str	r0, [r4, #84]	; 0x54
 80042a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a2:	602f      	str	r7, [r5, #0]
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d0ca      	beq.n	800423e <__sflush_r+0x1a>
 80042a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042ac:	4299      	cmp	r1, r3
 80042ae:	d002      	beq.n	80042b6 <__sflush_r+0x92>
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f9b1 	bl	8004618 <_free_r>
 80042b6:	2000      	movs	r0, #0
 80042b8:	6360      	str	r0, [r4, #52]	; 0x34
 80042ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042be:	6a21      	ldr	r1, [r4, #32]
 80042c0:	2301      	movs	r3, #1
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b0      	blx	r6
 80042c6:	1c41      	adds	r1, r0, #1
 80042c8:	d1c6      	bne.n	8004258 <__sflush_r+0x34>
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0c3      	beq.n	8004258 <__sflush_r+0x34>
 80042d0:	2b1d      	cmp	r3, #29
 80042d2:	d001      	beq.n	80042d8 <__sflush_r+0xb4>
 80042d4:	2b16      	cmp	r3, #22
 80042d6:	d101      	bne.n	80042dc <__sflush_r+0xb8>
 80042d8:	602f      	str	r7, [r5, #0]
 80042da:	e7b0      	b.n	800423e <__sflush_r+0x1a>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e8:	690f      	ldr	r7, [r1, #16]
 80042ea:	2f00      	cmp	r7, #0
 80042ec:	d0a7      	beq.n	800423e <__sflush_r+0x1a>
 80042ee:	0793      	lsls	r3, r2, #30
 80042f0:	680e      	ldr	r6, [r1, #0]
 80042f2:	bf08      	it	eq
 80042f4:	694b      	ldreq	r3, [r1, #20]
 80042f6:	600f      	str	r7, [r1, #0]
 80042f8:	bf18      	it	ne
 80042fa:	2300      	movne	r3, #0
 80042fc:	eba6 0807 	sub.w	r8, r6, r7
 8004300:	608b      	str	r3, [r1, #8]
 8004302:	f1b8 0f00 	cmp.w	r8, #0
 8004306:	dd9a      	ble.n	800423e <__sflush_r+0x1a>
 8004308:	4643      	mov	r3, r8
 800430a:	463a      	mov	r2, r7
 800430c:	6a21      	ldr	r1, [r4, #32]
 800430e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004310:	4628      	mov	r0, r5
 8004312:	47b0      	blx	r6
 8004314:	2800      	cmp	r0, #0
 8004316:	dc07      	bgt.n	8004328 <__sflush_r+0x104>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431e:	81a3      	strh	r3, [r4, #12]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004328:	4407      	add	r7, r0
 800432a:	eba8 0800 	sub.w	r8, r8, r0
 800432e:	e7e8      	b.n	8004302 <__sflush_r+0xde>
 8004330:	20400001 	.word	0x20400001

08004334 <_fflush_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	690b      	ldr	r3, [r1, #16]
 8004338:	4605      	mov	r5, r0
 800433a:	460c      	mov	r4, r1
 800433c:	b1db      	cbz	r3, 8004376 <_fflush_r+0x42>
 800433e:	b118      	cbz	r0, 8004348 <_fflush_r+0x14>
 8004340:	6983      	ldr	r3, [r0, #24]
 8004342:	b90b      	cbnz	r3, 8004348 <_fflush_r+0x14>
 8004344:	f000 f860 	bl	8004408 <__sinit>
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <_fflush_r+0x48>)
 800434a:	429c      	cmp	r4, r3
 800434c:	d109      	bne.n	8004362 <_fflush_r+0x2e>
 800434e:	686c      	ldr	r4, [r5, #4]
 8004350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004354:	b17b      	cbz	r3, 8004376 <_fflush_r+0x42>
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800435e:	f7ff bf61 	b.w	8004224 <__sflush_r>
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <_fflush_r+0x4c>)
 8004364:	429c      	cmp	r4, r3
 8004366:	d101      	bne.n	800436c <_fflush_r+0x38>
 8004368:	68ac      	ldr	r4, [r5, #8]
 800436a:	e7f1      	b.n	8004350 <_fflush_r+0x1c>
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <_fflush_r+0x50>)
 800436e:	429c      	cmp	r4, r3
 8004370:	bf08      	it	eq
 8004372:	68ec      	ldreq	r4, [r5, #12]
 8004374:	e7ec      	b.n	8004350 <_fflush_r+0x1c>
 8004376:	2000      	movs	r0, #0
 8004378:	bd38      	pop	{r3, r4, r5, pc}
 800437a:	bf00      	nop
 800437c:	080069d8 	.word	0x080069d8
 8004380:	080069f8 	.word	0x080069f8
 8004384:	080069b8 	.word	0x080069b8

08004388 <_cleanup_r>:
 8004388:	4901      	ldr	r1, [pc, #4]	; (8004390 <_cleanup_r+0x8>)
 800438a:	f000 b8a9 	b.w	80044e0 <_fwalk_reent>
 800438e:	bf00      	nop
 8004390:	08004335 	.word	0x08004335

08004394 <std.isra.0>:
 8004394:	2300      	movs	r3, #0
 8004396:	b510      	push	{r4, lr}
 8004398:	4604      	mov	r4, r0
 800439a:	6003      	str	r3, [r0, #0]
 800439c:	6043      	str	r3, [r0, #4]
 800439e:	6083      	str	r3, [r0, #8]
 80043a0:	8181      	strh	r1, [r0, #12]
 80043a2:	6643      	str	r3, [r0, #100]	; 0x64
 80043a4:	81c2      	strh	r2, [r0, #14]
 80043a6:	6103      	str	r3, [r0, #16]
 80043a8:	6143      	str	r3, [r0, #20]
 80043aa:	6183      	str	r3, [r0, #24]
 80043ac:	4619      	mov	r1, r3
 80043ae:	2208      	movs	r2, #8
 80043b0:	305c      	adds	r0, #92	; 0x5c
 80043b2:	f000 f929 	bl	8004608 <memset>
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <std.isra.0+0x38>)
 80043b8:	6263      	str	r3, [r4, #36]	; 0x24
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <std.isra.0+0x3c>)
 80043bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <std.isra.0+0x40>)
 80043c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <std.isra.0+0x44>)
 80043c4:	6224      	str	r4, [r4, #32]
 80043c6:	6323      	str	r3, [r4, #48]	; 0x30
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	bf00      	nop
 80043cc:	08003fd5 	.word	0x08003fd5
 80043d0:	08003ffb 	.word	0x08003ffb
 80043d4:	08004033 	.word	0x08004033
 80043d8:	08004057 	.word	0x08004057

080043dc <__sfmoreglue>:
 80043dc:	b570      	push	{r4, r5, r6, lr}
 80043de:	1e4a      	subs	r2, r1, #1
 80043e0:	2568      	movs	r5, #104	; 0x68
 80043e2:	4355      	muls	r5, r2
 80043e4:	460e      	mov	r6, r1
 80043e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043ea:	f000 f963 	bl	80046b4 <_malloc_r>
 80043ee:	4604      	mov	r4, r0
 80043f0:	b140      	cbz	r0, 8004404 <__sfmoreglue+0x28>
 80043f2:	2100      	movs	r1, #0
 80043f4:	e880 0042 	stmia.w	r0, {r1, r6}
 80043f8:	300c      	adds	r0, #12
 80043fa:	60a0      	str	r0, [r4, #8]
 80043fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004400:	f000 f902 	bl	8004608 <memset>
 8004404:	4620      	mov	r0, r4
 8004406:	bd70      	pop	{r4, r5, r6, pc}

08004408 <__sinit>:
 8004408:	6983      	ldr	r3, [r0, #24]
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
 800440e:	bb33      	cbnz	r3, 800445e <__sinit+0x56>
 8004410:	6483      	str	r3, [r0, #72]	; 0x48
 8004412:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004414:	6503      	str	r3, [r0, #80]	; 0x50
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <__sinit+0x58>)
 8004418:	4a12      	ldr	r2, [pc, #72]	; (8004464 <__sinit+0x5c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6282      	str	r2, [r0, #40]	; 0x28
 800441e:	4298      	cmp	r0, r3
 8004420:	bf04      	itt	eq
 8004422:	2301      	moveq	r3, #1
 8004424:	6183      	streq	r3, [r0, #24]
 8004426:	f000 f81f 	bl	8004468 <__sfp>
 800442a:	6060      	str	r0, [r4, #4]
 800442c:	4620      	mov	r0, r4
 800442e:	f000 f81b 	bl	8004468 <__sfp>
 8004432:	60a0      	str	r0, [r4, #8]
 8004434:	4620      	mov	r0, r4
 8004436:	f000 f817 	bl	8004468 <__sfp>
 800443a:	2200      	movs	r2, #0
 800443c:	60e0      	str	r0, [r4, #12]
 800443e:	2104      	movs	r1, #4
 8004440:	6860      	ldr	r0, [r4, #4]
 8004442:	f7ff ffa7 	bl	8004394 <std.isra.0>
 8004446:	2201      	movs	r2, #1
 8004448:	2109      	movs	r1, #9
 800444a:	68a0      	ldr	r0, [r4, #8]
 800444c:	f7ff ffa2 	bl	8004394 <std.isra.0>
 8004450:	2202      	movs	r2, #2
 8004452:	2112      	movs	r1, #18
 8004454:	68e0      	ldr	r0, [r4, #12]
 8004456:	f7ff ff9d 	bl	8004394 <std.isra.0>
 800445a:	2301      	movs	r3, #1
 800445c:	61a3      	str	r3, [r4, #24]
 800445e:	bd10      	pop	{r4, pc}
 8004460:	08006a18 	.word	0x08006a18
 8004464:	08004389 	.word	0x08004389

08004468 <__sfp>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <__sfp+0x74>)
 800446c:	681e      	ldr	r6, [r3, #0]
 800446e:	69b3      	ldr	r3, [r6, #24]
 8004470:	4607      	mov	r7, r0
 8004472:	b913      	cbnz	r3, 800447a <__sfp+0x12>
 8004474:	4630      	mov	r0, r6
 8004476:	f7ff ffc7 	bl	8004408 <__sinit>
 800447a:	3648      	adds	r6, #72	; 0x48
 800447c:	68b4      	ldr	r4, [r6, #8]
 800447e:	6873      	ldr	r3, [r6, #4]
 8004480:	3b01      	subs	r3, #1
 8004482:	d503      	bpl.n	800448c <__sfp+0x24>
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	b133      	cbz	r3, 8004496 <__sfp+0x2e>
 8004488:	6836      	ldr	r6, [r6, #0]
 800448a:	e7f7      	b.n	800447c <__sfp+0x14>
 800448c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004490:	b16d      	cbz	r5, 80044ae <__sfp+0x46>
 8004492:	3468      	adds	r4, #104	; 0x68
 8004494:	e7f4      	b.n	8004480 <__sfp+0x18>
 8004496:	2104      	movs	r1, #4
 8004498:	4638      	mov	r0, r7
 800449a:	f7ff ff9f 	bl	80043dc <__sfmoreglue>
 800449e:	6030      	str	r0, [r6, #0]
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1f1      	bne.n	8004488 <__sfp+0x20>
 80044a4:	230c      	movs	r3, #12
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4604      	mov	r4, r0
 80044aa:	4620      	mov	r0, r4
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b2:	81e3      	strh	r3, [r4, #14]
 80044b4:	2301      	movs	r3, #1
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	6665      	str	r5, [r4, #100]	; 0x64
 80044ba:	6025      	str	r5, [r4, #0]
 80044bc:	60a5      	str	r5, [r4, #8]
 80044be:	6065      	str	r5, [r4, #4]
 80044c0:	6125      	str	r5, [r4, #16]
 80044c2:	6165      	str	r5, [r4, #20]
 80044c4:	61a5      	str	r5, [r4, #24]
 80044c6:	2208      	movs	r2, #8
 80044c8:	4629      	mov	r1, r5
 80044ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ce:	f000 f89b 	bl	8004608 <memset>
 80044d2:	6365      	str	r5, [r4, #52]	; 0x34
 80044d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80044d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80044d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80044da:	e7e6      	b.n	80044aa <__sfp+0x42>
 80044dc:	08006a18 	.word	0x08006a18

080044e0 <_fwalk_reent>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	4680      	mov	r8, r0
 80044e6:	4689      	mov	r9, r1
 80044e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044ec:	2600      	movs	r6, #0
 80044ee:	b914      	cbnz	r4, 80044f6 <_fwalk_reent+0x16>
 80044f0:	4630      	mov	r0, r6
 80044f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f6:	68a5      	ldr	r5, [r4, #8]
 80044f8:	6867      	ldr	r7, [r4, #4]
 80044fa:	3f01      	subs	r7, #1
 80044fc:	d501      	bpl.n	8004502 <_fwalk_reent+0x22>
 80044fe:	6824      	ldr	r4, [r4, #0]
 8004500:	e7f5      	b.n	80044ee <_fwalk_reent+0xe>
 8004502:	89ab      	ldrh	r3, [r5, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d907      	bls.n	8004518 <_fwalk_reent+0x38>
 8004508:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800450c:	3301      	adds	r3, #1
 800450e:	d003      	beq.n	8004518 <_fwalk_reent+0x38>
 8004510:	4629      	mov	r1, r5
 8004512:	4640      	mov	r0, r8
 8004514:	47c8      	blx	r9
 8004516:	4306      	orrs	r6, r0
 8004518:	3568      	adds	r5, #104	; 0x68
 800451a:	e7ee      	b.n	80044fa <_fwalk_reent+0x1a>

0800451c <_lseek_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4c07      	ldr	r4, [pc, #28]	; (800453c <_lseek_r+0x20>)
 8004520:	4605      	mov	r5, r0
 8004522:	4608      	mov	r0, r1
 8004524:	4611      	mov	r1, r2
 8004526:	2200      	movs	r2, #0
 8004528:	6022      	str	r2, [r4, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7ff f982 	bl	8003834 <_lseek>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_lseek_r+0x1e>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	b103      	cbz	r3, 800453a <_lseek_r+0x1e>
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	2000048c 	.word	0x2000048c

08004540 <__swhatbuf_r>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	460e      	mov	r6, r1
 8004544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004548:	2900      	cmp	r1, #0
 800454a:	b090      	sub	sp, #64	; 0x40
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	da07      	bge.n	8004562 <__swhatbuf_r+0x22>
 8004552:	2300      	movs	r3, #0
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	89b3      	ldrh	r3, [r6, #12]
 8004558:	061a      	lsls	r2, r3, #24
 800455a:	d410      	bmi.n	800457e <__swhatbuf_r+0x3e>
 800455c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004560:	e00e      	b.n	8004580 <__swhatbuf_r+0x40>
 8004562:	aa01      	add	r2, sp, #4
 8004564:	f001 f8a0 	bl	80056a8 <_fstat_r>
 8004568:	2800      	cmp	r0, #0
 800456a:	dbf2      	blt.n	8004552 <__swhatbuf_r+0x12>
 800456c:	9a02      	ldr	r2, [sp, #8]
 800456e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004576:	425a      	negs	r2, r3
 8004578:	415a      	adcs	r2, r3
 800457a:	602a      	str	r2, [r5, #0]
 800457c:	e7ee      	b.n	800455c <__swhatbuf_r+0x1c>
 800457e:	2340      	movs	r3, #64	; 0x40
 8004580:	2000      	movs	r0, #0
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	b010      	add	sp, #64	; 0x40
 8004586:	bd70      	pop	{r4, r5, r6, pc}

08004588 <__smakebuf_r>:
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800458c:	079d      	lsls	r5, r3, #30
 800458e:	4606      	mov	r6, r0
 8004590:	460c      	mov	r4, r1
 8004592:	d507      	bpl.n	80045a4 <__smakebuf_r+0x1c>
 8004594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	6123      	str	r3, [r4, #16]
 800459c:	2301      	movs	r3, #1
 800459e:	6163      	str	r3, [r4, #20]
 80045a0:	b002      	add	sp, #8
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	ab01      	add	r3, sp, #4
 80045a6:	466a      	mov	r2, sp
 80045a8:	f7ff ffca 	bl	8004540 <__swhatbuf_r>
 80045ac:	9900      	ldr	r1, [sp, #0]
 80045ae:	4605      	mov	r5, r0
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f87f 	bl	80046b4 <_malloc_r>
 80045b6:	b948      	cbnz	r0, 80045cc <__smakebuf_r+0x44>
 80045b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045bc:	059a      	lsls	r2, r3, #22
 80045be:	d4ef      	bmi.n	80045a0 <__smakebuf_r+0x18>
 80045c0:	f023 0303 	bic.w	r3, r3, #3
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	e7e3      	b.n	8004594 <__smakebuf_r+0xc>
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <__smakebuf_r+0x7c>)
 80045ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	6020      	str	r0, [r4, #0]
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	9b00      	ldr	r3, [sp, #0]
 80045dc:	6163      	str	r3, [r4, #20]
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	6120      	str	r0, [r4, #16]
 80045e2:	b15b      	cbz	r3, 80045fc <__smakebuf_r+0x74>
 80045e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e8:	4630      	mov	r0, r6
 80045ea:	f001 f86f 	bl	80056cc <_isatty_r>
 80045ee:	b128      	cbz	r0, 80045fc <__smakebuf_r+0x74>
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	81a3      	strh	r3, [r4, #12]
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	431d      	orrs	r5, r3
 8004600:	81a5      	strh	r5, [r4, #12]
 8004602:	e7cd      	b.n	80045a0 <__smakebuf_r+0x18>
 8004604:	08004389 	.word	0x08004389

08004608 <memset>:
 8004608:	4402      	add	r2, r0
 800460a:	4603      	mov	r3, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	d100      	bne.n	8004612 <memset+0xa>
 8004610:	4770      	bx	lr
 8004612:	f803 1b01 	strb.w	r1, [r3], #1
 8004616:	e7f9      	b.n	800460c <memset+0x4>

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d045      	beq.n	80046ac <_free_r+0x94>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f001 f8a7 	bl	800577e <__malloc_lock>
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <_free_r+0x98>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	4610      	mov	r0, r2
 8004636:	b933      	cbnz	r3, 8004646 <_free_r+0x2e>
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	6014      	str	r4, [r2, #0]
 800463c:	4628      	mov	r0, r5
 800463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004642:	f001 b89d 	b.w	8005780 <__malloc_unlock>
 8004646:	42a3      	cmp	r3, r4
 8004648:	d90c      	bls.n	8004664 <_free_r+0x4c>
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	1862      	adds	r2, r4, r1
 800464e:	4293      	cmp	r3, r2
 8004650:	bf04      	itt	eq
 8004652:	681a      	ldreq	r2, [r3, #0]
 8004654:	685b      	ldreq	r3, [r3, #4]
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	bf04      	itt	eq
 800465a:	1852      	addeq	r2, r2, r1
 800465c:	6022      	streq	r2, [r4, #0]
 800465e:	6004      	str	r4, [r0, #0]
 8004660:	e7ec      	b.n	800463c <_free_r+0x24>
 8004662:	4613      	mov	r3, r2
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	b10a      	cbz	r2, 800466c <_free_r+0x54>
 8004668:	42a2      	cmp	r2, r4
 800466a:	d9fa      	bls.n	8004662 <_free_r+0x4a>
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	1858      	adds	r0, r3, r1
 8004670:	42a0      	cmp	r0, r4
 8004672:	d10b      	bne.n	800468c <_free_r+0x74>
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	4401      	add	r1, r0
 8004678:	1858      	adds	r0, r3, r1
 800467a:	4282      	cmp	r2, r0
 800467c:	6019      	str	r1, [r3, #0]
 800467e:	d1dd      	bne.n	800463c <_free_r+0x24>
 8004680:	6810      	ldr	r0, [r2, #0]
 8004682:	6852      	ldr	r2, [r2, #4]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	4401      	add	r1, r0
 8004688:	6019      	str	r1, [r3, #0]
 800468a:	e7d7      	b.n	800463c <_free_r+0x24>
 800468c:	d902      	bls.n	8004694 <_free_r+0x7c>
 800468e:	230c      	movs	r3, #12
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	e7d3      	b.n	800463c <_free_r+0x24>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	1821      	adds	r1, r4, r0
 8004698:	428a      	cmp	r2, r1
 800469a:	bf04      	itt	eq
 800469c:	6811      	ldreq	r1, [r2, #0]
 800469e:	6852      	ldreq	r2, [r2, #4]
 80046a0:	6062      	str	r2, [r4, #4]
 80046a2:	bf04      	itt	eq
 80046a4:	1809      	addeq	r1, r1, r0
 80046a6:	6021      	streq	r1, [r4, #0]
 80046a8:	605c      	str	r4, [r3, #4]
 80046aa:	e7c7      	b.n	800463c <_free_r+0x24>
 80046ac:	bd38      	pop	{r3, r4, r5, pc}
 80046ae:	bf00      	nop
 80046b0:	20000238 	.word	0x20000238

080046b4 <_malloc_r>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	1ccd      	adds	r5, r1, #3
 80046b8:	f025 0503 	bic.w	r5, r5, #3
 80046bc:	3508      	adds	r5, #8
 80046be:	2d0c      	cmp	r5, #12
 80046c0:	bf38      	it	cc
 80046c2:	250c      	movcc	r5, #12
 80046c4:	2d00      	cmp	r5, #0
 80046c6:	4606      	mov	r6, r0
 80046c8:	db01      	blt.n	80046ce <_malloc_r+0x1a>
 80046ca:	42a9      	cmp	r1, r5
 80046cc:	d903      	bls.n	80046d6 <_malloc_r+0x22>
 80046ce:	230c      	movs	r3, #12
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	2000      	movs	r0, #0
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	f001 f852 	bl	800577e <__malloc_lock>
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <_malloc_r+0xb4>)
 80046dc:	6814      	ldr	r4, [r2, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	b991      	cbnz	r1, 8004708 <_malloc_r+0x54>
 80046e2:	4c22      	ldr	r4, [pc, #136]	; (800476c <_malloc_r+0xb8>)
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	b91b      	cbnz	r3, 80046f0 <_malloc_r+0x3c>
 80046e8:	4630      	mov	r0, r6
 80046ea:	f000 fe3f 	bl	800536c <_sbrk_r>
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	4629      	mov	r1, r5
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 fe3a 	bl	800536c <_sbrk_r>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d126      	bne.n	800474a <_malloc_r+0x96>
 80046fc:	230c      	movs	r3, #12
 80046fe:	6033      	str	r3, [r6, #0]
 8004700:	4630      	mov	r0, r6
 8004702:	f001 f83d 	bl	8005780 <__malloc_unlock>
 8004706:	e7e4      	b.n	80046d2 <_malloc_r+0x1e>
 8004708:	680b      	ldr	r3, [r1, #0]
 800470a:	1b5b      	subs	r3, r3, r5
 800470c:	d41a      	bmi.n	8004744 <_malloc_r+0x90>
 800470e:	2b0b      	cmp	r3, #11
 8004710:	d90f      	bls.n	8004732 <_malloc_r+0x7e>
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	50cd      	str	r5, [r1, r3]
 8004716:	18cc      	adds	r4, r1, r3
 8004718:	4630      	mov	r0, r6
 800471a:	f001 f831 	bl	8005780 <__malloc_unlock>
 800471e:	f104 000b 	add.w	r0, r4, #11
 8004722:	1d23      	adds	r3, r4, #4
 8004724:	f020 0007 	bic.w	r0, r0, #7
 8004728:	1ac3      	subs	r3, r0, r3
 800472a:	d01b      	beq.n	8004764 <_malloc_r+0xb0>
 800472c:	425a      	negs	r2, r3
 800472e:	50e2      	str	r2, [r4, r3]
 8004730:	bd70      	pop	{r4, r5, r6, pc}
 8004732:	428c      	cmp	r4, r1
 8004734:	bf0d      	iteet	eq
 8004736:	6863      	ldreq	r3, [r4, #4]
 8004738:	684b      	ldrne	r3, [r1, #4]
 800473a:	6063      	strne	r3, [r4, #4]
 800473c:	6013      	streq	r3, [r2, #0]
 800473e:	bf18      	it	ne
 8004740:	460c      	movne	r4, r1
 8004742:	e7e9      	b.n	8004718 <_malloc_r+0x64>
 8004744:	460c      	mov	r4, r1
 8004746:	6849      	ldr	r1, [r1, #4]
 8004748:	e7ca      	b.n	80046e0 <_malloc_r+0x2c>
 800474a:	1cc4      	adds	r4, r0, #3
 800474c:	f024 0403 	bic.w	r4, r4, #3
 8004750:	42a0      	cmp	r0, r4
 8004752:	d005      	beq.n	8004760 <_malloc_r+0xac>
 8004754:	1a21      	subs	r1, r4, r0
 8004756:	4630      	mov	r0, r6
 8004758:	f000 fe08 	bl	800536c <_sbrk_r>
 800475c:	3001      	adds	r0, #1
 800475e:	d0cd      	beq.n	80046fc <_malloc_r+0x48>
 8004760:	6025      	str	r5, [r4, #0]
 8004762:	e7d9      	b.n	8004718 <_malloc_r+0x64>
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	bf00      	nop
 8004768:	20000238 	.word	0x20000238
 800476c:	2000023c 	.word	0x2000023c

08004770 <__ssputs_r>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	688e      	ldr	r6, [r1, #8]
 8004776:	429e      	cmp	r6, r3
 8004778:	4682      	mov	sl, r0
 800477a:	460c      	mov	r4, r1
 800477c:	4691      	mov	r9, r2
 800477e:	4698      	mov	r8, r3
 8004780:	d835      	bhi.n	80047ee <__ssputs_r+0x7e>
 8004782:	898a      	ldrh	r2, [r1, #12]
 8004784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004788:	d031      	beq.n	80047ee <__ssputs_r+0x7e>
 800478a:	6825      	ldr	r5, [r4, #0]
 800478c:	6909      	ldr	r1, [r1, #16]
 800478e:	1a6f      	subs	r7, r5, r1
 8004790:	6965      	ldr	r5, [r4, #20]
 8004792:	2302      	movs	r3, #2
 8004794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004798:	fb95 f5f3 	sdiv	r5, r5, r3
 800479c:	f108 0301 	add.w	r3, r8, #1
 80047a0:	443b      	add	r3, r7
 80047a2:	429d      	cmp	r5, r3
 80047a4:	bf38      	it	cc
 80047a6:	461d      	movcc	r5, r3
 80047a8:	0553      	lsls	r3, r2, #21
 80047aa:	d531      	bpl.n	8004810 <__ssputs_r+0xa0>
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7ff ff81 	bl	80046b4 <_malloc_r>
 80047b2:	4606      	mov	r6, r0
 80047b4:	b950      	cbnz	r0, 80047cc <__ssputs_r+0x5c>
 80047b6:	230c      	movs	r3, #12
 80047b8:	f8ca 3000 	str.w	r3, [sl]
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c2:	81a3      	strh	r3, [r4, #12]
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	463a      	mov	r2, r7
 80047ce:	6921      	ldr	r1, [r4, #16]
 80047d0:	f000 ffb0 	bl	8005734 <memcpy>
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	6126      	str	r6, [r4, #16]
 80047e2:	6165      	str	r5, [r4, #20]
 80047e4:	443e      	add	r6, r7
 80047e6:	1bed      	subs	r5, r5, r7
 80047e8:	6026      	str	r6, [r4, #0]
 80047ea:	60a5      	str	r5, [r4, #8]
 80047ec:	4646      	mov	r6, r8
 80047ee:	4546      	cmp	r6, r8
 80047f0:	bf28      	it	cs
 80047f2:	4646      	movcs	r6, r8
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	f000 ffa6 	bl	800574a <memmove>
 80047fe:	68a3      	ldr	r3, [r4, #8]
 8004800:	1b9b      	subs	r3, r3, r6
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	441e      	add	r6, r3
 8004808:	6026      	str	r6, [r4, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	462a      	mov	r2, r5
 8004812:	f000 ffb6 	bl	8005782 <_realloc_r>
 8004816:	4606      	mov	r6, r0
 8004818:	2800      	cmp	r0, #0
 800481a:	d1e1      	bne.n	80047e0 <__ssputs_r+0x70>
 800481c:	6921      	ldr	r1, [r4, #16]
 800481e:	4650      	mov	r0, sl
 8004820:	f7ff fefa 	bl	8004618 <_free_r>
 8004824:	e7c7      	b.n	80047b6 <__ssputs_r+0x46>
	...

08004828 <_svfiprintf_r>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	b09d      	sub	sp, #116	; 0x74
 800482e:	4680      	mov	r8, r0
 8004830:	9303      	str	r3, [sp, #12]
 8004832:	898b      	ldrh	r3, [r1, #12]
 8004834:	061c      	lsls	r4, r3, #24
 8004836:	460d      	mov	r5, r1
 8004838:	4616      	mov	r6, r2
 800483a:	d50f      	bpl.n	800485c <_svfiprintf_r+0x34>
 800483c:	690b      	ldr	r3, [r1, #16]
 800483e:	b96b      	cbnz	r3, 800485c <_svfiprintf_r+0x34>
 8004840:	2140      	movs	r1, #64	; 0x40
 8004842:	f7ff ff37 	bl	80046b4 <_malloc_r>
 8004846:	6028      	str	r0, [r5, #0]
 8004848:	6128      	str	r0, [r5, #16]
 800484a:	b928      	cbnz	r0, 8004858 <_svfiprintf_r+0x30>
 800484c:	230c      	movs	r3, #12
 800484e:	f8c8 3000 	str.w	r3, [r8]
 8004852:	f04f 30ff 	mov.w	r0, #4294967295
 8004856:	e0c5      	b.n	80049e4 <_svfiprintf_r+0x1bc>
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	616b      	str	r3, [r5, #20]
 800485c:	2300      	movs	r3, #0
 800485e:	9309      	str	r3, [sp, #36]	; 0x24
 8004860:	2320      	movs	r3, #32
 8004862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004866:	2330      	movs	r3, #48	; 0x30
 8004868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800486c:	f04f 0b01 	mov.w	fp, #1
 8004870:	4637      	mov	r7, r6
 8004872:	463c      	mov	r4, r7
 8004874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d13c      	bne.n	80048f6 <_svfiprintf_r+0xce>
 800487c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004880:	d00b      	beq.n	800489a <_svfiprintf_r+0x72>
 8004882:	4653      	mov	r3, sl
 8004884:	4632      	mov	r2, r6
 8004886:	4629      	mov	r1, r5
 8004888:	4640      	mov	r0, r8
 800488a:	f7ff ff71 	bl	8004770 <__ssputs_r>
 800488e:	3001      	adds	r0, #1
 8004890:	f000 80a3 	beq.w	80049da <_svfiprintf_r+0x1b2>
 8004894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004896:	4453      	add	r3, sl
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	783b      	ldrb	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 809c 	beq.w	80049da <_svfiprintf_r+0x1b2>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	9304      	str	r3, [sp, #16]
 80048aa:	9307      	str	r3, [sp, #28]
 80048ac:	9205      	str	r2, [sp, #20]
 80048ae:	9306      	str	r3, [sp, #24]
 80048b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b4:	931a      	str	r3, [sp, #104]	; 0x68
 80048b6:	2205      	movs	r2, #5
 80048b8:	7821      	ldrb	r1, [r4, #0]
 80048ba:	4850      	ldr	r0, [pc, #320]	; (80049fc <_svfiprintf_r+0x1d4>)
 80048bc:	f7fb fcb0 	bl	8000220 <memchr>
 80048c0:	1c67      	adds	r7, r4, #1
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	b9d8      	cbnz	r0, 80048fe <_svfiprintf_r+0xd6>
 80048c6:	06d9      	lsls	r1, r3, #27
 80048c8:	bf44      	itt	mi
 80048ca:	2220      	movmi	r2, #32
 80048cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d0:	071a      	lsls	r2, r3, #28
 80048d2:	bf44      	itt	mi
 80048d4:	222b      	movmi	r2, #43	; 0x2b
 80048d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048da:	7822      	ldrb	r2, [r4, #0]
 80048dc:	2a2a      	cmp	r2, #42	; 0x2a
 80048de:	d016      	beq.n	800490e <_svfiprintf_r+0xe6>
 80048e0:	9a07      	ldr	r2, [sp, #28]
 80048e2:	2100      	movs	r1, #0
 80048e4:	200a      	movs	r0, #10
 80048e6:	4627      	mov	r7, r4
 80048e8:	3401      	adds	r4, #1
 80048ea:	783b      	ldrb	r3, [r7, #0]
 80048ec:	3b30      	subs	r3, #48	; 0x30
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d951      	bls.n	8004996 <_svfiprintf_r+0x16e>
 80048f2:	b1c9      	cbz	r1, 8004928 <_svfiprintf_r+0x100>
 80048f4:	e011      	b.n	800491a <_svfiprintf_r+0xf2>
 80048f6:	2b25      	cmp	r3, #37	; 0x25
 80048f8:	d0c0      	beq.n	800487c <_svfiprintf_r+0x54>
 80048fa:	4627      	mov	r7, r4
 80048fc:	e7b9      	b.n	8004872 <_svfiprintf_r+0x4a>
 80048fe:	4a3f      	ldr	r2, [pc, #252]	; (80049fc <_svfiprintf_r+0x1d4>)
 8004900:	1a80      	subs	r0, r0, r2
 8004902:	fa0b f000 	lsl.w	r0, fp, r0
 8004906:	4318      	orrs	r0, r3
 8004908:	9004      	str	r0, [sp, #16]
 800490a:	463c      	mov	r4, r7
 800490c:	e7d3      	b.n	80048b6 <_svfiprintf_r+0x8e>
 800490e:	9a03      	ldr	r2, [sp, #12]
 8004910:	1d11      	adds	r1, r2, #4
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	9103      	str	r1, [sp, #12]
 8004916:	2a00      	cmp	r2, #0
 8004918:	db01      	blt.n	800491e <_svfiprintf_r+0xf6>
 800491a:	9207      	str	r2, [sp, #28]
 800491c:	e004      	b.n	8004928 <_svfiprintf_r+0x100>
 800491e:	4252      	negs	r2, r2
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	9207      	str	r2, [sp, #28]
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	783b      	ldrb	r3, [r7, #0]
 800492a:	2b2e      	cmp	r3, #46	; 0x2e
 800492c:	d10e      	bne.n	800494c <_svfiprintf_r+0x124>
 800492e:	787b      	ldrb	r3, [r7, #1]
 8004930:	2b2a      	cmp	r3, #42	; 0x2a
 8004932:	f107 0101 	add.w	r1, r7, #1
 8004936:	d132      	bne.n	800499e <_svfiprintf_r+0x176>
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	9203      	str	r2, [sp, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	bfb8      	it	lt
 8004944:	f04f 33ff 	movlt.w	r3, #4294967295
 8004948:	3702      	adds	r7, #2
 800494a:	9305      	str	r3, [sp, #20]
 800494c:	4c2c      	ldr	r4, [pc, #176]	; (8004a00 <_svfiprintf_r+0x1d8>)
 800494e:	7839      	ldrb	r1, [r7, #0]
 8004950:	2203      	movs	r2, #3
 8004952:	4620      	mov	r0, r4
 8004954:	f7fb fc64 	bl	8000220 <memchr>
 8004958:	b138      	cbz	r0, 800496a <_svfiprintf_r+0x142>
 800495a:	2340      	movs	r3, #64	; 0x40
 800495c:	1b00      	subs	r0, r0, r4
 800495e:	fa03 f000 	lsl.w	r0, r3, r0
 8004962:	9b04      	ldr	r3, [sp, #16]
 8004964:	4303      	orrs	r3, r0
 8004966:	9304      	str	r3, [sp, #16]
 8004968:	3701      	adds	r7, #1
 800496a:	7839      	ldrb	r1, [r7, #0]
 800496c:	4825      	ldr	r0, [pc, #148]	; (8004a04 <_svfiprintf_r+0x1dc>)
 800496e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004972:	2206      	movs	r2, #6
 8004974:	1c7e      	adds	r6, r7, #1
 8004976:	f7fb fc53 	bl	8000220 <memchr>
 800497a:	2800      	cmp	r0, #0
 800497c:	d035      	beq.n	80049ea <_svfiprintf_r+0x1c2>
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <_svfiprintf_r+0x1e0>)
 8004980:	b9fb      	cbnz	r3, 80049c2 <_svfiprintf_r+0x19a>
 8004982:	9b03      	ldr	r3, [sp, #12]
 8004984:	3307      	adds	r3, #7
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	3308      	adds	r3, #8
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004990:	444b      	add	r3, r9
 8004992:	9309      	str	r3, [sp, #36]	; 0x24
 8004994:	e76c      	b.n	8004870 <_svfiprintf_r+0x48>
 8004996:	fb00 3202 	mla	r2, r0, r2, r3
 800499a:	2101      	movs	r1, #1
 800499c:	e7a3      	b.n	80048e6 <_svfiprintf_r+0xbe>
 800499e:	2300      	movs	r3, #0
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	4618      	mov	r0, r3
 80049a4:	240a      	movs	r4, #10
 80049a6:	460f      	mov	r7, r1
 80049a8:	3101      	adds	r1, #1
 80049aa:	783a      	ldrb	r2, [r7, #0]
 80049ac:	3a30      	subs	r2, #48	; 0x30
 80049ae:	2a09      	cmp	r2, #9
 80049b0:	d903      	bls.n	80049ba <_svfiprintf_r+0x192>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ca      	beq.n	800494c <_svfiprintf_r+0x124>
 80049b6:	9005      	str	r0, [sp, #20]
 80049b8:	e7c8      	b.n	800494c <_svfiprintf_r+0x124>
 80049ba:	fb04 2000 	mla	r0, r4, r0, r2
 80049be:	2301      	movs	r3, #1
 80049c0:	e7f1      	b.n	80049a6 <_svfiprintf_r+0x17e>
 80049c2:	ab03      	add	r3, sp, #12
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	462a      	mov	r2, r5
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <_svfiprintf_r+0x1e4>)
 80049ca:	a904      	add	r1, sp, #16
 80049cc:	4640      	mov	r0, r8
 80049ce:	f3af 8000 	nop.w
 80049d2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049d6:	4681      	mov	r9, r0
 80049d8:	d1d9      	bne.n	800498e <_svfiprintf_r+0x166>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	065b      	lsls	r3, r3, #25
 80049de:	f53f af38 	bmi.w	8004852 <_svfiprintf_r+0x2a>
 80049e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e4:	b01d      	add	sp, #116	; 0x74
 80049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ea:	ab03      	add	r3, sp, #12
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	462a      	mov	r2, r5
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <_svfiprintf_r+0x1e4>)
 80049f2:	a904      	add	r1, sp, #16
 80049f4:	4640      	mov	r0, r8
 80049f6:	f000 fa2f 	bl	8004e58 <_printf_i>
 80049fa:	e7ea      	b.n	80049d2 <_svfiprintf_r+0x1aa>
 80049fc:	08006a1c 	.word	0x08006a1c
 8004a00:	08006a22 	.word	0x08006a22
 8004a04:	08006a26 	.word	0x08006a26
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	08004771 	.word	0x08004771

08004a10 <_sungetc_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	1c4b      	adds	r3, r1, #1
 8004a14:	4614      	mov	r4, r2
 8004a16:	d103      	bne.n	8004a20 <_sungetc_r+0x10>
 8004a18:	f04f 35ff 	mov.w	r5, #4294967295
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	8993      	ldrh	r3, [r2, #12]
 8004a22:	f023 0320 	bic.w	r3, r3, #32
 8004a26:	8193      	strh	r3, [r2, #12]
 8004a28:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004a2a:	6852      	ldr	r2, [r2, #4]
 8004a2c:	b2cd      	uxtb	r5, r1
 8004a2e:	b18b      	cbz	r3, 8004a54 <_sungetc_r+0x44>
 8004a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a32:	429a      	cmp	r2, r3
 8004a34:	da08      	bge.n	8004a48 <_sungetc_r+0x38>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	3301      	adds	r3, #1
 8004a44:	6063      	str	r3, [r4, #4]
 8004a46:	e7e9      	b.n	8004a1c <_sungetc_r+0xc>
 8004a48:	4621      	mov	r1, r4
 8004a4a:	f000 fdf1 	bl	8005630 <__submore>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0f1      	beq.n	8004a36 <_sungetc_r+0x26>
 8004a52:	e7e1      	b.n	8004a18 <_sungetc_r+0x8>
 8004a54:	6921      	ldr	r1, [r4, #16]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	b151      	cbz	r1, 8004a70 <_sungetc_r+0x60>
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d208      	bcs.n	8004a70 <_sungetc_r+0x60>
 8004a5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004a62:	428d      	cmp	r5, r1
 8004a64:	d104      	bne.n	8004a70 <_sungetc_r+0x60>
 8004a66:	3b01      	subs	r3, #1
 8004a68:	3201      	adds	r2, #1
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	6062      	str	r2, [r4, #4]
 8004a6e:	e7d5      	b.n	8004a1c <_sungetc_r+0xc>
 8004a70:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a76:	6363      	str	r3, [r4, #52]	; 0x34
 8004a78:	2303      	movs	r3, #3
 8004a7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	6422      	str	r2, [r4, #64]	; 0x40
 8004a80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	2301      	movs	r3, #1
 8004a88:	e7dc      	b.n	8004a44 <_sungetc_r+0x34>

08004a8a <__ssrefill_r>:
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004a90:	b169      	cbz	r1, 8004aae <__ssrefill_r+0x24>
 8004a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a96:	4299      	cmp	r1, r3
 8004a98:	d001      	beq.n	8004a9e <__ssrefill_r+0x14>
 8004a9a:	f7ff fdbd 	bl	8004618 <_free_r>
 8004a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8004aa6:	b113      	cbz	r3, 8004aae <__ssrefill_r+0x24>
 8004aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f043 0320 	orr.w	r3, r3, #32
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <__ssvfiscanf_r>:
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8004acc:	f10d 080c 	add.w	r8, sp, #12
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9346      	str	r3, [sp, #280]	; 0x118
 8004ad6:	9347      	str	r3, [sp, #284]	; 0x11c
 8004ad8:	4ba0      	ldr	r3, [pc, #640]	; (8004d5c <__ssvfiscanf_r+0x298>)
 8004ada:	93a2      	str	r3, [sp, #648]	; 0x288
 8004adc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004d64 <__ssvfiscanf_r+0x2a0>
 8004ae0:	4b9f      	ldr	r3, [pc, #636]	; (8004d60 <__ssvfiscanf_r+0x29c>)
 8004ae2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	93a3      	str	r3, [sp, #652]	; 0x28c
 8004aec:	4692      	mov	sl, r2
 8004aee:	270a      	movs	r7, #10
 8004af0:	f89a 3000 	ldrb.w	r3, [sl]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 812f 	beq.w	8004d58 <__ssvfiscanf_r+0x294>
 8004afa:	f000 fdfb 	bl	80056f4 <__locale_ctype_ptr>
 8004afe:	f89a b000 	ldrb.w	fp, [sl]
 8004b02:	4458      	add	r0, fp
 8004b04:	7843      	ldrb	r3, [r0, #1]
 8004b06:	f013 0308 	ands.w	r3, r3, #8
 8004b0a:	d143      	bne.n	8004b94 <__ssvfiscanf_r+0xd0>
 8004b0c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004b10:	f10a 0501 	add.w	r5, sl, #1
 8004b14:	f040 8099 	bne.w	8004c4a <__ssvfiscanf_r+0x186>
 8004b18:	9345      	str	r3, [sp, #276]	; 0x114
 8004b1a:	9343      	str	r3, [sp, #268]	; 0x10c
 8004b1c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004b20:	2b2a      	cmp	r3, #42	; 0x2a
 8004b22:	d103      	bne.n	8004b2c <__ssvfiscanf_r+0x68>
 8004b24:	2310      	movs	r3, #16
 8004b26:	9343      	str	r3, [sp, #268]	; 0x10c
 8004b28:	f10a 0502 	add.w	r5, sl, #2
 8004b2c:	7829      	ldrb	r1, [r5, #0]
 8004b2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004b32:	2a09      	cmp	r2, #9
 8004b34:	46aa      	mov	sl, r5
 8004b36:	f105 0501 	add.w	r5, r5, #1
 8004b3a:	d941      	bls.n	8004bc0 <__ssvfiscanf_r+0xfc>
 8004b3c:	2203      	movs	r2, #3
 8004b3e:	4889      	ldr	r0, [pc, #548]	; (8004d64 <__ssvfiscanf_r+0x2a0>)
 8004b40:	f7fb fb6e 	bl	8000220 <memchr>
 8004b44:	b138      	cbz	r0, 8004b56 <__ssvfiscanf_r+0x92>
 8004b46:	eba0 0309 	sub.w	r3, r0, r9
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	4098      	lsls	r0, r3
 8004b4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004b50:	4318      	orrs	r0, r3
 8004b52:	9043      	str	r0, [sp, #268]	; 0x10c
 8004b54:	46aa      	mov	sl, r5
 8004b56:	f89a 3000 	ldrb.w	r3, [sl]
 8004b5a:	2b67      	cmp	r3, #103	; 0x67
 8004b5c:	f10a 0501 	add.w	r5, sl, #1
 8004b60:	d84a      	bhi.n	8004bf8 <__ssvfiscanf_r+0x134>
 8004b62:	2b65      	cmp	r3, #101	; 0x65
 8004b64:	f080 80b7 	bcs.w	8004cd6 <__ssvfiscanf_r+0x212>
 8004b68:	2b47      	cmp	r3, #71	; 0x47
 8004b6a:	d82f      	bhi.n	8004bcc <__ssvfiscanf_r+0x108>
 8004b6c:	2b45      	cmp	r3, #69	; 0x45
 8004b6e:	f080 80b2 	bcs.w	8004cd6 <__ssvfiscanf_r+0x212>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8082 	beq.w	8004c7c <__ssvfiscanf_r+0x1b8>
 8004b78:	2b25      	cmp	r3, #37	; 0x25
 8004b7a:	d066      	beq.n	8004c4a <__ssvfiscanf_r+0x186>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	9349      	str	r3, [sp, #292]	; 0x124
 8004b80:	9744      	str	r7, [sp, #272]	; 0x110
 8004b82:	e045      	b.n	8004c10 <__ssvfiscanf_r+0x14c>
 8004b84:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8004b86:	3101      	adds	r1, #1
 8004b88:	9147      	str	r1, [sp, #284]	; 0x11c
 8004b8a:	6861      	ldr	r1, [r4, #4]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	3901      	subs	r1, #1
 8004b90:	6061      	str	r1, [r4, #4]
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dd0b      	ble.n	8004bb2 <__ssvfiscanf_r+0xee>
 8004b9a:	f000 fdab 	bl	80056f4 <__locale_ctype_ptr>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	7819      	ldrb	r1, [r3, #0]
 8004ba2:	4408      	add	r0, r1
 8004ba4:	7841      	ldrb	r1, [r0, #1]
 8004ba6:	070d      	lsls	r5, r1, #28
 8004ba8:	d4ec      	bmi.n	8004b84 <__ssvfiscanf_r+0xc0>
 8004baa:	f10a 0501 	add.w	r5, sl, #1
 8004bae:	46aa      	mov	sl, r5
 8004bb0:	e79e      	b.n	8004af0 <__ssvfiscanf_r+0x2c>
 8004bb2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4798      	blx	r3
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d0ed      	beq.n	8004b9a <__ssvfiscanf_r+0xd6>
 8004bbe:	e7f4      	b.n	8004baa <__ssvfiscanf_r+0xe6>
 8004bc0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004bc2:	fb07 1303 	mla	r3, r7, r3, r1
 8004bc6:	3b30      	subs	r3, #48	; 0x30
 8004bc8:	9345      	str	r3, [sp, #276]	; 0x114
 8004bca:	e7af      	b.n	8004b2c <__ssvfiscanf_r+0x68>
 8004bcc:	2b5b      	cmp	r3, #91	; 0x5b
 8004bce:	d061      	beq.n	8004c94 <__ssvfiscanf_r+0x1d0>
 8004bd0:	d80c      	bhi.n	8004bec <__ssvfiscanf_r+0x128>
 8004bd2:	2b58      	cmp	r3, #88	; 0x58
 8004bd4:	d1d2      	bne.n	8004b7c <__ssvfiscanf_r+0xb8>
 8004bd6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	9243      	str	r2, [sp, #268]	; 0x10c
 8004bde:	2210      	movs	r2, #16
 8004be0:	9244      	str	r2, [sp, #272]	; 0x110
 8004be2:	2b6f      	cmp	r3, #111	; 0x6f
 8004be4:	bfb4      	ite	lt
 8004be6:	2303      	movlt	r3, #3
 8004be8:	2304      	movge	r3, #4
 8004bea:	e010      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004bec:	2b63      	cmp	r3, #99	; 0x63
 8004bee:	d05c      	beq.n	8004caa <__ssvfiscanf_r+0x1e6>
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d1c3      	bne.n	8004b7c <__ssvfiscanf_r+0xb8>
 8004bf4:	9744      	str	r7, [sp, #272]	; 0x110
 8004bf6:	e7f4      	b.n	8004be2 <__ssvfiscanf_r+0x11e>
 8004bf8:	2b70      	cmp	r3, #112	; 0x70
 8004bfa:	d042      	beq.n	8004c82 <__ssvfiscanf_r+0x1be>
 8004bfc:	d81d      	bhi.n	8004c3a <__ssvfiscanf_r+0x176>
 8004bfe:	2b6e      	cmp	r3, #110	; 0x6e
 8004c00:	d059      	beq.n	8004cb6 <__ssvfiscanf_r+0x1f2>
 8004c02:	d843      	bhi.n	8004c8c <__ssvfiscanf_r+0x1c8>
 8004c04:	2b69      	cmp	r3, #105	; 0x69
 8004c06:	d1b9      	bne.n	8004b7c <__ssvfiscanf_r+0xb8>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9344      	str	r3, [sp, #272]	; 0x110
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	9349      	str	r3, [sp, #292]	; 0x124
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dd61      	ble.n	8004cda <__ssvfiscanf_r+0x216>
 8004c16:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c18:	0659      	lsls	r1, r3, #25
 8004c1a:	d56f      	bpl.n	8004cfc <__ssvfiscanf_r+0x238>
 8004c1c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	dc7c      	bgt.n	8004d1c <__ssvfiscanf_r+0x258>
 8004c22:	ab01      	add	r3, sp, #4
 8004c24:	4622      	mov	r2, r4
 8004c26:	a943      	add	r1, sp, #268	; 0x10c
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 fa35 	bl	8005098 <_scanf_chars>
 8004c2e:	2801      	cmp	r0, #1
 8004c30:	f000 8092 	beq.w	8004d58 <__ssvfiscanf_r+0x294>
 8004c34:	2802      	cmp	r0, #2
 8004c36:	d1ba      	bne.n	8004bae <__ssvfiscanf_r+0xea>
 8004c38:	e01d      	b.n	8004c76 <__ssvfiscanf_r+0x1b2>
 8004c3a:	2b75      	cmp	r3, #117	; 0x75
 8004c3c:	d0da      	beq.n	8004bf4 <__ssvfiscanf_r+0x130>
 8004c3e:	2b78      	cmp	r3, #120	; 0x78
 8004c40:	d0c9      	beq.n	8004bd6 <__ssvfiscanf_r+0x112>
 8004c42:	2b73      	cmp	r3, #115	; 0x73
 8004c44:	d19a      	bne.n	8004b7c <__ssvfiscanf_r+0xb8>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e7e1      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dd0c      	ble.n	8004c6a <__ssvfiscanf_r+0x1a6>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	4593      	cmp	fp, r2
 8004c56:	d17f      	bne.n	8004d58 <__ssvfiscanf_r+0x294>
 8004c58:	3301      	adds	r3, #1
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004c60:	3a01      	subs	r2, #1
 8004c62:	3301      	adds	r3, #1
 8004c64:	6062      	str	r2, [r4, #4]
 8004c66:	9347      	str	r3, [sp, #284]	; 0x11c
 8004c68:	e7a1      	b.n	8004bae <__ssvfiscanf_r+0xea>
 8004c6a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4798      	blx	r3
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d0ec      	beq.n	8004c50 <__ssvfiscanf_r+0x18c>
 8004c76:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d163      	bne.n	8004d44 <__ssvfiscanf_r+0x280>
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	e066      	b.n	8004d50 <__ssvfiscanf_r+0x28c>
 8004c82:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004c84:	f042 0220 	orr.w	r2, r2, #32
 8004c88:	9243      	str	r2, [sp, #268]	; 0x10c
 8004c8a:	e7a4      	b.n	8004bd6 <__ssvfiscanf_r+0x112>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	9344      	str	r3, [sp, #272]	; 0x110
 8004c90:	2304      	movs	r3, #4
 8004c92:	e7bc      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4640      	mov	r0, r8
 8004c98:	f000 fb78 	bl	800538c <__sccl>
 8004c9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca2:	9343      	str	r3, [sp, #268]	; 0x10c
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e7b1      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004caa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb0:	9343      	str	r3, [sp, #268]	; 0x10c
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e7ab      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004cb6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8004cb8:	06d0      	lsls	r0, r2, #27
 8004cba:	f53f af78 	bmi.w	8004bae <__ssvfiscanf_r+0xea>
 8004cbe:	f012 0f01 	tst.w	r2, #1
 8004cc2:	9a01      	ldr	r2, [sp, #4]
 8004cc4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004cc6:	f102 0104 	add.w	r1, r2, #4
 8004cca:	9101      	str	r1, [sp, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	bf14      	ite	ne
 8004cd0:	8013      	strhne	r3, [r2, #0]
 8004cd2:	6013      	streq	r3, [r2, #0]
 8004cd4:	e76b      	b.n	8004bae <__ssvfiscanf_r+0xea>
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	e799      	b.n	8004c0e <__ssvfiscanf_r+0x14a>
 8004cda:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4798      	blx	r3
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d097      	beq.n	8004c16 <__ssvfiscanf_r+0x152>
 8004ce6:	e7c6      	b.n	8004c76 <__ssvfiscanf_r+0x1b2>
 8004ce8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8004cea:	3201      	adds	r2, #1
 8004cec:	9247      	str	r2, [sp, #284]	; 0x11c
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	6062      	str	r2, [r4, #4]
 8004cf6:	dd0a      	ble.n	8004d0e <__ssvfiscanf_r+0x24a>
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	f000 fcfa 	bl	80056f4 <__locale_ctype_ptr>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	4410      	add	r0, r2
 8004d06:	7842      	ldrb	r2, [r0, #1]
 8004d08:	0712      	lsls	r2, r2, #28
 8004d0a:	d4ed      	bmi.n	8004ce8 <__ssvfiscanf_r+0x224>
 8004d0c:	e786      	b.n	8004c1c <__ssvfiscanf_r+0x158>
 8004d0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8004d10:	4621      	mov	r1, r4
 8004d12:	4630      	mov	r0, r6
 8004d14:	4798      	blx	r3
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d0f0      	beq.n	8004cfc <__ssvfiscanf_r+0x238>
 8004d1a:	e7ac      	b.n	8004c76 <__ssvfiscanf_r+0x1b2>
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	dc06      	bgt.n	8004d2e <__ssvfiscanf_r+0x26a>
 8004d20:	ab01      	add	r3, sp, #4
 8004d22:	4622      	mov	r2, r4
 8004d24:	a943      	add	r1, sp, #268	; 0x10c
 8004d26:	4630      	mov	r0, r6
 8004d28:	f000 fa1a 	bl	8005160 <_scanf_i>
 8004d2c:	e77f      	b.n	8004c2e <__ssvfiscanf_r+0x16a>
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <__ssvfiscanf_r+0x2a4>)
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f43f af3c 	beq.w	8004bae <__ssvfiscanf_r+0xea>
 8004d36:	ab01      	add	r3, sp, #4
 8004d38:	4622      	mov	r2, r4
 8004d3a:	a943      	add	r1, sp, #268	; 0x10c
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f3af 8000 	nop.w
 8004d42:	e774      	b.n	8004c2e <__ssvfiscanf_r+0x16a>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d4a:	bf18      	it	ne
 8004d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8004d50:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8004d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d58:	9846      	ldr	r0, [sp, #280]	; 0x118
 8004d5a:	e7f9      	b.n	8004d50 <__ssvfiscanf_r+0x28c>
 8004d5c:	08004a11 	.word	0x08004a11
 8004d60:	08004a8b 	.word	0x08004a8b
 8004d64:	08006a22 	.word	0x08006a22
 8004d68:	00000000 	.word	0x00000000

08004d6c <_printf_common>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	4691      	mov	r9, r2
 8004d72:	461f      	mov	r7, r3
 8004d74:	688a      	ldr	r2, [r1, #8]
 8004d76:	690b      	ldr	r3, [r1, #16]
 8004d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	bfb8      	it	lt
 8004d80:	4613      	movlt	r3, r2
 8004d82:	f8c9 3000 	str.w	r3, [r9]
 8004d86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	b112      	cbz	r2, 8004d96 <_printf_common+0x2a>
 8004d90:	3301      	adds	r3, #1
 8004d92:	f8c9 3000 	str.w	r3, [r9]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	0699      	lsls	r1, r3, #26
 8004d9a:	bf42      	ittt	mi
 8004d9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004da0:	3302      	addmi	r3, #2
 8004da2:	f8c9 3000 	strmi.w	r3, [r9]
 8004da6:	6825      	ldr	r5, [r4, #0]
 8004da8:	f015 0506 	ands.w	r5, r5, #6
 8004dac:	d107      	bne.n	8004dbe <_printf_common+0x52>
 8004dae:	f104 0a19 	add.w	sl, r4, #25
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	f8d9 2000 	ldr.w	r2, [r9]
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	db29      	blt.n	8004e12 <_printf_common+0xa6>
 8004dbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	3300      	adds	r3, #0
 8004dc6:	bf18      	it	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	0692      	lsls	r2, r2, #26
 8004dcc:	d42e      	bmi.n	8004e2c <_printf_common+0xc0>
 8004dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	47c0      	blx	r8
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d021      	beq.n	8004e20 <_printf_common+0xb4>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	68e5      	ldr	r5, [r4, #12]
 8004de0:	f8d9 2000 	ldr.w	r2, [r9]
 8004de4:	f003 0306 	and.w	r3, r3, #6
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	bf08      	it	eq
 8004dec:	1aad      	subeq	r5, r5, r2
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	bf0c      	ite	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	2500      	movne	r5, #0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bfc4      	itt	gt
 8004dfe:	1a9b      	subgt	r3, r3, r2
 8004e00:	18ed      	addgt	r5, r5, r3
 8004e02:	f04f 0900 	mov.w	r9, #0
 8004e06:	341a      	adds	r4, #26
 8004e08:	454d      	cmp	r5, r9
 8004e0a:	d11b      	bne.n	8004e44 <_printf_common+0xd8>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	2301      	movs	r3, #1
 8004e14:	4652      	mov	r2, sl
 8004e16:	4639      	mov	r1, r7
 8004e18:	4630      	mov	r0, r6
 8004e1a:	47c0      	blx	r8
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d103      	bne.n	8004e28 <_printf_common+0xbc>
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295
 8004e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e28:	3501      	adds	r5, #1
 8004e2a:	e7c2      	b.n	8004db2 <_printf_common+0x46>
 8004e2c:	18e1      	adds	r1, r4, r3
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	2030      	movs	r0, #48	; 0x30
 8004e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e36:	4422      	add	r2, r4
 8004e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e40:	3302      	adds	r3, #2
 8004e42:	e7c4      	b.n	8004dce <_printf_common+0x62>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4622      	mov	r2, r4
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	47c0      	blx	r8
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d0e6      	beq.n	8004e20 <_printf_common+0xb4>
 8004e52:	f109 0901 	add.w	r9, r9, #1
 8004e56:	e7d7      	b.n	8004e08 <_printf_common+0x9c>

08004e58 <_printf_i>:
 8004e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e5c:	4617      	mov	r7, r2
 8004e5e:	7e0a      	ldrb	r2, [r1, #24]
 8004e60:	b085      	sub	sp, #20
 8004e62:	2a6e      	cmp	r2, #110	; 0x6e
 8004e64:	4698      	mov	r8, r3
 8004e66:	4606      	mov	r6, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e6c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e70:	f000 80bc 	beq.w	8004fec <_printf_i+0x194>
 8004e74:	d81a      	bhi.n	8004eac <_printf_i+0x54>
 8004e76:	2a63      	cmp	r2, #99	; 0x63
 8004e78:	d02e      	beq.n	8004ed8 <_printf_i+0x80>
 8004e7a:	d80a      	bhi.n	8004e92 <_printf_i+0x3a>
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	f000 80c8 	beq.w	8005012 <_printf_i+0x1ba>
 8004e82:	2a58      	cmp	r2, #88	; 0x58
 8004e84:	f000 808a 	beq.w	8004f9c <_printf_i+0x144>
 8004e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e90:	e02a      	b.n	8004ee8 <_printf_i+0x90>
 8004e92:	2a64      	cmp	r2, #100	; 0x64
 8004e94:	d001      	beq.n	8004e9a <_printf_i+0x42>
 8004e96:	2a69      	cmp	r2, #105	; 0x69
 8004e98:	d1f6      	bne.n	8004e88 <_printf_i+0x30>
 8004e9a:	6821      	ldr	r1, [r4, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004ea2:	d023      	beq.n	8004eec <_printf_i+0x94>
 8004ea4:	1d11      	adds	r1, r2, #4
 8004ea6:	6019      	str	r1, [r3, #0]
 8004ea8:	6813      	ldr	r3, [r2, #0]
 8004eaa:	e027      	b.n	8004efc <_printf_i+0xa4>
 8004eac:	2a73      	cmp	r2, #115	; 0x73
 8004eae:	f000 80b4 	beq.w	800501a <_printf_i+0x1c2>
 8004eb2:	d808      	bhi.n	8004ec6 <_printf_i+0x6e>
 8004eb4:	2a6f      	cmp	r2, #111	; 0x6f
 8004eb6:	d02a      	beq.n	8004f0e <_printf_i+0xb6>
 8004eb8:	2a70      	cmp	r2, #112	; 0x70
 8004eba:	d1e5      	bne.n	8004e88 <_printf_i+0x30>
 8004ebc:	680a      	ldr	r2, [r1, #0]
 8004ebe:	f042 0220 	orr.w	r2, r2, #32
 8004ec2:	600a      	str	r2, [r1, #0]
 8004ec4:	e003      	b.n	8004ece <_printf_i+0x76>
 8004ec6:	2a75      	cmp	r2, #117	; 0x75
 8004ec8:	d021      	beq.n	8004f0e <_printf_i+0xb6>
 8004eca:	2a78      	cmp	r2, #120	; 0x78
 8004ecc:	d1dc      	bne.n	8004e88 <_printf_i+0x30>
 8004ece:	2278      	movs	r2, #120	; 0x78
 8004ed0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004ed4:	496e      	ldr	r1, [pc, #440]	; (8005090 <_printf_i+0x238>)
 8004ed6:	e064      	b.n	8004fa2 <_printf_i+0x14a>
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004ede:	1d11      	adds	r1, r2, #4
 8004ee0:	6019      	str	r1, [r3, #0]
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0a3      	b.n	8005034 <_printf_i+0x1dc>
 8004eec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ef0:	f102 0104 	add.w	r1, r2, #4
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	d0d7      	beq.n	8004ea8 <_printf_i+0x50>
 8004ef8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da03      	bge.n	8004f08 <_printf_i+0xb0>
 8004f00:	222d      	movs	r2, #45	; 0x2d
 8004f02:	425b      	negs	r3, r3
 8004f04:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f08:	4962      	ldr	r1, [pc, #392]	; (8005094 <_printf_i+0x23c>)
 8004f0a:	220a      	movs	r2, #10
 8004f0c:	e017      	b.n	8004f3e <_printf_i+0xe6>
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f16:	d003      	beq.n	8004f20 <_printf_i+0xc8>
 8004f18:	1d08      	adds	r0, r1, #4
 8004f1a:	6018      	str	r0, [r3, #0]
 8004f1c:	680b      	ldr	r3, [r1, #0]
 8004f1e:	e006      	b.n	8004f2e <_printf_i+0xd6>
 8004f20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f24:	f101 0004 	add.w	r0, r1, #4
 8004f28:	6018      	str	r0, [r3, #0]
 8004f2a:	d0f7      	beq.n	8004f1c <_printf_i+0xc4>
 8004f2c:	880b      	ldrh	r3, [r1, #0]
 8004f2e:	4959      	ldr	r1, [pc, #356]	; (8005094 <_printf_i+0x23c>)
 8004f30:	2a6f      	cmp	r2, #111	; 0x6f
 8004f32:	bf14      	ite	ne
 8004f34:	220a      	movne	r2, #10
 8004f36:	2208      	moveq	r2, #8
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f3e:	6865      	ldr	r5, [r4, #4]
 8004f40:	60a5      	str	r5, [r4, #8]
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f2c0 809c 	blt.w	8005080 <_printf_i+0x228>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	f020 0004 	bic.w	r0, r0, #4
 8004f4e:	6020      	str	r0, [r4, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d13f      	bne.n	8004fd4 <_printf_i+0x17c>
 8004f54:	2d00      	cmp	r5, #0
 8004f56:	f040 8095 	bne.w	8005084 <_printf_i+0x22c>
 8004f5a:	4675      	mov	r5, lr
 8004f5c:	2a08      	cmp	r2, #8
 8004f5e:	d10b      	bne.n	8004f78 <_printf_i+0x120>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	07da      	lsls	r2, r3, #31
 8004f64:	d508      	bpl.n	8004f78 <_printf_i+0x120>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	6862      	ldr	r2, [r4, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	bfde      	ittt	le
 8004f6e:	2330      	movle	r3, #48	; 0x30
 8004f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f78:	ebae 0305 	sub.w	r3, lr, r5
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	f8cd 8000 	str.w	r8, [sp]
 8004f82:	463b      	mov	r3, r7
 8004f84:	aa03      	add	r2, sp, #12
 8004f86:	4621      	mov	r1, r4
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f7ff feef 	bl	8004d6c <_printf_common>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d155      	bne.n	800503e <_printf_i+0x1e6>
 8004f92:	f04f 30ff 	mov.w	r0, #4294967295
 8004f96:	b005      	add	sp, #20
 8004f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f9c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004fa0:	493c      	ldr	r1, [pc, #240]	; (8005094 <_printf_i+0x23c>)
 8004fa2:	6822      	ldr	r2, [r4, #0]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004faa:	f100 0504 	add.w	r5, r0, #4
 8004fae:	601d      	str	r5, [r3, #0]
 8004fb0:	d001      	beq.n	8004fb6 <_printf_i+0x15e>
 8004fb2:	6803      	ldr	r3, [r0, #0]
 8004fb4:	e002      	b.n	8004fbc <_printf_i+0x164>
 8004fb6:	0655      	lsls	r5, r2, #25
 8004fb8:	d5fb      	bpl.n	8004fb2 <_printf_i+0x15a>
 8004fba:	8803      	ldrh	r3, [r0, #0]
 8004fbc:	07d0      	lsls	r0, r2, #31
 8004fbe:	bf44      	itt	mi
 8004fc0:	f042 0220 	orrmi.w	r2, r2, #32
 8004fc4:	6022      	strmi	r2, [r4, #0]
 8004fc6:	b91b      	cbnz	r3, 8004fd0 <_printf_i+0x178>
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	f022 0220 	bic.w	r2, r2, #32
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	e7b1      	b.n	8004f38 <_printf_i+0xe0>
 8004fd4:	4675      	mov	r5, lr
 8004fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fda:	fb02 3310 	mls	r3, r2, r0, r3
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d1f5      	bne.n	8004fd6 <_printf_i+0x17e>
 8004fea:	e7b7      	b.n	8004f5c <_printf_i+0x104>
 8004fec:	6808      	ldr	r0, [r1, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	6949      	ldr	r1, [r1, #20]
 8004ff2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004ff6:	d004      	beq.n	8005002 <_printf_i+0x1aa>
 8004ff8:	1d10      	adds	r0, r2, #4
 8004ffa:	6018      	str	r0, [r3, #0]
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e007      	b.n	8005012 <_printf_i+0x1ba>
 8005002:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005006:	f102 0004 	add.w	r0, r2, #4
 800500a:	6018      	str	r0, [r3, #0]
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	d0f6      	beq.n	8004ffe <_printf_i+0x1a6>
 8005010:	8019      	strh	r1, [r3, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	4675      	mov	r5, lr
 8005018:	e7b1      	b.n	8004f7e <_printf_i+0x126>
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	1d11      	adds	r1, r2, #4
 800501e:	6019      	str	r1, [r3, #0]
 8005020:	6815      	ldr	r5, [r2, #0]
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	2100      	movs	r1, #0
 8005026:	4628      	mov	r0, r5
 8005028:	f7fb f8fa 	bl	8000220 <memchr>
 800502c:	b108      	cbz	r0, 8005032 <_printf_i+0x1da>
 800502e:	1b40      	subs	r0, r0, r5
 8005030:	6060      	str	r0, [r4, #4]
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	2300      	movs	r3, #0
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503c:	e79f      	b.n	8004f7e <_printf_i+0x126>
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	462a      	mov	r2, r5
 8005042:	4639      	mov	r1, r7
 8005044:	4630      	mov	r0, r6
 8005046:	47c0      	blx	r8
 8005048:	3001      	adds	r0, #1
 800504a:	d0a2      	beq.n	8004f92 <_printf_i+0x13a>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	079b      	lsls	r3, r3, #30
 8005050:	d507      	bpl.n	8005062 <_printf_i+0x20a>
 8005052:	2500      	movs	r5, #0
 8005054:	f104 0919 	add.w	r9, r4, #25
 8005058:	68e3      	ldr	r3, [r4, #12]
 800505a:	9a03      	ldr	r2, [sp, #12]
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	429d      	cmp	r5, r3
 8005060:	db05      	blt.n	800506e <_printf_i+0x216>
 8005062:	68e0      	ldr	r0, [r4, #12]
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	4298      	cmp	r0, r3
 8005068:	bfb8      	it	lt
 800506a:	4618      	movlt	r0, r3
 800506c:	e793      	b.n	8004f96 <_printf_i+0x13e>
 800506e:	2301      	movs	r3, #1
 8005070:	464a      	mov	r2, r9
 8005072:	4639      	mov	r1, r7
 8005074:	4630      	mov	r0, r6
 8005076:	47c0      	blx	r8
 8005078:	3001      	adds	r0, #1
 800507a:	d08a      	beq.n	8004f92 <_printf_i+0x13a>
 800507c:	3501      	adds	r5, #1
 800507e:	e7eb      	b.n	8005058 <_printf_i+0x200>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1a7      	bne.n	8004fd4 <_printf_i+0x17c>
 8005084:	780b      	ldrb	r3, [r1, #0]
 8005086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800508a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508e:	e765      	b.n	8004f5c <_printf_i+0x104>
 8005090:	08006a3e 	.word	0x08006a3e
 8005094:	08006a2d 	.word	0x08006a2d

08005098 <_scanf_chars>:
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	4615      	mov	r5, r2
 800509e:	688a      	ldr	r2, [r1, #8]
 80050a0:	4680      	mov	r8, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	b932      	cbnz	r2, 80050b4 <_scanf_chars+0x1c>
 80050a6:	698a      	ldr	r2, [r1, #24]
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	bf0c      	ite	eq
 80050ac:	2201      	moveq	r2, #1
 80050ae:	f04f 32ff 	movne.w	r2, #4294967295
 80050b2:	608a      	str	r2, [r1, #8]
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	06d1      	lsls	r1, r2, #27
 80050b8:	bf5f      	itttt	pl
 80050ba:	681a      	ldrpl	r2, [r3, #0]
 80050bc:	1d11      	addpl	r1, r2, #4
 80050be:	6019      	strpl	r1, [r3, #0]
 80050c0:	6817      	ldrpl	r7, [r2, #0]
 80050c2:	2600      	movs	r6, #0
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	b1db      	cbz	r3, 8005100 <_scanf_chars+0x68>
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <_scanf_chars+0x44>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	6962      	ldr	r2, [r4, #20]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	5cd3      	ldrb	r3, [r2, r3]
 80050d4:	b9a3      	cbnz	r3, 8005100 <_scanf_chars+0x68>
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	d132      	bne.n	8005140 <_scanf_chars+0xa8>
 80050da:	e006      	b.n	80050ea <_scanf_chars+0x52>
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d007      	beq.n	80050f0 <_scanf_chars+0x58>
 80050e0:	2e00      	cmp	r6, #0
 80050e2:	d12d      	bne.n	8005140 <_scanf_chars+0xa8>
 80050e4:	69a3      	ldr	r3, [r4, #24]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d12a      	bne.n	8005140 <_scanf_chars+0xa8>
 80050ea:	2001      	movs	r0, #1
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f0:	f000 fb00 	bl	80056f4 <__locale_ctype_ptr>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	4418      	add	r0, r3
 80050fa:	7843      	ldrb	r3, [r0, #1]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	d4ef      	bmi.n	80050e0 <_scanf_chars+0x48>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	06da      	lsls	r2, r3, #27
 8005104:	bf5e      	ittt	pl
 8005106:	682b      	ldrpl	r3, [r5, #0]
 8005108:	781b      	ldrbpl	r3, [r3, #0]
 800510a:	703b      	strbpl	r3, [r7, #0]
 800510c:	682a      	ldr	r2, [r5, #0]
 800510e:	686b      	ldr	r3, [r5, #4]
 8005110:	f102 0201 	add.w	r2, r2, #1
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	68a2      	ldr	r2, [r4, #8]
 8005118:	f103 33ff 	add.w	r3, r3, #4294967295
 800511c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005120:	606b      	str	r3, [r5, #4]
 8005122:	f106 0601 	add.w	r6, r6, #1
 8005126:	bf58      	it	pl
 8005128:	3701      	addpl	r7, #1
 800512a:	60a2      	str	r2, [r4, #8]
 800512c:	b142      	cbz	r2, 8005140 <_scanf_chars+0xa8>
 800512e:	2b00      	cmp	r3, #0
 8005130:	dcc8      	bgt.n	80050c4 <_scanf_chars+0x2c>
 8005132:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005136:	4629      	mov	r1, r5
 8005138:	4640      	mov	r0, r8
 800513a:	4798      	blx	r3
 800513c:	2800      	cmp	r0, #0
 800513e:	d0c1      	beq.n	80050c4 <_scanf_chars+0x2c>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	f013 0310 	ands.w	r3, r3, #16
 8005146:	d105      	bne.n	8005154 <_scanf_chars+0xbc>
 8005148:	68e2      	ldr	r2, [r4, #12]
 800514a:	3201      	adds	r2, #1
 800514c:	60e2      	str	r2, [r4, #12]
 800514e:	69a2      	ldr	r2, [r4, #24]
 8005150:	b102      	cbz	r2, 8005154 <_scanf_chars+0xbc>
 8005152:	703b      	strb	r3, [r7, #0]
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	441e      	add	r6, r3
 8005158:	6126      	str	r6, [r4, #16]
 800515a:	2000      	movs	r0, #0
 800515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005160 <_scanf_i>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	469a      	mov	sl, r3
 8005166:	4b74      	ldr	r3, [pc, #464]	; (8005338 <_scanf_i+0x1d8>)
 8005168:	460c      	mov	r4, r1
 800516a:	4683      	mov	fp, r0
 800516c:	4616      	mov	r6, r2
 800516e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005172:	b087      	sub	sp, #28
 8005174:	ab03      	add	r3, sp, #12
 8005176:	68a7      	ldr	r7, [r4, #8]
 8005178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800517c:	4b6f      	ldr	r3, [pc, #444]	; (800533c <_scanf_i+0x1dc>)
 800517e:	69a1      	ldr	r1, [r4, #24]
 8005180:	4a6f      	ldr	r2, [pc, #444]	; (8005340 <_scanf_i+0x1e0>)
 8005182:	2903      	cmp	r1, #3
 8005184:	bf18      	it	ne
 8005186:	461a      	movne	r2, r3
 8005188:	1e7b      	subs	r3, r7, #1
 800518a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800518e:	bf84      	itt	hi
 8005190:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005194:	60a3      	strhi	r3, [r4, #8]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	9200      	str	r2, [sp, #0]
 800519a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800519e:	bf88      	it	hi
 80051a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051a4:	f104 091c 	add.w	r9, r4, #28
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bf8c      	ite	hi
 80051ac:	197f      	addhi	r7, r7, r5
 80051ae:	2700      	movls	r7, #0
 80051b0:	464b      	mov	r3, r9
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	6831      	ldr	r1, [r6, #0]
 80051ba:	ab03      	add	r3, sp, #12
 80051bc:	2202      	movs	r2, #2
 80051be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80051c2:	7809      	ldrb	r1, [r1, #0]
 80051c4:	f7fb f82c 	bl	8000220 <memchr>
 80051c8:	9b01      	ldr	r3, [sp, #4]
 80051ca:	b328      	cbz	r0, 8005218 <_scanf_i+0xb8>
 80051cc:	f1b8 0f01 	cmp.w	r8, #1
 80051d0:	d156      	bne.n	8005280 <_scanf_i+0x120>
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	b92a      	cbnz	r2, 80051e2 <_scanf_i+0x82>
 80051d6:	2208      	movs	r2, #8
 80051d8:	6062      	str	r2, [r4, #4]
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	68a2      	ldr	r2, [r4, #8]
 80051ec:	1e51      	subs	r1, r2, #1
 80051ee:	60a1      	str	r1, [r4, #8]
 80051f0:	b192      	cbz	r2, 8005218 <_scanf_i+0xb8>
 80051f2:	6832      	ldr	r2, [r6, #0]
 80051f4:	1c51      	adds	r1, r2, #1
 80051f6:	6031      	str	r1, [r6, #0]
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	1c5d      	adds	r5, r3, #1
 80051fe:	6873      	ldr	r3, [r6, #4]
 8005200:	3b01      	subs	r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	6073      	str	r3, [r6, #4]
 8005206:	dc06      	bgt.n	8005216 <_scanf_i+0xb6>
 8005208:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800520c:	4631      	mov	r1, r6
 800520e:	4658      	mov	r0, fp
 8005210:	4798      	blx	r3
 8005212:	2800      	cmp	r0, #0
 8005214:	d176      	bne.n	8005304 <_scanf_i+0x1a4>
 8005216:	462b      	mov	r3, r5
 8005218:	f108 0801 	add.w	r8, r8, #1
 800521c:	f1b8 0f03 	cmp.w	r8, #3
 8005220:	d1c9      	bne.n	80051b6 <_scanf_i+0x56>
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	b90a      	cbnz	r2, 800522a <_scanf_i+0xca>
 8005226:	220a      	movs	r2, #10
 8005228:	6062      	str	r2, [r4, #4]
 800522a:	6862      	ldr	r2, [r4, #4]
 800522c:	4945      	ldr	r1, [pc, #276]	; (8005344 <_scanf_i+0x1e4>)
 800522e:	6960      	ldr	r0, [r4, #20]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	1a89      	subs	r1, r1, r2
 8005234:	f000 f8aa 	bl	800538c <__sccl>
 8005238:	9b01      	ldr	r3, [sp, #4]
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	461d      	mov	r5, r3
 8005240:	68a3      	ldr	r3, [r4, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d038      	beq.n	80052b8 <_scanf_i+0x158>
 8005246:	6831      	ldr	r1, [r6, #0]
 8005248:	6960      	ldr	r0, [r4, #20]
 800524a:	780a      	ldrb	r2, [r1, #0]
 800524c:	5c80      	ldrb	r0, [r0, r2]
 800524e:	2800      	cmp	r0, #0
 8005250:	d032      	beq.n	80052b8 <_scanf_i+0x158>
 8005252:	2a30      	cmp	r2, #48	; 0x30
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	d121      	bne.n	800529c <_scanf_i+0x13c>
 8005258:	0510      	lsls	r0, r2, #20
 800525a:	d51f      	bpl.n	800529c <_scanf_i+0x13c>
 800525c:	f108 0801 	add.w	r8, r8, #1
 8005260:	b117      	cbz	r7, 8005268 <_scanf_i+0x108>
 8005262:	3301      	adds	r3, #1
 8005264:	3f01      	subs	r7, #1
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	6873      	ldr	r3, [r6, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	6073      	str	r3, [r6, #4]
 8005270:	dd1b      	ble.n	80052aa <_scanf_i+0x14a>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	6033      	str	r3, [r6, #0]
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	3b01      	subs	r3, #1
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	e7df      	b.n	8005240 <_scanf_i+0xe0>
 8005280:	f1b8 0f02 	cmp.w	r8, #2
 8005284:	d1b1      	bne.n	80051ea <_scanf_i+0x8a>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800528c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005290:	d1c2      	bne.n	8005218 <_scanf_i+0xb8>
 8005292:	2110      	movs	r1, #16
 8005294:	6061      	str	r1, [r4, #4]
 8005296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529a:	e7a5      	b.n	80051e8 <_scanf_i+0x88>
 800529c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	780b      	ldrb	r3, [r1, #0]
 80052a4:	702b      	strb	r3, [r5, #0]
 80052a6:	3501      	adds	r5, #1
 80052a8:	e7de      	b.n	8005268 <_scanf_i+0x108>
 80052aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80052ae:	4631      	mov	r1, r6
 80052b0:	4658      	mov	r0, fp
 80052b2:	4798      	blx	r3
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d0df      	beq.n	8005278 <_scanf_i+0x118>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	05d9      	lsls	r1, r3, #23
 80052bc:	d50c      	bpl.n	80052d8 <_scanf_i+0x178>
 80052be:	454d      	cmp	r5, r9
 80052c0:	d908      	bls.n	80052d4 <_scanf_i+0x174>
 80052c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80052c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ca:	4632      	mov	r2, r6
 80052cc:	4658      	mov	r0, fp
 80052ce:	4798      	blx	r3
 80052d0:	1e6f      	subs	r7, r5, #1
 80052d2:	463d      	mov	r5, r7
 80052d4:	454d      	cmp	r5, r9
 80052d6:	d02c      	beq.n	8005332 <_scanf_i+0x1d2>
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	f012 0210 	ands.w	r2, r2, #16
 80052de:	d11e      	bne.n	800531e <_scanf_i+0x1be>
 80052e0:	702a      	strb	r2, [r5, #0]
 80052e2:	6863      	ldr	r3, [r4, #4]
 80052e4:	9e00      	ldr	r6, [sp, #0]
 80052e6:	4649      	mov	r1, r9
 80052e8:	4658      	mov	r0, fp
 80052ea:	47b0      	blx	r6
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	f8da 3000 	ldr.w	r3, [sl]
 80052f2:	f012 0f20 	tst.w	r2, #32
 80052f6:	d008      	beq.n	800530a <_scanf_i+0x1aa>
 80052f8:	1d1a      	adds	r2, r3, #4
 80052fa:	f8ca 2000 	str.w	r2, [sl]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6018      	str	r0, [r3, #0]
 8005302:	e009      	b.n	8005318 <_scanf_i+0x1b8>
 8005304:	f04f 0800 	mov.w	r8, #0
 8005308:	e7d6      	b.n	80052b8 <_scanf_i+0x158>
 800530a:	07d2      	lsls	r2, r2, #31
 800530c:	d5f4      	bpl.n	80052f8 <_scanf_i+0x198>
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	f8ca 2000 	str.w	r2, [sl]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	8018      	strh	r0, [r3, #0]
 8005318:	68e3      	ldr	r3, [r4, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60e3      	str	r3, [r4, #12]
 800531e:	eba5 0509 	sub.w	r5, r5, r9
 8005322:	44a8      	add	r8, r5
 8005324:	6925      	ldr	r5, [r4, #16]
 8005326:	4445      	add	r5, r8
 8005328:	6125      	str	r5, [r4, #16]
 800532a:	2000      	movs	r0, #0
 800532c:	b007      	add	sp, #28
 800532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005332:	2001      	movs	r0, #1
 8005334:	e7fa      	b.n	800532c <_scanf_i+0x1cc>
 8005336:	bf00      	nop
 8005338:	080068f0 	.word	0x080068f0
 800533c:	0800560d 	.word	0x0800560d
 8005340:	080054ed 	.word	0x080054ed
 8005344:	08006a5f 	.word	0x08006a5f

08005348 <_read_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4c07      	ldr	r4, [pc, #28]	; (8005368 <_read_r+0x20>)
 800534c:	4605      	mov	r5, r0
 800534e:	4608      	mov	r0, r1
 8005350:	4611      	mov	r1, r2
 8005352:	2200      	movs	r2, #0
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7fe fa74 	bl	8003844 <_read>
 800535c:	1c43      	adds	r3, r0, #1
 800535e:	d102      	bne.n	8005366 <_read_r+0x1e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	b103      	cbz	r3, 8005366 <_read_r+0x1e>
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	2000048c 	.word	0x2000048c

0800536c <_sbrk_r>:
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4c06      	ldr	r4, [pc, #24]	; (8005388 <_sbrk_r+0x1c>)
 8005370:	2300      	movs	r3, #0
 8005372:	4605      	mov	r5, r0
 8005374:	4608      	mov	r0, r1
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	f7fe fa36 	bl	80037e8 <_sbrk>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_sbrk_r+0x1a>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	b103      	cbz	r3, 8005386 <_sbrk_r+0x1a>
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	2000048c 	.word	0x2000048c

0800538c <__sccl>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	780b      	ldrb	r3, [r1, #0]
 8005390:	2b5e      	cmp	r3, #94	; 0x5e
 8005392:	bf13      	iteet	ne
 8005394:	1c4a      	addne	r2, r1, #1
 8005396:	1c8a      	addeq	r2, r1, #2
 8005398:	784b      	ldrbeq	r3, [r1, #1]
 800539a:	2100      	movne	r1, #0
 800539c:	bf08      	it	eq
 800539e:	2101      	moveq	r1, #1
 80053a0:	1e44      	subs	r4, r0, #1
 80053a2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80053a6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80053aa:	42a5      	cmp	r5, r4
 80053ac:	d1fb      	bne.n	80053a6 <__sccl+0x1a>
 80053ae:	b913      	cbnz	r3, 80053b6 <__sccl+0x2a>
 80053b0:	3a01      	subs	r2, #1
 80053b2:	4610      	mov	r0, r2
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	f081 0401 	eor.w	r4, r1, #1
 80053ba:	54c4      	strb	r4, [r0, r3]
 80053bc:	4611      	mov	r1, r2
 80053be:	780d      	ldrb	r5, [r1, #0]
 80053c0:	2d2d      	cmp	r5, #45	; 0x2d
 80053c2:	f101 0201 	add.w	r2, r1, #1
 80053c6:	d006      	beq.n	80053d6 <__sccl+0x4a>
 80053c8:	2d5d      	cmp	r5, #93	; 0x5d
 80053ca:	d0f2      	beq.n	80053b2 <__sccl+0x26>
 80053cc:	b90d      	cbnz	r5, 80053d2 <__sccl+0x46>
 80053ce:	460a      	mov	r2, r1
 80053d0:	e7ef      	b.n	80053b2 <__sccl+0x26>
 80053d2:	462b      	mov	r3, r5
 80053d4:	e7f1      	b.n	80053ba <__sccl+0x2e>
 80053d6:	784e      	ldrb	r6, [r1, #1]
 80053d8:	2e5d      	cmp	r6, #93	; 0x5d
 80053da:	d0fa      	beq.n	80053d2 <__sccl+0x46>
 80053dc:	42b3      	cmp	r3, r6
 80053de:	dcf8      	bgt.n	80053d2 <__sccl+0x46>
 80053e0:	3102      	adds	r1, #2
 80053e2:	3301      	adds	r3, #1
 80053e4:	429e      	cmp	r6, r3
 80053e6:	54c4      	strb	r4, [r0, r3]
 80053e8:	dcfb      	bgt.n	80053e2 <__sccl+0x56>
 80053ea:	e7e8      	b.n	80053be <__sccl+0x32>

080053ec <_strtol_l.isra.0>:
 80053ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	4680      	mov	r8, r0
 80053f2:	4689      	mov	r9, r1
 80053f4:	4692      	mov	sl, r2
 80053f6:	461f      	mov	r7, r3
 80053f8:	468b      	mov	fp, r1
 80053fa:	465d      	mov	r5, fp
 80053fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005402:	f000 f973 	bl	80056ec <__locale_ctype_ptr_l>
 8005406:	4420      	add	r0, r4
 8005408:	7846      	ldrb	r6, [r0, #1]
 800540a:	f016 0608 	ands.w	r6, r6, #8
 800540e:	d10b      	bne.n	8005428 <_strtol_l.isra.0+0x3c>
 8005410:	2c2d      	cmp	r4, #45	; 0x2d
 8005412:	d10b      	bne.n	800542c <_strtol_l.isra.0+0x40>
 8005414:	782c      	ldrb	r4, [r5, #0]
 8005416:	2601      	movs	r6, #1
 8005418:	f10b 0502 	add.w	r5, fp, #2
 800541c:	b167      	cbz	r7, 8005438 <_strtol_l.isra.0+0x4c>
 800541e:	2f10      	cmp	r7, #16
 8005420:	d114      	bne.n	800544c <_strtol_l.isra.0+0x60>
 8005422:	2c30      	cmp	r4, #48	; 0x30
 8005424:	d00a      	beq.n	800543c <_strtol_l.isra.0+0x50>
 8005426:	e011      	b.n	800544c <_strtol_l.isra.0+0x60>
 8005428:	46ab      	mov	fp, r5
 800542a:	e7e6      	b.n	80053fa <_strtol_l.isra.0+0xe>
 800542c:	2c2b      	cmp	r4, #43	; 0x2b
 800542e:	bf04      	itt	eq
 8005430:	782c      	ldrbeq	r4, [r5, #0]
 8005432:	f10b 0502 	addeq.w	r5, fp, #2
 8005436:	e7f1      	b.n	800541c <_strtol_l.isra.0+0x30>
 8005438:	2c30      	cmp	r4, #48	; 0x30
 800543a:	d127      	bne.n	800548c <_strtol_l.isra.0+0xa0>
 800543c:	782b      	ldrb	r3, [r5, #0]
 800543e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005442:	2b58      	cmp	r3, #88	; 0x58
 8005444:	d14b      	bne.n	80054de <_strtol_l.isra.0+0xf2>
 8005446:	786c      	ldrb	r4, [r5, #1]
 8005448:	2710      	movs	r7, #16
 800544a:	3502      	adds	r5, #2
 800544c:	2e00      	cmp	r6, #0
 800544e:	bf0c      	ite	eq
 8005450:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005454:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005458:	2200      	movs	r2, #0
 800545a:	fbb1 fef7 	udiv	lr, r1, r7
 800545e:	4610      	mov	r0, r2
 8005460:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005464:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005468:	2b09      	cmp	r3, #9
 800546a:	d811      	bhi.n	8005490 <_strtol_l.isra.0+0xa4>
 800546c:	461c      	mov	r4, r3
 800546e:	42a7      	cmp	r7, r4
 8005470:	dd1d      	ble.n	80054ae <_strtol_l.isra.0+0xc2>
 8005472:	1c53      	adds	r3, r2, #1
 8005474:	d007      	beq.n	8005486 <_strtol_l.isra.0+0x9a>
 8005476:	4586      	cmp	lr, r0
 8005478:	d316      	bcc.n	80054a8 <_strtol_l.isra.0+0xbc>
 800547a:	d101      	bne.n	8005480 <_strtol_l.isra.0+0x94>
 800547c:	45a4      	cmp	ip, r4
 800547e:	db13      	blt.n	80054a8 <_strtol_l.isra.0+0xbc>
 8005480:	fb00 4007 	mla	r0, r0, r7, r4
 8005484:	2201      	movs	r2, #1
 8005486:	f815 4b01 	ldrb.w	r4, [r5], #1
 800548a:	e7eb      	b.n	8005464 <_strtol_l.isra.0+0x78>
 800548c:	270a      	movs	r7, #10
 800548e:	e7dd      	b.n	800544c <_strtol_l.isra.0+0x60>
 8005490:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005494:	2b19      	cmp	r3, #25
 8005496:	d801      	bhi.n	800549c <_strtol_l.isra.0+0xb0>
 8005498:	3c37      	subs	r4, #55	; 0x37
 800549a:	e7e8      	b.n	800546e <_strtol_l.isra.0+0x82>
 800549c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80054a0:	2b19      	cmp	r3, #25
 80054a2:	d804      	bhi.n	80054ae <_strtol_l.isra.0+0xc2>
 80054a4:	3c57      	subs	r4, #87	; 0x57
 80054a6:	e7e2      	b.n	800546e <_strtol_l.isra.0+0x82>
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	e7eb      	b.n	8005486 <_strtol_l.isra.0+0x9a>
 80054ae:	1c53      	adds	r3, r2, #1
 80054b0:	d108      	bne.n	80054c4 <_strtol_l.isra.0+0xd8>
 80054b2:	2322      	movs	r3, #34	; 0x22
 80054b4:	f8c8 3000 	str.w	r3, [r8]
 80054b8:	4608      	mov	r0, r1
 80054ba:	f1ba 0f00 	cmp.w	sl, #0
 80054be:	d107      	bne.n	80054d0 <_strtol_l.isra.0+0xe4>
 80054c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c4:	b106      	cbz	r6, 80054c8 <_strtol_l.isra.0+0xdc>
 80054c6:	4240      	negs	r0, r0
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	d00c      	beq.n	80054e8 <_strtol_l.isra.0+0xfc>
 80054ce:	b122      	cbz	r2, 80054da <_strtol_l.isra.0+0xee>
 80054d0:	3d01      	subs	r5, #1
 80054d2:	f8ca 5000 	str.w	r5, [sl]
 80054d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054da:	464d      	mov	r5, r9
 80054dc:	e7f9      	b.n	80054d2 <_strtol_l.isra.0+0xe6>
 80054de:	2430      	movs	r4, #48	; 0x30
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	d1b3      	bne.n	800544c <_strtol_l.isra.0+0x60>
 80054e4:	2708      	movs	r7, #8
 80054e6:	e7b1      	b.n	800544c <_strtol_l.isra.0+0x60>
 80054e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080054ec <_strtol_r>:
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ee:	4c06      	ldr	r4, [pc, #24]	; (8005508 <_strtol_r+0x1c>)
 80054f0:	4d06      	ldr	r5, [pc, #24]	; (800550c <_strtol_r+0x20>)
 80054f2:	6824      	ldr	r4, [r4, #0]
 80054f4:	6a24      	ldr	r4, [r4, #32]
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	bf08      	it	eq
 80054fa:	462c      	moveq	r4, r5
 80054fc:	9400      	str	r4, [sp, #0]
 80054fe:	f7ff ff75 	bl	80053ec <_strtol_l.isra.0>
 8005502:	b003      	add	sp, #12
 8005504:	bd30      	pop	{r4, r5, pc}
 8005506:	bf00      	nop
 8005508:	20000020 	.word	0x20000020
 800550c:	20000084 	.word	0x20000084

08005510 <_strtoul_l.isra.0>:
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	4680      	mov	r8, r0
 8005516:	4689      	mov	r9, r1
 8005518:	4692      	mov	sl, r2
 800551a:	461e      	mov	r6, r3
 800551c:	460f      	mov	r7, r1
 800551e:	463d      	mov	r5, r7
 8005520:	9808      	ldr	r0, [sp, #32]
 8005522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005526:	f000 f8e1 	bl	80056ec <__locale_ctype_ptr_l>
 800552a:	4420      	add	r0, r4
 800552c:	7843      	ldrb	r3, [r0, #1]
 800552e:	f013 0308 	ands.w	r3, r3, #8
 8005532:	d10a      	bne.n	800554a <_strtoul_l.isra.0+0x3a>
 8005534:	2c2d      	cmp	r4, #45	; 0x2d
 8005536:	d10a      	bne.n	800554e <_strtoul_l.isra.0+0x3e>
 8005538:	782c      	ldrb	r4, [r5, #0]
 800553a:	2301      	movs	r3, #1
 800553c:	1cbd      	adds	r5, r7, #2
 800553e:	b15e      	cbz	r6, 8005558 <_strtoul_l.isra.0+0x48>
 8005540:	2e10      	cmp	r6, #16
 8005542:	d113      	bne.n	800556c <_strtoul_l.isra.0+0x5c>
 8005544:	2c30      	cmp	r4, #48	; 0x30
 8005546:	d009      	beq.n	800555c <_strtoul_l.isra.0+0x4c>
 8005548:	e010      	b.n	800556c <_strtoul_l.isra.0+0x5c>
 800554a:	462f      	mov	r7, r5
 800554c:	e7e7      	b.n	800551e <_strtoul_l.isra.0+0xe>
 800554e:	2c2b      	cmp	r4, #43	; 0x2b
 8005550:	bf04      	itt	eq
 8005552:	782c      	ldrbeq	r4, [r5, #0]
 8005554:	1cbd      	addeq	r5, r7, #2
 8005556:	e7f2      	b.n	800553e <_strtoul_l.isra.0+0x2e>
 8005558:	2c30      	cmp	r4, #48	; 0x30
 800555a:	d125      	bne.n	80055a8 <_strtoul_l.isra.0+0x98>
 800555c:	782a      	ldrb	r2, [r5, #0]
 800555e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005562:	2a58      	cmp	r2, #88	; 0x58
 8005564:	d14a      	bne.n	80055fc <_strtoul_l.isra.0+0xec>
 8005566:	786c      	ldrb	r4, [r5, #1]
 8005568:	2610      	movs	r6, #16
 800556a:	3502      	adds	r5, #2
 800556c:	f04f 31ff 	mov.w	r1, #4294967295
 8005570:	2700      	movs	r7, #0
 8005572:	fbb1 f1f6 	udiv	r1, r1, r6
 8005576:	fb06 fe01 	mul.w	lr, r6, r1
 800557a:	ea6f 0e0e 	mvn.w	lr, lr
 800557e:	4638      	mov	r0, r7
 8005580:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8005584:	2a09      	cmp	r2, #9
 8005586:	d811      	bhi.n	80055ac <_strtoul_l.isra.0+0x9c>
 8005588:	4614      	mov	r4, r2
 800558a:	42a6      	cmp	r6, r4
 800558c:	dd1d      	ble.n	80055ca <_strtoul_l.isra.0+0xba>
 800558e:	2f00      	cmp	r7, #0
 8005590:	db18      	blt.n	80055c4 <_strtoul_l.isra.0+0xb4>
 8005592:	4281      	cmp	r1, r0
 8005594:	d316      	bcc.n	80055c4 <_strtoul_l.isra.0+0xb4>
 8005596:	d101      	bne.n	800559c <_strtoul_l.isra.0+0x8c>
 8005598:	45a6      	cmp	lr, r4
 800559a:	db13      	blt.n	80055c4 <_strtoul_l.isra.0+0xb4>
 800559c:	fb00 4006 	mla	r0, r0, r6, r4
 80055a0:	2701      	movs	r7, #1
 80055a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055a6:	e7eb      	b.n	8005580 <_strtoul_l.isra.0+0x70>
 80055a8:	260a      	movs	r6, #10
 80055aa:	e7df      	b.n	800556c <_strtoul_l.isra.0+0x5c>
 80055ac:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80055b0:	2a19      	cmp	r2, #25
 80055b2:	d801      	bhi.n	80055b8 <_strtoul_l.isra.0+0xa8>
 80055b4:	3c37      	subs	r4, #55	; 0x37
 80055b6:	e7e8      	b.n	800558a <_strtoul_l.isra.0+0x7a>
 80055b8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80055bc:	2a19      	cmp	r2, #25
 80055be:	d804      	bhi.n	80055ca <_strtoul_l.isra.0+0xba>
 80055c0:	3c57      	subs	r4, #87	; 0x57
 80055c2:	e7e2      	b.n	800558a <_strtoul_l.isra.0+0x7a>
 80055c4:	f04f 37ff 	mov.w	r7, #4294967295
 80055c8:	e7eb      	b.n	80055a2 <_strtoul_l.isra.0+0x92>
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	da09      	bge.n	80055e2 <_strtoul_l.isra.0+0xd2>
 80055ce:	2322      	movs	r3, #34	; 0x22
 80055d0:	f8c8 3000 	str.w	r3, [r8]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	f1ba 0f00 	cmp.w	sl, #0
 80055dc:	d107      	bne.n	80055ee <_strtoul_l.isra.0+0xde>
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	b103      	cbz	r3, 80055e6 <_strtoul_l.isra.0+0xd6>
 80055e4:	4240      	negs	r0, r0
 80055e6:	f1ba 0f00 	cmp.w	sl, #0
 80055ea:	d00c      	beq.n	8005606 <_strtoul_l.isra.0+0xf6>
 80055ec:	b127      	cbz	r7, 80055f8 <_strtoul_l.isra.0+0xe8>
 80055ee:	3d01      	subs	r5, #1
 80055f0:	f8ca 5000 	str.w	r5, [sl]
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	464d      	mov	r5, r9
 80055fa:	e7f9      	b.n	80055f0 <_strtoul_l.isra.0+0xe0>
 80055fc:	2430      	movs	r4, #48	; 0x30
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d1b4      	bne.n	800556c <_strtoul_l.isra.0+0x5c>
 8005602:	2608      	movs	r6, #8
 8005604:	e7b2      	b.n	800556c <_strtoul_l.isra.0+0x5c>
 8005606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800560c <_strtoul_r>:
 800560c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800560e:	4c06      	ldr	r4, [pc, #24]	; (8005628 <_strtoul_r+0x1c>)
 8005610:	4d06      	ldr	r5, [pc, #24]	; (800562c <_strtoul_r+0x20>)
 8005612:	6824      	ldr	r4, [r4, #0]
 8005614:	6a24      	ldr	r4, [r4, #32]
 8005616:	2c00      	cmp	r4, #0
 8005618:	bf08      	it	eq
 800561a:	462c      	moveq	r4, r5
 800561c:	9400      	str	r4, [sp, #0]
 800561e:	f7ff ff77 	bl	8005510 <_strtoul_l.isra.0>
 8005622:	b003      	add	sp, #12
 8005624:	bd30      	pop	{r4, r5, pc}
 8005626:	bf00      	nop
 8005628:	20000020 	.word	0x20000020
 800562c:	20000084 	.word	0x20000084

08005630 <__submore>:
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	460c      	mov	r4, r1
 8005636:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800563c:	4299      	cmp	r1, r3
 800563e:	d11e      	bne.n	800567e <__submore+0x4e>
 8005640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005644:	f7ff f836 	bl	80046b4 <_malloc_r>
 8005648:	b918      	cbnz	r0, 8005652 <__submore+0x22>
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005656:	63a3      	str	r3, [r4, #56]	; 0x38
 8005658:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800565c:	6360      	str	r0, [r4, #52]	; 0x34
 800565e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005662:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005666:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800566a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800566e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005672:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005676:	6020      	str	r0, [r4, #0]
 8005678:	2000      	movs	r0, #0
 800567a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005680:	0077      	lsls	r7, r6, #1
 8005682:	463a      	mov	r2, r7
 8005684:	f000 f87d 	bl	8005782 <_realloc_r>
 8005688:	4605      	mov	r5, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d0dd      	beq.n	800564a <__submore+0x1a>
 800568e:	eb00 0806 	add.w	r8, r0, r6
 8005692:	4601      	mov	r1, r0
 8005694:	4632      	mov	r2, r6
 8005696:	4640      	mov	r0, r8
 8005698:	f000 f84c 	bl	8005734 <memcpy>
 800569c:	f8c4 8000 	str.w	r8, [r4]
 80056a0:	6365      	str	r5, [r4, #52]	; 0x34
 80056a2:	63a7      	str	r7, [r4, #56]	; 0x38
 80056a4:	e7e8      	b.n	8005678 <__submore+0x48>
	...

080056a8 <_fstat_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	4c07      	ldr	r4, [pc, #28]	; (80056c8 <_fstat_r+0x20>)
 80056ac:	2300      	movs	r3, #0
 80056ae:	4605      	mov	r5, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	f7fe f8ad 	bl	8003814 <_fstat>
 80056ba:	1c43      	adds	r3, r0, #1
 80056bc:	d102      	bne.n	80056c4 <_fstat_r+0x1c>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	b103      	cbz	r3, 80056c4 <_fstat_r+0x1c>
 80056c2:	602b      	str	r3, [r5, #0]
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	bf00      	nop
 80056c8:	2000048c 	.word	0x2000048c

080056cc <_isatty_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4c06      	ldr	r4, [pc, #24]	; (80056e8 <_isatty_r+0x1c>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4605      	mov	r5, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	f7fe f8a4 	bl	8003824 <_isatty>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_isatty_r+0x1a>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_isatty_r+0x1a>
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	2000048c 	.word	0x2000048c

080056ec <__locale_ctype_ptr_l>:
 80056ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80056f0:	4770      	bx	lr
	...

080056f4 <__locale_ctype_ptr>:
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <__locale_ctype_ptr+0x14>)
 80056f6:	4a05      	ldr	r2, [pc, #20]	; (800570c <__locale_ctype_ptr+0x18>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf08      	it	eq
 8005700:	4613      	moveq	r3, r2
 8005702:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005706:	4770      	bx	lr
 8005708:	20000020 	.word	0x20000020
 800570c:	20000084 	.word	0x20000084

08005710 <__ascii_mbtowc>:
 8005710:	b082      	sub	sp, #8
 8005712:	b901      	cbnz	r1, 8005716 <__ascii_mbtowc+0x6>
 8005714:	a901      	add	r1, sp, #4
 8005716:	b142      	cbz	r2, 800572a <__ascii_mbtowc+0x1a>
 8005718:	b14b      	cbz	r3, 800572e <__ascii_mbtowc+0x1e>
 800571a:	7813      	ldrb	r3, [r2, #0]
 800571c:	600b      	str	r3, [r1, #0]
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	1c10      	adds	r0, r2, #0
 8005722:	bf18      	it	ne
 8005724:	2001      	movne	r0, #1
 8005726:	b002      	add	sp, #8
 8005728:	4770      	bx	lr
 800572a:	4610      	mov	r0, r2
 800572c:	e7fb      	b.n	8005726 <__ascii_mbtowc+0x16>
 800572e:	f06f 0001 	mvn.w	r0, #1
 8005732:	e7f8      	b.n	8005726 <__ascii_mbtowc+0x16>

08005734 <memcpy>:
 8005734:	b510      	push	{r4, lr}
 8005736:	1e43      	subs	r3, r0, #1
 8005738:	440a      	add	r2, r1
 800573a:	4291      	cmp	r1, r2
 800573c:	d100      	bne.n	8005740 <memcpy+0xc>
 800573e:	bd10      	pop	{r4, pc}
 8005740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005748:	e7f7      	b.n	800573a <memcpy+0x6>

0800574a <memmove>:
 800574a:	4288      	cmp	r0, r1
 800574c:	b510      	push	{r4, lr}
 800574e:	eb01 0302 	add.w	r3, r1, r2
 8005752:	d803      	bhi.n	800575c <memmove+0x12>
 8005754:	1e42      	subs	r2, r0, #1
 8005756:	4299      	cmp	r1, r3
 8005758:	d10c      	bne.n	8005774 <memmove+0x2a>
 800575a:	bd10      	pop	{r4, pc}
 800575c:	4298      	cmp	r0, r3
 800575e:	d2f9      	bcs.n	8005754 <memmove+0xa>
 8005760:	1881      	adds	r1, r0, r2
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	42d3      	cmn	r3, r2
 8005766:	d100      	bne.n	800576a <memmove+0x20>
 8005768:	bd10      	pop	{r4, pc}
 800576a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800576e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005772:	e7f7      	b.n	8005764 <memmove+0x1a>
 8005774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005778:	f802 4f01 	strb.w	r4, [r2, #1]!
 800577c:	e7eb      	b.n	8005756 <memmove+0xc>

0800577e <__malloc_lock>:
 800577e:	4770      	bx	lr

08005780 <__malloc_unlock>:
 8005780:	4770      	bx	lr

08005782 <_realloc_r>:
 8005782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005784:	4607      	mov	r7, r0
 8005786:	4614      	mov	r4, r2
 8005788:	460e      	mov	r6, r1
 800578a:	b921      	cbnz	r1, 8005796 <_realloc_r+0x14>
 800578c:	4611      	mov	r1, r2
 800578e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005792:	f7fe bf8f 	b.w	80046b4 <_malloc_r>
 8005796:	b922      	cbnz	r2, 80057a2 <_realloc_r+0x20>
 8005798:	f7fe ff3e 	bl	8004618 <_free_r>
 800579c:	4625      	mov	r5, r4
 800579e:	4628      	mov	r0, r5
 80057a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a2:	f000 f821 	bl	80057e8 <_malloc_usable_size_r>
 80057a6:	4284      	cmp	r4, r0
 80057a8:	d90f      	bls.n	80057ca <_realloc_r+0x48>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4638      	mov	r0, r7
 80057ae:	f7fe ff81 	bl	80046b4 <_malloc_r>
 80057b2:	4605      	mov	r5, r0
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d0f2      	beq.n	800579e <_realloc_r+0x1c>
 80057b8:	4631      	mov	r1, r6
 80057ba:	4622      	mov	r2, r4
 80057bc:	f7ff ffba 	bl	8005734 <memcpy>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7fe ff28 	bl	8004618 <_free_r>
 80057c8:	e7e9      	b.n	800579e <_realloc_r+0x1c>
 80057ca:	4635      	mov	r5, r6
 80057cc:	e7e7      	b.n	800579e <_realloc_r+0x1c>

080057ce <__ascii_wctomb>:
 80057ce:	b149      	cbz	r1, 80057e4 <__ascii_wctomb+0x16>
 80057d0:	2aff      	cmp	r2, #255	; 0xff
 80057d2:	bf85      	ittet	hi
 80057d4:	238a      	movhi	r3, #138	; 0x8a
 80057d6:	6003      	strhi	r3, [r0, #0]
 80057d8:	700a      	strbls	r2, [r1, #0]
 80057da:	f04f 30ff 	movhi.w	r0, #4294967295
 80057de:	bf98      	it	ls
 80057e0:	2001      	movls	r0, #1
 80057e2:	4770      	bx	lr
 80057e4:	4608      	mov	r0, r1
 80057e6:	4770      	bx	lr

080057e8 <_malloc_usable_size_r>:
 80057e8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f1a0 0004 	sub.w	r0, r0, #4
 80057f2:	bfbc      	itt	lt
 80057f4:	580b      	ldrlt	r3, [r1, r0]
 80057f6:	18c0      	addlt	r0, r0, r3
 80057f8:	4770      	bx	lr
	...

080057fc <pow>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	ed2d 8b04 	vpush	{d8-d9}
 8005804:	b08d      	sub	sp, #52	; 0x34
 8005806:	ec57 6b10 	vmov	r6, r7, d0
 800580a:	ec55 4b11 	vmov	r4, r5, d1
 800580e:	f000 f96f 	bl	8005af0 <__ieee754_pow>
 8005812:	4bae      	ldr	r3, [pc, #696]	; (8005acc <pow+0x2d0>)
 8005814:	eeb0 8a40 	vmov.f32	s16, s0
 8005818:	eef0 8a60 	vmov.f32	s17, s1
 800581c:	f993 9000 	ldrsb.w	r9, [r3]
 8005820:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005824:	4698      	mov	r8, r3
 8005826:	d05f      	beq.n	80058e8 <pow+0xec>
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fb f998 	bl	8000b64 <__aeabi_dcmpun>
 8005834:	4683      	mov	fp, r0
 8005836:	2800      	cmp	r0, #0
 8005838:	d156      	bne.n	80058e8 <pow+0xec>
 800583a:	4632      	mov	r2, r6
 800583c:	463b      	mov	r3, r7
 800583e:	4630      	mov	r0, r6
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f98f 	bl	8000b64 <__aeabi_dcmpun>
 8005846:	9001      	str	r0, [sp, #4]
 8005848:	b1e8      	cbz	r0, 8005886 <pow+0x8a>
 800584a:	2200      	movs	r2, #0
 800584c:	2300      	movs	r3, #0
 800584e:	4620      	mov	r0, r4
 8005850:	4629      	mov	r1, r5
 8005852:	f7fb f955 	bl	8000b00 <__aeabi_dcmpeq>
 8005856:	2800      	cmp	r0, #0
 8005858:	d046      	beq.n	80058e8 <pow+0xec>
 800585a:	2301      	movs	r3, #1
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	4b9c      	ldr	r3, [pc, #624]	; (8005ad0 <pow+0x2d4>)
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	4b9c      	ldr	r3, [pc, #624]	; (8005ad4 <pow+0x2d8>)
 8005864:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8005868:	2200      	movs	r2, #0
 800586a:	f1b9 0f02 	cmp.w	r9, #2
 800586e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005872:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005876:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800587a:	d033      	beq.n	80058e4 <pow+0xe8>
 800587c:	a802      	add	r0, sp, #8
 800587e:	f000 ff08 	bl	8006692 <matherr>
 8005882:	bb48      	cbnz	r0, 80058d8 <pow+0xdc>
 8005884:	e05e      	b.n	8005944 <pow+0x148>
 8005886:	f04f 0a00 	mov.w	sl, #0
 800588a:	f04f 0b00 	mov.w	fp, #0
 800588e:	4652      	mov	r2, sl
 8005890:	465b      	mov	r3, fp
 8005892:	4630      	mov	r0, r6
 8005894:	4639      	mov	r1, r7
 8005896:	f7fb f933 	bl	8000b00 <__aeabi_dcmpeq>
 800589a:	ec4b ab19 	vmov	d9, sl, fp
 800589e:	2800      	cmp	r0, #0
 80058a0:	d055      	beq.n	800594e <pow+0x152>
 80058a2:	4652      	mov	r2, sl
 80058a4:	465b      	mov	r3, fp
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fb f929 	bl	8000b00 <__aeabi_dcmpeq>
 80058ae:	4680      	mov	r8, r0
 80058b0:	b318      	cbz	r0, 80058fa <pow+0xfe>
 80058b2:	2301      	movs	r3, #1
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	4b86      	ldr	r3, [pc, #536]	; (8005ad0 <pow+0x2d4>)
 80058b8:	9303      	str	r3, [sp, #12]
 80058ba:	9b01      	ldr	r3, [sp, #4]
 80058bc:	930a      	str	r3, [sp, #40]	; 0x28
 80058be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80058c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80058ca:	f1b9 0f00 	cmp.w	r9, #0
 80058ce:	d0d5      	beq.n	800587c <pow+0x80>
 80058d0:	4b80      	ldr	r3, [pc, #512]	; (8005ad4 <pow+0x2d8>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058da:	b11b      	cbz	r3, 80058e4 <pow+0xe8>
 80058dc:	f000 fff4 	bl	80068c8 <__errno>
 80058e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e2:	6003      	str	r3, [r0, #0]
 80058e4:	ed9d 8b08 	vldr	d8, [sp, #32]
 80058e8:	eeb0 0a48 	vmov.f32	s0, s16
 80058ec:	eef0 0a68 	vmov.f32	s1, s17
 80058f0:	b00d      	add	sp, #52	; 0x34
 80058f2:	ecbd 8b04 	vpop	{d8-d9}
 80058f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fa:	ec45 4b10 	vmov	d0, r4, r5
 80058fe:	f000 fec0 	bl	8006682 <finite>
 8005902:	2800      	cmp	r0, #0
 8005904:	d0f0      	beq.n	80058e8 <pow+0xec>
 8005906:	4652      	mov	r2, sl
 8005908:	465b      	mov	r3, fp
 800590a:	4620      	mov	r0, r4
 800590c:	4629      	mov	r1, r5
 800590e:	f7fb f901 	bl	8000b14 <__aeabi_dcmplt>
 8005912:	2800      	cmp	r0, #0
 8005914:	d0e8      	beq.n	80058e8 <pow+0xec>
 8005916:	2301      	movs	r3, #1
 8005918:	9302      	str	r3, [sp, #8]
 800591a:	4b6d      	ldr	r3, [pc, #436]	; (8005ad0 <pow+0x2d4>)
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	4b6b      	ldr	r3, [pc, #428]	; (8005acc <pow+0x2d0>)
 8005920:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005924:	f993 3000 	ldrsb.w	r3, [r3]
 8005928:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800592c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005930:	b913      	cbnz	r3, 8005938 <pow+0x13c>
 8005932:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005936:	e7a1      	b.n	800587c <pow+0x80>
 8005938:	4967      	ldr	r1, [pc, #412]	; (8005ad8 <pow+0x2dc>)
 800593a:	2000      	movs	r0, #0
 800593c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d19b      	bne.n	800587c <pow+0x80>
 8005944:	f000 ffc0 	bl	80068c8 <__errno>
 8005948:	2321      	movs	r3, #33	; 0x21
 800594a:	6003      	str	r3, [r0, #0]
 800594c:	e7c4      	b.n	80058d8 <pow+0xdc>
 800594e:	eeb0 0a48 	vmov.f32	s0, s16
 8005952:	eef0 0a68 	vmov.f32	s1, s17
 8005956:	f000 fe94 	bl	8006682 <finite>
 800595a:	9001      	str	r0, [sp, #4]
 800595c:	2800      	cmp	r0, #0
 800595e:	f040 808a 	bne.w	8005a76 <pow+0x27a>
 8005962:	ec47 6b10 	vmov	d0, r6, r7
 8005966:	f000 fe8c 	bl	8006682 <finite>
 800596a:	2800      	cmp	r0, #0
 800596c:	f000 8083 	beq.w	8005a76 <pow+0x27a>
 8005970:	ec45 4b10 	vmov	d0, r4, r5
 8005974:	f000 fe85 	bl	8006682 <finite>
 8005978:	2800      	cmp	r0, #0
 800597a:	d07c      	beq.n	8005a76 <pow+0x27a>
 800597c:	ec53 2b18 	vmov	r2, r3, d8
 8005980:	ee18 0a10 	vmov	r0, s16
 8005984:	4619      	mov	r1, r3
 8005986:	f7fb f8ed 	bl	8000b64 <__aeabi_dcmpun>
 800598a:	f998 9000 	ldrsb.w	r9, [r8]
 800598e:	4b50      	ldr	r3, [pc, #320]	; (8005ad0 <pow+0x2d4>)
 8005990:	b1b0      	cbz	r0, 80059c0 <pow+0x1c4>
 8005992:	2201      	movs	r2, #1
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	9b01      	ldr	r3, [sp, #4]
 8005998:	9202      	str	r2, [sp, #8]
 800599a:	930a      	str	r3, [sp, #40]	; 0x28
 800599c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80059a4:	f1b9 0f00 	cmp.w	r9, #0
 80059a8:	d0c3      	beq.n	8005932 <pow+0x136>
 80059aa:	4652      	mov	r2, sl
 80059ac:	465b      	mov	r3, fp
 80059ae:	4650      	mov	r0, sl
 80059b0:	4659      	mov	r1, fp
 80059b2:	f7fa ff67 	bl	8000884 <__aeabi_ddiv>
 80059b6:	f1b9 0f02 	cmp.w	r9, #2
 80059ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059be:	e7c0      	b.n	8005942 <pow+0x146>
 80059c0:	2203      	movs	r2, #3
 80059c2:	9202      	str	r2, [sp, #8]
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	900a      	str	r0, [sp, #40]	; 0x28
 80059c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80059cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80059d0:	f1b9 0f00 	cmp.w	r9, #0
 80059d4:	d12c      	bne.n	8005a30 <pow+0x234>
 80059d6:	4b41      	ldr	r3, [pc, #260]	; (8005adc <pow+0x2e0>)
 80059d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80059dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80059e0:	4630      	mov	r0, r6
 80059e2:	4652      	mov	r2, sl
 80059e4:	465b      	mov	r3, fp
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fb f894 	bl	8000b14 <__aeabi_dcmplt>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d066      	beq.n	8005abe <pow+0x2c2>
 80059f0:	2200      	movs	r2, #0
 80059f2:	4b3b      	ldr	r3, [pc, #236]	; (8005ae0 <pow+0x2e4>)
 80059f4:	4620      	mov	r0, r4
 80059f6:	4629      	mov	r1, r5
 80059f8:	f7fa fe1a 	bl	8000630 <__aeabi_dmul>
 80059fc:	4604      	mov	r4, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	ec45 4b10 	vmov	d0, r4, r5
 8005a04:	f000 fe50 	bl	80066a8 <rint>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	ec53 2b10 	vmov	r2, r3, d0
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fb f876 	bl	8000b00 <__aeabi_dcmpeq>
 8005a14:	b920      	cbnz	r0, 8005a20 <pow+0x224>
 8005a16:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <pow+0x2e8>)
 8005a18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a20:	f998 3000 	ldrsb.w	r3, [r8]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d14a      	bne.n	8005abe <pow+0x2c2>
 8005a28:	f000 ff4e 	bl	80068c8 <__errno>
 8005a2c:	2322      	movs	r3, #34	; 0x22
 8005a2e:	e78c      	b.n	800594a <pow+0x14e>
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <pow+0x2ec>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4652      	mov	r2, sl
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fb f868 	bl	8000b14 <__aeabi_dcmplt>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0eb      	beq.n	8005a20 <pow+0x224>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <pow+0x2e4>)
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fdee 	bl	8000630 <__aeabi_dmul>
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	ec45 4b10 	vmov	d0, r4, r5
 8005a5c:	f000 fe24 	bl	80066a8 <rint>
 8005a60:	4620      	mov	r0, r4
 8005a62:	ec53 2b10 	vmov	r2, r3, d0
 8005a66:	4629      	mov	r1, r5
 8005a68:	f7fb f84a 	bl	8000b00 <__aeabi_dcmpeq>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1d7      	bne.n	8005a20 <pow+0x224>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <pow+0x2dc>)
 8005a74:	e7d2      	b.n	8005a1c <pow+0x220>
 8005a76:	2200      	movs	r2, #0
 8005a78:	2300      	movs	r3, #0
 8005a7a:	ec51 0b18 	vmov	r0, r1, d8
 8005a7e:	f7fb f83f 	bl	8000b00 <__aeabi_dcmpeq>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	f43f af30 	beq.w	80058e8 <pow+0xec>
 8005a88:	ec47 6b10 	vmov	d0, r6, r7
 8005a8c:	f000 fdf9 	bl	8006682 <finite>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f af29 	beq.w	80058e8 <pow+0xec>
 8005a96:	ec45 4b10 	vmov	d0, r4, r5
 8005a9a:	f000 fdf2 	bl	8006682 <finite>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f43f af22 	beq.w	80058e8 <pow+0xec>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	9302      	str	r3, [sp, #8]
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <pow+0x2d4>)
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	2300      	movs	r3, #0
 8005aae:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005ab4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ab8:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005abc:	e7b0      	b.n	8005a20 <pow+0x224>
 8005abe:	a802      	add	r0, sp, #8
 8005ac0:	f000 fde7 	bl	8006692 <matherr>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	f47f af07 	bne.w	80058d8 <pow+0xdc>
 8005aca:	e7ad      	b.n	8005a28 <pow+0x22c>
 8005acc:	200001f0 	.word	0x200001f0
 8005ad0:	08006b75 	.word	0x08006b75
 8005ad4:	3ff00000 	.word	0x3ff00000
 8005ad8:	fff00000 	.word	0xfff00000
 8005adc:	47efffff 	.word	0x47efffff
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	c7efffff 	.word	0xc7efffff
 8005ae8:	7ff00000 	.word	0x7ff00000
 8005aec:	00000000 	.word	0x00000000

08005af0 <__ieee754_pow>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	b091      	sub	sp, #68	; 0x44
 8005af6:	ed8d 1b00 	vstr	d1, [sp]
 8005afa:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8005afe:	ec57 6b10 	vmov	r6, r7, d0
 8005b02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005b06:	ea58 0302 	orrs.w	r3, r8, r2
 8005b0a:	ee10 aa10 	vmov	sl, s0
 8005b0e:	463d      	mov	r5, r7
 8005b10:	f000 84bd 	beq.w	800648e <__ieee754_pow+0x99e>
 8005b14:	4b78      	ldr	r3, [pc, #480]	; (8005cf8 <__ieee754_pow+0x208>)
 8005b16:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	dc09      	bgt.n	8005b32 <__ieee754_pow+0x42>
 8005b1e:	d103      	bne.n	8005b28 <__ieee754_pow+0x38>
 8005b20:	b93e      	cbnz	r6, 8005b32 <__ieee754_pow+0x42>
 8005b22:	45a0      	cmp	r8, r4
 8005b24:	dc0d      	bgt.n	8005b42 <__ieee754_pow+0x52>
 8005b26:	e001      	b.n	8005b2c <__ieee754_pow+0x3c>
 8005b28:	4598      	cmp	r8, r3
 8005b2a:	dc02      	bgt.n	8005b32 <__ieee754_pow+0x42>
 8005b2c:	4598      	cmp	r8, r3
 8005b2e:	d10e      	bne.n	8005b4e <__ieee754_pow+0x5e>
 8005b30:	b16a      	cbz	r2, 8005b4e <__ieee754_pow+0x5e>
 8005b32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b3a:	ea54 030a 	orrs.w	r3, r4, sl
 8005b3e:	f000 84a6 	beq.w	800648e <__ieee754_pow+0x99e>
 8005b42:	486e      	ldr	r0, [pc, #440]	; (8005cfc <__ieee754_pow+0x20c>)
 8005b44:	b011      	add	sp, #68	; 0x44
 8005b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f000 bda5 	b.w	8006698 <nan>
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	da53      	bge.n	8005bfa <__ieee754_pow+0x10a>
 8005b52:	4b6b      	ldr	r3, [pc, #428]	; (8005d00 <__ieee754_pow+0x210>)
 8005b54:	4598      	cmp	r8, r3
 8005b56:	dc4d      	bgt.n	8005bf4 <__ieee754_pow+0x104>
 8005b58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005b5c:	4598      	cmp	r8, r3
 8005b5e:	dd4c      	ble.n	8005bfa <__ieee754_pow+0x10a>
 8005b60:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005b68:	2b14      	cmp	r3, #20
 8005b6a:	dd26      	ble.n	8005bba <__ieee754_pow+0xca>
 8005b6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005b70:	fa22 f103 	lsr.w	r1, r2, r3
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d13e      	bne.n	8005bfa <__ieee754_pow+0x10a>
 8005b7c:	f001 0101 	and.w	r1, r1, #1
 8005b80:	f1c1 0b02 	rsb	fp, r1, #2
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	d15b      	bne.n	8005c40 <__ieee754_pow+0x150>
 8005b88:	4b5b      	ldr	r3, [pc, #364]	; (8005cf8 <__ieee754_pow+0x208>)
 8005b8a:	4598      	cmp	r8, r3
 8005b8c:	d124      	bne.n	8005bd8 <__ieee754_pow+0xe8>
 8005b8e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005b92:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005b96:	ea53 030a 	orrs.w	r3, r3, sl
 8005b9a:	f000 8478 	beq.w	800648e <__ieee754_pow+0x99e>
 8005b9e:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <__ieee754_pow+0x214>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	dd2d      	ble.n	8005c00 <__ieee754_pow+0x110>
 8005ba4:	f1b9 0f00 	cmp.w	r9, #0
 8005ba8:	f280 8475 	bge.w	8006496 <__ieee754_pow+0x9a6>
 8005bac:	2000      	movs	r0, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	ec41 0b10 	vmov	d0, r0, r1
 8005bb4:	b011      	add	sp, #68	; 0x44
 8005bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d13e      	bne.n	8005c3c <__ieee754_pow+0x14c>
 8005bbe:	f1c3 0314 	rsb	r3, r3, #20
 8005bc2:	fa48 f103 	asr.w	r1, r8, r3
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	4598      	cmp	r8, r3
 8005bcc:	f040 846b 	bne.w	80064a6 <__ieee754_pow+0x9b6>
 8005bd0:	f001 0101 	and.w	r1, r1, #1
 8005bd4:	f1c1 0b02 	rsb	fp, r1, #2
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	; (8005d08 <__ieee754_pow+0x218>)
 8005bda:	4598      	cmp	r8, r3
 8005bdc:	d118      	bne.n	8005c10 <__ieee754_pow+0x120>
 8005bde:	f1b9 0f00 	cmp.w	r9, #0
 8005be2:	f280 845c 	bge.w	800649e <__ieee754_pow+0x9ae>
 8005be6:	4948      	ldr	r1, [pc, #288]	; (8005d08 <__ieee754_pow+0x218>)
 8005be8:	4632      	mov	r2, r6
 8005bea:	463b      	mov	r3, r7
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7fa fe49 	bl	8000884 <__aeabi_ddiv>
 8005bf2:	e7dd      	b.n	8005bb0 <__ieee754_pow+0xc0>
 8005bf4:	f04f 0b02 	mov.w	fp, #2
 8005bf8:	e7c4      	b.n	8005b84 <__ieee754_pow+0x94>
 8005bfa:	f04f 0b00 	mov.w	fp, #0
 8005bfe:	e7c1      	b.n	8005b84 <__ieee754_pow+0x94>
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	dad2      	bge.n	8005bac <__ieee754_pow+0xbc>
 8005c06:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8005c0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c0e:	e7cf      	b.n	8005bb0 <__ieee754_pow+0xc0>
 8005c10:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005c14:	d106      	bne.n	8005c24 <__ieee754_pow+0x134>
 8005c16:	4632      	mov	r2, r6
 8005c18:	463b      	mov	r3, r7
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f7fa fd07 	bl	8000630 <__aeabi_dmul>
 8005c22:	e7c5      	b.n	8005bb0 <__ieee754_pow+0xc0>
 8005c24:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <__ieee754_pow+0x21c>)
 8005c26:	4599      	cmp	r9, r3
 8005c28:	d10a      	bne.n	8005c40 <__ieee754_pow+0x150>
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	db08      	blt.n	8005c40 <__ieee754_pow+0x150>
 8005c2e:	ec47 6b10 	vmov	d0, r6, r7
 8005c32:	b011      	add	sp, #68	; 0x44
 8005c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	f000 bc6c 	b.w	8006514 <__ieee754_sqrt>
 8005c3c:	f04f 0b00 	mov.w	fp, #0
 8005c40:	ec47 6b10 	vmov	d0, r6, r7
 8005c44:	f000 fd16 	bl	8006674 <fabs>
 8005c48:	ec51 0b10 	vmov	r0, r1, d0
 8005c4c:	f1ba 0f00 	cmp.w	sl, #0
 8005c50:	d127      	bne.n	8005ca2 <__ieee754_pow+0x1b2>
 8005c52:	b124      	cbz	r4, 8005c5e <__ieee754_pow+0x16e>
 8005c54:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <__ieee754_pow+0x218>)
 8005c56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d121      	bne.n	8005ca2 <__ieee754_pow+0x1b2>
 8005c5e:	f1b9 0f00 	cmp.w	r9, #0
 8005c62:	da05      	bge.n	8005c70 <__ieee754_pow+0x180>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	2000      	movs	r0, #0
 8005c6a:	4927      	ldr	r1, [pc, #156]	; (8005d08 <__ieee754_pow+0x218>)
 8005c6c:	f7fa fe0a 	bl	8000884 <__aeabi_ddiv>
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	da9d      	bge.n	8005bb0 <__ieee754_pow+0xc0>
 8005c74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005c78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005c7c:	ea54 030b 	orrs.w	r3, r4, fp
 8005c80:	d108      	bne.n	8005c94 <__ieee754_pow+0x1a4>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f7fa fb1d 	bl	80002c8 <__aeabi_dsub>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	e7ac      	b.n	8005bee <__ieee754_pow+0xfe>
 8005c94:	f1bb 0f01 	cmp.w	fp, #1
 8005c98:	d18a      	bne.n	8005bb0 <__ieee754_pow+0xc0>
 8005c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	e786      	b.n	8005bb0 <__ieee754_pow+0xc0>
 8005ca2:	0fed      	lsrs	r5, r5, #31
 8005ca4:	1e6b      	subs	r3, r5, #1
 8005ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ca8:	ea5b 0303 	orrs.w	r3, fp, r3
 8005cac:	d102      	bne.n	8005cb4 <__ieee754_pow+0x1c4>
 8005cae:	4632      	mov	r2, r6
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	e7e8      	b.n	8005c86 <__ieee754_pow+0x196>
 8005cb4:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__ieee754_pow+0x220>)
 8005cb6:	4598      	cmp	r8, r3
 8005cb8:	f340 80fe 	ble.w	8005eb8 <__ieee754_pow+0x3c8>
 8005cbc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005cc0:	4598      	cmp	r8, r3
 8005cc2:	dd0a      	ble.n	8005cda <__ieee754_pow+0x1ea>
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <__ieee754_pow+0x214>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	dc0d      	bgt.n	8005ce6 <__ieee754_pow+0x1f6>
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	f6bf af6d 	bge.w	8005bac <__ieee754_pow+0xbc>
 8005cd2:	a307      	add	r3, pc, #28	; (adr r3, 8005cf0 <__ieee754_pow+0x200>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	e79f      	b.n	8005c1a <__ieee754_pow+0x12a>
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <__ieee754_pow+0x224>)
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	ddf4      	ble.n	8005cca <__ieee754_pow+0x1da>
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <__ieee754_pow+0x218>)
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	dd18      	ble.n	8005d18 <__ieee754_pow+0x228>
 8005ce6:	f1b9 0f00 	cmp.w	r9, #0
 8005cea:	dcf2      	bgt.n	8005cd2 <__ieee754_pow+0x1e2>
 8005cec:	e75e      	b.n	8005bac <__ieee754_pow+0xbc>
 8005cee:	bf00      	nop
 8005cf0:	8800759c 	.word	0x8800759c
 8005cf4:	7e37e43c 	.word	0x7e37e43c
 8005cf8:	7ff00000 	.word	0x7ff00000
 8005cfc:	08006a21 	.word	0x08006a21
 8005d00:	433fffff 	.word	0x433fffff
 8005d04:	3fefffff 	.word	0x3fefffff
 8005d08:	3ff00000 	.word	0x3ff00000
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	41e00000 	.word	0x41e00000
 8005d14:	3feffffe 	.word	0x3feffffe
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <__ieee754_pow+0x3b8>)
 8005d1c:	f7fa fad4 	bl	80002c8 <__aeabi_dsub>
 8005d20:	a355      	add	r3, pc, #340	; (adr r3, 8005e78 <__ieee754_pow+0x388>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	f7fa fc81 	bl	8000630 <__aeabi_dmul>
 8005d2e:	a354      	add	r3, pc, #336	; (adr r3, 8005e80 <__ieee754_pow+0x390>)
 8005d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4620      	mov	r0, r4
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	f7fa fc78 	bl	8000630 <__aeabi_dmul>
 8005d40:	2200      	movs	r2, #0
 8005d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d46:	4b59      	ldr	r3, [pc, #356]	; (8005eac <__ieee754_pow+0x3bc>)
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fc70 	bl	8000630 <__aeabi_dmul>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	a14c      	add	r1, pc, #304	; (adr r1, 8005e88 <__ieee754_pow+0x398>)
 8005d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d5a:	f7fa fab5 	bl	80002c8 <__aeabi_dsub>
 8005d5e:	4622      	mov	r2, r4
 8005d60:	462b      	mov	r3, r5
 8005d62:	f7fa fc65 	bl	8000630 <__aeabi_dmul>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4950      	ldr	r1, [pc, #320]	; (8005eb0 <__ieee754_pow+0x3c0>)
 8005d6e:	f7fa faab 	bl	80002c8 <__aeabi_dsub>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7fa fc57 	bl	8000630 <__aeabi_dmul>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fc51 	bl	8000630 <__aeabi_dmul>
 8005d8e:	a340      	add	r3, pc, #256	; (adr r3, 8005e90 <__ieee754_pow+0x3a0>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fc4c 	bl	8000630 <__aeabi_dmul>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da0:	f7fa fa92 	bl	80002c8 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4604      	mov	r4, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fa8c 	bl	80002cc <__adddf3>
 8005db4:	2000      	movs	r0, #0
 8005db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	f7fa fa83 	bl	80002c8 <__aeabi_dsub>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa fa7d 	bl	80002c8 <__aeabi_dsub>
 8005dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dd0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460f      	mov	r7, r1
 8005dda:	f040 81eb 	bne.w	80061b4 <__ieee754_pow+0x6c4>
 8005dde:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005e98 <__ieee754_pow+0x3a8>
 8005de2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005de6:	2400      	movs	r4, #0
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005df0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005df4:	f7fa fa68 	bl	80002c8 <__aeabi_dsub>
 8005df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dfc:	f7fa fc18 	bl	8000630 <__aeabi_dmul>
 8005e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e04:	4680      	mov	r8, r0
 8005e06:	4689      	mov	r9, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fc10 	bl	8000630 <__aeabi_dmul>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4640      	mov	r0, r8
 8005e16:	4649      	mov	r1, r9
 8005e18:	f7fa fa58 	bl	80002cc <__adddf3>
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	462b      	mov	r3, r5
 8005e20:	4680      	mov	r8, r0
 8005e22:	4689      	mov	r9, r1
 8005e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e28:	f7fa fc02 	bl	8000630 <__aeabi_dmul>
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	4602      	mov	r2, r0
 8005e34:	4649      	mov	r1, r9
 8005e36:	4640      	mov	r0, r8
 8005e38:	e9cd 4500 	strd	r4, r5, [sp]
 8005e3c:	f7fa fa46 	bl	80002cc <__adddf3>
 8005e40:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <__ieee754_pow+0x3c4>)
 8005e42:	4299      	cmp	r1, r3
 8005e44:	4606      	mov	r6, r0
 8005e46:	460f      	mov	r7, r1
 8005e48:	468b      	mov	fp, r1
 8005e4a:	f340 82f7 	ble.w	800643c <__ieee754_pow+0x94c>
 8005e4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005e52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005e56:	4303      	orrs	r3, r0
 8005e58:	f000 81ea 	beq.w	8006230 <__ieee754_pow+0x740>
 8005e5c:	a310      	add	r3, pc, #64	; (adr r3, 8005ea0 <__ieee754_pow+0x3b0>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e66:	f7fa fbe3 	bl	8000630 <__aeabi_dmul>
 8005e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8005ea0 <__ieee754_pow+0x3b0>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	e6d5      	b.n	8005c1e <__ieee754_pow+0x12e>
 8005e72:	bf00      	nop
 8005e74:	f3af 8000 	nop.w
 8005e78:	60000000 	.word	0x60000000
 8005e7c:	3ff71547 	.word	0x3ff71547
 8005e80:	f85ddf44 	.word	0xf85ddf44
 8005e84:	3e54ae0b 	.word	0x3e54ae0b
 8005e88:	55555555 	.word	0x55555555
 8005e8c:	3fd55555 	.word	0x3fd55555
 8005e90:	652b82fe 	.word	0x652b82fe
 8005e94:	3ff71547 	.word	0x3ff71547
 8005e98:	00000000 	.word	0x00000000
 8005e9c:	bff00000 	.word	0xbff00000
 8005ea0:	8800759c 	.word	0x8800759c
 8005ea4:	7e37e43c 	.word	0x7e37e43c
 8005ea8:	3ff00000 	.word	0x3ff00000
 8005eac:	3fd00000 	.word	0x3fd00000
 8005eb0:	3fe00000 	.word	0x3fe00000
 8005eb4:	408fffff 	.word	0x408fffff
 8005eb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	da05      	bge.n	8005ece <__ieee754_pow+0x3de>
 8005ec2:	4bd3      	ldr	r3, [pc, #844]	; (8006210 <__ieee754_pow+0x720>)
 8005ec4:	f7fa fbb4 	bl	8000630 <__aeabi_dmul>
 8005ec8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005ecc:	460c      	mov	r4, r1
 8005ece:	1523      	asrs	r3, r4, #20
 8005ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005ed4:	4413      	add	r3, r2
 8005ed6:	9307      	str	r3, [sp, #28]
 8005ed8:	4bce      	ldr	r3, [pc, #824]	; (8006214 <__ieee754_pow+0x724>)
 8005eda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005ede:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005ee8:	dd08      	ble.n	8005efc <__ieee754_pow+0x40c>
 8005eea:	4bcb      	ldr	r3, [pc, #812]	; (8006218 <__ieee754_pow+0x728>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	f340 815e 	ble.w	80061ae <__ieee754_pow+0x6be>
 8005ef2:	9b07      	ldr	r3, [sp, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	9307      	str	r3, [sp, #28]
 8005ef8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005efc:	f04f 0a00 	mov.w	sl, #0
 8005f00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005f04:	930c      	str	r3, [sp, #48]	; 0x30
 8005f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f08:	4bc4      	ldr	r3, [pc, #784]	; (800621c <__ieee754_pow+0x72c>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	ed93 7b00 	vldr	d7, [r3]
 8005f10:	4629      	mov	r1, r5
 8005f12:	ec53 2b17 	vmov	r2, r3, d7
 8005f16:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005f1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f1e:	f7fa f9d3 	bl	80002c8 <__aeabi_dsub>
 8005f22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f2e:	f7fa f9cd 	bl	80002cc <__adddf3>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	2000      	movs	r0, #0
 8005f38:	49b9      	ldr	r1, [pc, #740]	; (8006220 <__ieee754_pow+0x730>)
 8005f3a:	f7fa fca3 	bl	8000884 <__aeabi_ddiv>
 8005f3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa fb71 	bl	8000630 <__aeabi_dmul>
 8005f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f52:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005f56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9302      	str	r3, [sp, #8]
 8005f5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f62:	106d      	asrs	r5, r5, #1
 8005f64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005f68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005f72:	4640      	mov	r0, r8
 8005f74:	4649      	mov	r1, r9
 8005f76:	4614      	mov	r4, r2
 8005f78:	461d      	mov	r5, r3
 8005f7a:	f7fa fb59 	bl	8000630 <__aeabi_dmul>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa f99f 	bl	80002c8 <__aeabi_dsub>
 8005f8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460f      	mov	r7, r1
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7fa f997 	bl	80002c8 <__aeabi_dsub>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fa2:	f7fa f991 	bl	80002c8 <__aeabi_dsub>
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	f7fa fb41 	bl	8000630 <__aeabi_dmul>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	f7fa f987 	bl	80002c8 <__aeabi_dsub>
 8005fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005fbe:	f7fa fb37 	bl	8000630 <__aeabi_dmul>
 8005fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f7fa fb2f 	bl	8000630 <__aeabi_dmul>
 8005fd2:	a37b      	add	r3, pc, #492	; (adr r3, 80061c0 <__ieee754_pow+0x6d0>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	4604      	mov	r4, r0
 8005fda:	460d      	mov	r5, r1
 8005fdc:	f7fa fb28 	bl	8000630 <__aeabi_dmul>
 8005fe0:	a379      	add	r3, pc, #484	; (adr r3, 80061c8 <__ieee754_pow+0x6d8>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa f971 	bl	80002cc <__adddf3>
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f7fa fb1f 	bl	8000630 <__aeabi_dmul>
 8005ff2:	a377      	add	r3, pc, #476	; (adr r3, 80061d0 <__ieee754_pow+0x6e0>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa f968 	bl	80002cc <__adddf3>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	f7fa fb16 	bl	8000630 <__aeabi_dmul>
 8006004:	a374      	add	r3, pc, #464	; (adr r3, 80061d8 <__ieee754_pow+0x6e8>)
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f7fa f95f 	bl	80002cc <__adddf3>
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	f7fa fb0d 	bl	8000630 <__aeabi_dmul>
 8006016:	a372      	add	r3, pc, #456	; (adr r3, 80061e0 <__ieee754_pow+0x6f0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa f956 	bl	80002cc <__adddf3>
 8006020:	4622      	mov	r2, r4
 8006022:	462b      	mov	r3, r5
 8006024:	f7fa fb04 	bl	8000630 <__aeabi_dmul>
 8006028:	a36f      	add	r3, pc, #444	; (adr r3, 80061e8 <__ieee754_pow+0x6f8>)
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f7fa f94d 	bl	80002cc <__adddf3>
 8006032:	4622      	mov	r2, r4
 8006034:	4606      	mov	r6, r0
 8006036:	460f      	mov	r7, r1
 8006038:	462b      	mov	r3, r5
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fa faf7 	bl	8000630 <__aeabi_dmul>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4630      	mov	r0, r6
 8006048:	4639      	mov	r1, r7
 800604a:	f7fa faf1 	bl	8000630 <__aeabi_dmul>
 800604e:	4642      	mov	r2, r8
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	464b      	mov	r3, r9
 8006056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800605a:	f7fa f937 	bl	80002cc <__adddf3>
 800605e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006062:	f7fa fae5 	bl	8000630 <__aeabi_dmul>
 8006066:	4622      	mov	r2, r4
 8006068:	462b      	mov	r3, r5
 800606a:	f7fa f92f 	bl	80002cc <__adddf3>
 800606e:	4642      	mov	r2, r8
 8006070:	4606      	mov	r6, r0
 8006072:	460f      	mov	r7, r1
 8006074:	464b      	mov	r3, r9
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fad9 	bl	8000630 <__aeabi_dmul>
 800607e:	2200      	movs	r2, #0
 8006080:	4b68      	ldr	r3, [pc, #416]	; (8006224 <__ieee754_pow+0x734>)
 8006082:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006086:	f7fa f921 	bl	80002cc <__adddf3>
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	f7fa f91d 	bl	80002cc <__adddf3>
 8006092:	9802      	ldr	r0, [sp, #8]
 8006094:	460d      	mov	r5, r1
 8006096:	4604      	mov	r4, r0
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa fac6 	bl	8000630 <__aeabi_dmul>
 80060a4:	2200      	movs	r2, #0
 80060a6:	4680      	mov	r8, r0
 80060a8:	4689      	mov	r9, r1
 80060aa:	4b5e      	ldr	r3, [pc, #376]	; (8006224 <__ieee754_pow+0x734>)
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa f90a 	bl	80002c8 <__aeabi_dsub>
 80060b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060b8:	f7fa f906 	bl	80002c8 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa f900 	bl	80002c8 <__aeabi_dsub>
 80060c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060cc:	f7fa fab0 	bl	8000630 <__aeabi_dmul>
 80060d0:	4622      	mov	r2, r4
 80060d2:	4606      	mov	r6, r0
 80060d4:	460f      	mov	r7, r1
 80060d6:	462b      	mov	r3, r5
 80060d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060dc:	f7fa faa8 	bl	8000630 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f8f0 	bl	80002cc <__adddf3>
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4640      	mov	r0, r8
 80060f6:	4649      	mov	r1, r9
 80060f8:	f7fa f8e8 	bl	80002cc <__adddf3>
 80060fc:	9802      	ldr	r0, [sp, #8]
 80060fe:	a33c      	add	r3, pc, #240	; (adr r3, 80061f0 <__ieee754_pow+0x700>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	f7fa fa92 	bl	8000630 <__aeabi_dmul>
 800610c:	4642      	mov	r2, r8
 800610e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006112:	464b      	mov	r3, r9
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa f8d6 	bl	80002c8 <__aeabi_dsub>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4630      	mov	r0, r6
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa f8d0 	bl	80002c8 <__aeabi_dsub>
 8006128:	a333      	add	r3, pc, #204	; (adr r3, 80061f8 <__ieee754_pow+0x708>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa7f 	bl	8000630 <__aeabi_dmul>
 8006132:	a333      	add	r3, pc, #204	; (adr r3, 8006200 <__ieee754_pow+0x710>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	4606      	mov	r6, r0
 800613a:	460f      	mov	r7, r1
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa fa76 	bl	8000630 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa f8be 	bl	80002cc <__adddf3>
 8006150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006152:	4b35      	ldr	r3, [pc, #212]	; (8006228 <__ieee754_pow+0x738>)
 8006154:	4413      	add	r3, r2
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7fa f8b7 	bl	80002cc <__adddf3>
 800615e:	4604      	mov	r4, r0
 8006160:	9807      	ldr	r0, [sp, #28]
 8006162:	460d      	mov	r5, r1
 8006164:	f7fa f9fe 	bl	8000564 <__aeabi_i2d>
 8006168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800616a:	4b30      	ldr	r3, [pc, #192]	; (800622c <__ieee754_pow+0x73c>)
 800616c:	4413      	add	r3, r2
 800616e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006172:	4606      	mov	r6, r0
 8006174:	460f      	mov	r7, r1
 8006176:	4622      	mov	r2, r4
 8006178:	462b      	mov	r3, r5
 800617a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800617e:	f7fa f8a5 	bl	80002cc <__adddf3>
 8006182:	4642      	mov	r2, r8
 8006184:	464b      	mov	r3, r9
 8006186:	f7fa f8a1 	bl	80002cc <__adddf3>
 800618a:	4632      	mov	r2, r6
 800618c:	463b      	mov	r3, r7
 800618e:	f7fa f89d 	bl	80002cc <__adddf3>
 8006192:	9802      	ldr	r0, [sp, #8]
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800619c:	f7fa f894 	bl	80002c8 <__aeabi_dsub>
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	f7fa f890 	bl	80002c8 <__aeabi_dsub>
 80061a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061ac:	e607      	b.n	8005dbe <__ieee754_pow+0x2ce>
 80061ae:	f04f 0a01 	mov.w	sl, #1
 80061b2:	e6a5      	b.n	8005f00 <__ieee754_pow+0x410>
 80061b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006208 <__ieee754_pow+0x718>
 80061b8:	e613      	b.n	8005de2 <__ieee754_pow+0x2f2>
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w
 80061c0:	4a454eef 	.word	0x4a454eef
 80061c4:	3fca7e28 	.word	0x3fca7e28
 80061c8:	93c9db65 	.word	0x93c9db65
 80061cc:	3fcd864a 	.word	0x3fcd864a
 80061d0:	a91d4101 	.word	0xa91d4101
 80061d4:	3fd17460 	.word	0x3fd17460
 80061d8:	518f264d 	.word	0x518f264d
 80061dc:	3fd55555 	.word	0x3fd55555
 80061e0:	db6fabff 	.word	0xdb6fabff
 80061e4:	3fdb6db6 	.word	0x3fdb6db6
 80061e8:	33333303 	.word	0x33333303
 80061ec:	3fe33333 	.word	0x3fe33333
 80061f0:	e0000000 	.word	0xe0000000
 80061f4:	3feec709 	.word	0x3feec709
 80061f8:	dc3a03fd 	.word	0xdc3a03fd
 80061fc:	3feec709 	.word	0x3feec709
 8006200:	145b01f5 	.word	0x145b01f5
 8006204:	be3e2fe0 	.word	0xbe3e2fe0
 8006208:	00000000 	.word	0x00000000
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	43400000 	.word	0x43400000
 8006214:	0003988e 	.word	0x0003988e
 8006218:	000bb679 	.word	0x000bb679
 800621c:	08006b80 	.word	0x08006b80
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	40080000 	.word	0x40080000
 8006228:	08006ba0 	.word	0x08006ba0
 800622c:	08006b90 	.word	0x08006b90
 8006230:	a3b6      	add	r3, pc, #728	; (adr r3, 800650c <__ieee754_pow+0xa1c>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	4640      	mov	r0, r8
 8006238:	4649      	mov	r1, r9
 800623a:	f7fa f847 	bl	80002cc <__adddf3>
 800623e:	4622      	mov	r2, r4
 8006240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006244:	462b      	mov	r3, r5
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7fa f83d 	bl	80002c8 <__aeabi_dsub>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006256:	f7fa fc7b 	bl	8000b50 <__aeabi_dcmpgt>
 800625a:	2800      	cmp	r0, #0
 800625c:	f47f adfe 	bne.w	8005e5c <__ieee754_pow+0x36c>
 8006260:	4aa5      	ldr	r2, [pc, #660]	; (80064f8 <__ieee754_pow+0xa08>)
 8006262:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006266:	4293      	cmp	r3, r2
 8006268:	f340 810c 	ble.w	8006484 <__ieee754_pow+0x994>
 800626c:	151b      	asrs	r3, r3, #20
 800626e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006272:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006276:	fa4a f303 	asr.w	r3, sl, r3
 800627a:	445b      	add	r3, fp
 800627c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006280:	4e9e      	ldr	r6, [pc, #632]	; (80064fc <__ieee754_pow+0xa0c>)
 8006282:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006286:	4116      	asrs	r6, r2
 8006288:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800628c:	2000      	movs	r0, #0
 800628e:	ea23 0106 	bic.w	r1, r3, r6
 8006292:	f1c2 0214 	rsb	r2, r2, #20
 8006296:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800629a:	fa4a fa02 	asr.w	sl, sl, r2
 800629e:	f1bb 0f00 	cmp.w	fp, #0
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	bfb8      	it	lt
 80062ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80062b0:	f7fa f80a 	bl	80002c8 <__aeabi_dsub>
 80062b4:	e9cd 0100 	strd	r0, r1, [sp]
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062c0:	f7fa f804 	bl	80002cc <__adddf3>
 80062c4:	2000      	movs	r0, #0
 80062c6:	a37a      	add	r3, pc, #488	; (adr r3, 80064b0 <__ieee754_pow+0x9c0>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	4604      	mov	r4, r0
 80062ce:	460d      	mov	r5, r1
 80062d0:	f7fa f9ae 	bl	8000630 <__aeabi_dmul>
 80062d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 fff2 	bl	80002c8 <__aeabi_dsub>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4640      	mov	r0, r8
 80062ea:	4649      	mov	r1, r9
 80062ec:	f7f9 ffec 	bl	80002c8 <__aeabi_dsub>
 80062f0:	a371      	add	r3, pc, #452	; (adr r3, 80064b8 <__ieee754_pow+0x9c8>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f99b 	bl	8000630 <__aeabi_dmul>
 80062fa:	a371      	add	r3, pc, #452	; (adr r3, 80064c0 <__ieee754_pow+0x9d0>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	4680      	mov	r8, r0
 8006302:	4689      	mov	r9, r1
 8006304:	4620      	mov	r0, r4
 8006306:	4629      	mov	r1, r5
 8006308:	f7fa f992 	bl	8000630 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7f9 ffda 	bl	80002cc <__adddf3>
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4630      	mov	r0, r6
 8006322:	4639      	mov	r1, r7
 8006324:	f7f9 ffd2 	bl	80002cc <__adddf3>
 8006328:	4632      	mov	r2, r6
 800632a:	463b      	mov	r3, r7
 800632c:	4680      	mov	r8, r0
 800632e:	4689      	mov	r9, r1
 8006330:	f7f9 ffca 	bl	80002c8 <__aeabi_dsub>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4620      	mov	r0, r4
 800633a:	4629      	mov	r1, r5
 800633c:	f7f9 ffc4 	bl	80002c8 <__aeabi_dsub>
 8006340:	4642      	mov	r2, r8
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	464b      	mov	r3, r9
 8006348:	4640      	mov	r0, r8
 800634a:	4649      	mov	r1, r9
 800634c:	f7fa f970 	bl	8000630 <__aeabi_dmul>
 8006350:	a35d      	add	r3, pc, #372	; (adr r3, 80064c8 <__ieee754_pow+0x9d8>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	4604      	mov	r4, r0
 8006358:	460d      	mov	r5, r1
 800635a:	f7fa f969 	bl	8000630 <__aeabi_dmul>
 800635e:	a35c      	add	r3, pc, #368	; (adr r3, 80064d0 <__ieee754_pow+0x9e0>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	f7f9 ffb0 	bl	80002c8 <__aeabi_dsub>
 8006368:	4622      	mov	r2, r4
 800636a:	462b      	mov	r3, r5
 800636c:	f7fa f960 	bl	8000630 <__aeabi_dmul>
 8006370:	a359      	add	r3, pc, #356	; (adr r3, 80064d8 <__ieee754_pow+0x9e8>)
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7f9 ffa9 	bl	80002cc <__adddf3>
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	f7fa f957 	bl	8000630 <__aeabi_dmul>
 8006382:	a357      	add	r3, pc, #348	; (adr r3, 80064e0 <__ieee754_pow+0x9f0>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7f9 ff9e 	bl	80002c8 <__aeabi_dsub>
 800638c:	4622      	mov	r2, r4
 800638e:	462b      	mov	r3, r5
 8006390:	f7fa f94e 	bl	8000630 <__aeabi_dmul>
 8006394:	a354      	add	r3, pc, #336	; (adr r3, 80064e8 <__ieee754_pow+0x9f8>)
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f7f9 ff97 	bl	80002cc <__adddf3>
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	f7fa f945 	bl	8000630 <__aeabi_dmul>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4640      	mov	r0, r8
 80063ac:	4649      	mov	r1, r9
 80063ae:	f7f9 ff8b 	bl	80002c8 <__aeabi_dsub>
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7fa f937 	bl	8000630 <__aeabi_dmul>
 80063c2:	2200      	movs	r2, #0
 80063c4:	e9cd 0100 	strd	r0, r1, [sp]
 80063c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7f9 ff7a 	bl	80002c8 <__aeabi_dsub>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063dc:	f7fa fa52 	bl	8000884 <__aeabi_ddiv>
 80063e0:	4632      	mov	r2, r6
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	463b      	mov	r3, r7
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fa f920 	bl	8000630 <__aeabi_dmul>
 80063f0:	4632      	mov	r2, r6
 80063f2:	463b      	mov	r3, r7
 80063f4:	f7f9 ff6a 	bl	80002cc <__adddf3>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7f9 ff62 	bl	80002c8 <__aeabi_dsub>
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	f7f9 ff5e 	bl	80002c8 <__aeabi_dsub>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	2000      	movs	r0, #0
 8006412:	493b      	ldr	r1, [pc, #236]	; (8006500 <__ieee754_pow+0xa10>)
 8006414:	f7f9 ff58 	bl	80002c8 <__aeabi_dsub>
 8006418:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800641c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	da31      	bge.n	800648a <__ieee754_pow+0x99a>
 8006426:	4650      	mov	r0, sl
 8006428:	ec43 2b10 	vmov	d0, r2, r3
 800642c:	f000 f9c4 	bl	80067b8 <scalbn>
 8006430:	ec51 0b10 	vmov	r0, r1, d0
 8006434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006438:	f7ff bbf1 	b.w	8005c1e <__ieee754_pow+0x12e>
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <__ieee754_pow+0xa14>)
 800643e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006442:	429e      	cmp	r6, r3
 8006444:	f77f af0c 	ble.w	8006260 <__ieee754_pow+0x770>
 8006448:	4b2f      	ldr	r3, [pc, #188]	; (8006508 <__ieee754_pow+0xa18>)
 800644a:	440b      	add	r3, r1
 800644c:	4303      	orrs	r3, r0
 800644e:	d00b      	beq.n	8006468 <__ieee754_pow+0x978>
 8006450:	a327      	add	r3, pc, #156	; (adr r3, 80064f0 <__ieee754_pow+0xa00>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7fa f8e9 	bl	8000630 <__aeabi_dmul>
 800645e:	a324      	add	r3, pc, #144	; (adr r3, 80064f0 <__ieee754_pow+0xa00>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f7ff bbdb 	b.w	8005c1e <__ieee754_pow+0x12e>
 8006468:	4622      	mov	r2, r4
 800646a:	462b      	mov	r3, r5
 800646c:	f7f9 ff2c 	bl	80002c8 <__aeabi_dsub>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4640      	mov	r0, r8
 8006476:	4649      	mov	r1, r9
 8006478:	f7fa fb56 	bl	8000b28 <__aeabi_dcmple>
 800647c:	2800      	cmp	r0, #0
 800647e:	f43f aeef 	beq.w	8006260 <__ieee754_pow+0x770>
 8006482:	e7e5      	b.n	8006450 <__ieee754_pow+0x960>
 8006484:	f04f 0a00 	mov.w	sl, #0
 8006488:	e716      	b.n	80062b8 <__ieee754_pow+0x7c8>
 800648a:	4621      	mov	r1, r4
 800648c:	e7d2      	b.n	8006434 <__ieee754_pow+0x944>
 800648e:	2000      	movs	r0, #0
 8006490:	491b      	ldr	r1, [pc, #108]	; (8006500 <__ieee754_pow+0xa10>)
 8006492:	f7ff bb8d 	b.w	8005bb0 <__ieee754_pow+0xc0>
 8006496:	e9dd 0100 	ldrd	r0, r1, [sp]
 800649a:	f7ff bb89 	b.w	8005bb0 <__ieee754_pow+0xc0>
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7ff bb85 	b.w	8005bb0 <__ieee754_pow+0xc0>
 80064a6:	4693      	mov	fp, r2
 80064a8:	f7ff bb96 	b.w	8005bd8 <__ieee754_pow+0xe8>
 80064ac:	f3af 8000 	nop.w
 80064b0:	00000000 	.word	0x00000000
 80064b4:	3fe62e43 	.word	0x3fe62e43
 80064b8:	fefa39ef 	.word	0xfefa39ef
 80064bc:	3fe62e42 	.word	0x3fe62e42
 80064c0:	0ca86c39 	.word	0x0ca86c39
 80064c4:	be205c61 	.word	0xbe205c61
 80064c8:	72bea4d0 	.word	0x72bea4d0
 80064cc:	3e663769 	.word	0x3e663769
 80064d0:	c5d26bf1 	.word	0xc5d26bf1
 80064d4:	3ebbbd41 	.word	0x3ebbbd41
 80064d8:	af25de2c 	.word	0xaf25de2c
 80064dc:	3f11566a 	.word	0x3f11566a
 80064e0:	16bebd93 	.word	0x16bebd93
 80064e4:	3f66c16c 	.word	0x3f66c16c
 80064e8:	5555553e 	.word	0x5555553e
 80064ec:	3fc55555 	.word	0x3fc55555
 80064f0:	c2f8f359 	.word	0xc2f8f359
 80064f4:	01a56e1f 	.word	0x01a56e1f
 80064f8:	3fe00000 	.word	0x3fe00000
 80064fc:	000fffff 	.word	0x000fffff
 8006500:	3ff00000 	.word	0x3ff00000
 8006504:	4090cbff 	.word	0x4090cbff
 8006508:	3f6f3400 	.word	0x3f6f3400
 800650c:	652b82fe 	.word	0x652b82fe
 8006510:	3c971547 	.word	0x3c971547

08006514 <__ieee754_sqrt>:
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	ec55 4b10 	vmov	r4, r5, d0
 800651c:	4e54      	ldr	r6, [pc, #336]	; (8006670 <__ieee754_sqrt+0x15c>)
 800651e:	43ae      	bics	r6, r5
 8006520:	ee10 0a10 	vmov	r0, s0
 8006524:	462b      	mov	r3, r5
 8006526:	462a      	mov	r2, r5
 8006528:	4621      	mov	r1, r4
 800652a:	d113      	bne.n	8006554 <__ieee754_sqrt+0x40>
 800652c:	ee10 2a10 	vmov	r2, s0
 8006530:	462b      	mov	r3, r5
 8006532:	ee10 0a10 	vmov	r0, s0
 8006536:	4629      	mov	r1, r5
 8006538:	f7fa f87a 	bl	8000630 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7f9 fec2 	bl	80002cc <__adddf3>
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	ec45 4b10 	vmov	d0, r4, r5
 8006550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006554:	2d00      	cmp	r5, #0
 8006556:	dc10      	bgt.n	800657a <__ieee754_sqrt+0x66>
 8006558:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800655c:	4330      	orrs	r0, r6
 800655e:	d0f5      	beq.n	800654c <__ieee754_sqrt+0x38>
 8006560:	b15d      	cbz	r5, 800657a <__ieee754_sqrt+0x66>
 8006562:	ee10 2a10 	vmov	r2, s0
 8006566:	462b      	mov	r3, r5
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7f9 feac 	bl	80002c8 <__aeabi_dsub>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	f7fa f986 	bl	8000884 <__aeabi_ddiv>
 8006578:	e7e6      	b.n	8006548 <__ieee754_sqrt+0x34>
 800657a:	151b      	asrs	r3, r3, #20
 800657c:	d10c      	bne.n	8006598 <__ieee754_sqrt+0x84>
 800657e:	2a00      	cmp	r2, #0
 8006580:	d06d      	beq.n	800665e <__ieee754_sqrt+0x14a>
 8006582:	2000      	movs	r0, #0
 8006584:	02d6      	lsls	r6, r2, #11
 8006586:	d56e      	bpl.n	8006666 <__ieee754_sqrt+0x152>
 8006588:	1e44      	subs	r4, r0, #1
 800658a:	1b1b      	subs	r3, r3, r4
 800658c:	f1c0 0420 	rsb	r4, r0, #32
 8006590:	fa21 f404 	lsr.w	r4, r1, r4
 8006594:	4322      	orrs	r2, r4
 8006596:	4081      	lsls	r1, r0
 8006598:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800659c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80065a0:	07dd      	lsls	r5, r3, #31
 80065a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065a6:	bf42      	ittt	mi
 80065a8:	0052      	lslmi	r2, r2, #1
 80065aa:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80065ae:	0049      	lslmi	r1, r1, #1
 80065b0:	1058      	asrs	r0, r3, #1
 80065b2:	2500      	movs	r5, #0
 80065b4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80065b8:	441a      	add	r2, r3
 80065ba:	0049      	lsls	r1, r1, #1
 80065bc:	2316      	movs	r3, #22
 80065be:	462c      	mov	r4, r5
 80065c0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80065c4:	19a7      	adds	r7, r4, r6
 80065c6:	4297      	cmp	r7, r2
 80065c8:	bfde      	ittt	le
 80065ca:	1bd2      	suble	r2, r2, r7
 80065cc:	19bc      	addle	r4, r7, r6
 80065ce:	19ad      	addle	r5, r5, r6
 80065d0:	0052      	lsls	r2, r2, #1
 80065d2:	3b01      	subs	r3, #1
 80065d4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80065d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80065dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065e0:	d1f0      	bne.n	80065c4 <__ieee754_sqrt+0xb0>
 80065e2:	f04f 0e20 	mov.w	lr, #32
 80065e6:	469c      	mov	ip, r3
 80065e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80065ec:	42a2      	cmp	r2, r4
 80065ee:	eb06 070c 	add.w	r7, r6, ip
 80065f2:	dc02      	bgt.n	80065fa <__ieee754_sqrt+0xe6>
 80065f4:	d112      	bne.n	800661c <__ieee754_sqrt+0x108>
 80065f6:	428f      	cmp	r7, r1
 80065f8:	d810      	bhi.n	800661c <__ieee754_sqrt+0x108>
 80065fa:	2f00      	cmp	r7, #0
 80065fc:	eb07 0c06 	add.w	ip, r7, r6
 8006600:	da34      	bge.n	800666c <__ieee754_sqrt+0x158>
 8006602:	f1bc 0f00 	cmp.w	ip, #0
 8006606:	db31      	blt.n	800666c <__ieee754_sqrt+0x158>
 8006608:	f104 0801 	add.w	r8, r4, #1
 800660c:	1b12      	subs	r2, r2, r4
 800660e:	428f      	cmp	r7, r1
 8006610:	bf88      	it	hi
 8006612:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006616:	1bc9      	subs	r1, r1, r7
 8006618:	4433      	add	r3, r6
 800661a:	4644      	mov	r4, r8
 800661c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006620:	f1be 0e01 	subs.w	lr, lr, #1
 8006624:	443a      	add	r2, r7
 8006626:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800662a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800662e:	d1dd      	bne.n	80065ec <__ieee754_sqrt+0xd8>
 8006630:	430a      	orrs	r2, r1
 8006632:	d006      	beq.n	8006642 <__ieee754_sqrt+0x12e>
 8006634:	1c5c      	adds	r4, r3, #1
 8006636:	bf13      	iteet	ne
 8006638:	3301      	addne	r3, #1
 800663a:	3501      	addeq	r5, #1
 800663c:	4673      	moveq	r3, lr
 800663e:	f023 0301 	bicne.w	r3, r3, #1
 8006642:	106a      	asrs	r2, r5, #1
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	07e9      	lsls	r1, r5, #31
 8006648:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800664c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006650:	bf48      	it	mi
 8006652:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006656:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800665a:	461c      	mov	r4, r3
 800665c:	e776      	b.n	800654c <__ieee754_sqrt+0x38>
 800665e:	0aca      	lsrs	r2, r1, #11
 8006660:	3b15      	subs	r3, #21
 8006662:	0549      	lsls	r1, r1, #21
 8006664:	e78b      	b.n	800657e <__ieee754_sqrt+0x6a>
 8006666:	0052      	lsls	r2, r2, #1
 8006668:	3001      	adds	r0, #1
 800666a:	e78b      	b.n	8006584 <__ieee754_sqrt+0x70>
 800666c:	46a0      	mov	r8, r4
 800666e:	e7cd      	b.n	800660c <__ieee754_sqrt+0xf8>
 8006670:	7ff00000 	.word	0x7ff00000

08006674 <fabs>:
 8006674:	ec53 2b10 	vmov	r2, r3, d0
 8006678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800667c:	ec43 2b10 	vmov	d0, r2, r3
 8006680:	4770      	bx	lr

08006682 <finite>:
 8006682:	ee10 3a90 	vmov	r3, s1
 8006686:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800668a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800668e:	0fc0      	lsrs	r0, r0, #31
 8006690:	4770      	bx	lr

08006692 <matherr>:
 8006692:	2000      	movs	r0, #0
 8006694:	4770      	bx	lr
	...

08006698 <nan>:
 8006698:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80066a0 <nan+0x8>
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	00000000 	.word	0x00000000
 80066a4:	7ff80000 	.word	0x7ff80000

080066a8 <rint>:
 80066a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066aa:	ec51 0b10 	vmov	r0, r1, d0
 80066ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80066b2:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 80066b6:	2e13      	cmp	r6, #19
 80066b8:	ee10 7a10 	vmov	r7, s0
 80066bc:	460b      	mov	r3, r1
 80066be:	4602      	mov	r2, r0
 80066c0:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80066c4:	dc58      	bgt.n	8006778 <rint+0xd0>
 80066c6:	2e00      	cmp	r6, #0
 80066c8:	da2b      	bge.n	8006722 <rint+0x7a>
 80066ca:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80066ce:	4302      	orrs	r2, r0
 80066d0:	d023      	beq.n	800671a <rint+0x72>
 80066d2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80066d6:	4302      	orrs	r2, r0
 80066d8:	4251      	negs	r1, r2
 80066da:	4311      	orrs	r1, r2
 80066dc:	0b09      	lsrs	r1, r1, #12
 80066de:	0c5b      	lsrs	r3, r3, #17
 80066e0:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80066e4:	045b      	lsls	r3, r3, #17
 80066e6:	ea41 0703 	orr.w	r7, r1, r3
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <rint+0x108>)
 80066ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80066f0:	4639      	mov	r1, r7
 80066f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80066f6:	ee10 0a10 	vmov	r0, s0
 80066fa:	4632      	mov	r2, r6
 80066fc:	463b      	mov	r3, r7
 80066fe:	f7f9 fde5 	bl	80002cc <__adddf3>
 8006702:	e9cd 0100 	strd	r0, r1, [sp]
 8006706:	463b      	mov	r3, r7
 8006708:	4632      	mov	r2, r6
 800670a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800670e:	f7f9 fddb 	bl	80002c8 <__aeabi_dsub>
 8006712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006716:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800671a:	ec41 0b10 	vmov	d0, r0, r1
 800671e:	b003      	add	sp, #12
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006722:	4c24      	ldr	r4, [pc, #144]	; (80067b4 <rint+0x10c>)
 8006724:	4134      	asrs	r4, r6
 8006726:	ea01 0704 	and.w	r7, r1, r4
 800672a:	4307      	orrs	r7, r0
 800672c:	d0f5      	beq.n	800671a <rint+0x72>
 800672e:	0861      	lsrs	r1, r4, #1
 8006730:	ea03 0001 	and.w	r0, r3, r1
 8006734:	4302      	orrs	r2, r0
 8006736:	d00b      	beq.n	8006750 <rint+0xa8>
 8006738:	ea23 0101 	bic.w	r1, r3, r1
 800673c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006740:	2e13      	cmp	r6, #19
 8006742:	fa43 f306 	asr.w	r3, r3, r6
 8006746:	bf0c      	ite	eq
 8006748:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800674c:	2200      	movne	r2, #0
 800674e:	430b      	orrs	r3, r1
 8006750:	4619      	mov	r1, r3
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <rint+0x108>)
 8006754:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006758:	e9d5 4500 	ldrd	r4, r5, [r5]
 800675c:	4610      	mov	r0, r2
 800675e:	462b      	mov	r3, r5
 8006760:	4622      	mov	r2, r4
 8006762:	f7f9 fdb3 	bl	80002cc <__adddf3>
 8006766:	e9cd 0100 	strd	r0, r1, [sp]
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006772:	f7f9 fda9 	bl	80002c8 <__aeabi_dsub>
 8006776:	e7d0      	b.n	800671a <rint+0x72>
 8006778:	2e33      	cmp	r6, #51	; 0x33
 800677a:	dd08      	ble.n	800678e <rint+0xe6>
 800677c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006780:	d1cb      	bne.n	800671a <rint+0x72>
 8006782:	ee10 2a10 	vmov	r2, s0
 8006786:	460b      	mov	r3, r1
 8006788:	f7f9 fda0 	bl	80002cc <__adddf3>
 800678c:	e7c5      	b.n	800671a <rint+0x72>
 800678e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8006792:	f04f 34ff 	mov.w	r4, #4294967295
 8006796:	40f4      	lsrs	r4, r6
 8006798:	4220      	tst	r0, r4
 800679a:	d0be      	beq.n	800671a <rint+0x72>
 800679c:	0861      	lsrs	r1, r4, #1
 800679e:	420f      	tst	r7, r1
 80067a0:	bf1f      	itttt	ne
 80067a2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80067a6:	ea27 0101 	bicne.w	r1, r7, r1
 80067aa:	4132      	asrne	r2, r6
 80067ac:	430a      	orrne	r2, r1
 80067ae:	e7cf      	b.n	8006750 <rint+0xa8>
 80067b0:	08006bb0 	.word	0x08006bb0
 80067b4:	000fffff 	.word	0x000fffff

080067b8 <scalbn>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	ec55 4b10 	vmov	r4, r5, d0
 80067be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80067c2:	4606      	mov	r6, r0
 80067c4:	462b      	mov	r3, r5
 80067c6:	b9b2      	cbnz	r2, 80067f6 <scalbn+0x3e>
 80067c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067cc:	4323      	orrs	r3, r4
 80067ce:	d03c      	beq.n	800684a <scalbn+0x92>
 80067d0:	2200      	movs	r2, #0
 80067d2:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <scalbn+0xe8>)
 80067d4:	4629      	mov	r1, r5
 80067d6:	ee10 0a10 	vmov	r0, s0
 80067da:	f7f9 ff29 	bl	8000630 <__aeabi_dmul>
 80067de:	4a31      	ldr	r2, [pc, #196]	; (80068a4 <scalbn+0xec>)
 80067e0:	4296      	cmp	r6, r2
 80067e2:	4604      	mov	r4, r0
 80067e4:	460d      	mov	r5, r1
 80067e6:	460b      	mov	r3, r1
 80067e8:	da13      	bge.n	8006812 <scalbn+0x5a>
 80067ea:	a329      	add	r3, pc, #164	; (adr r3, 8006890 <scalbn+0xd8>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 ff1e 	bl	8000630 <__aeabi_dmul>
 80067f4:	e00a      	b.n	800680c <scalbn+0x54>
 80067f6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d10c      	bne.n	8006818 <scalbn+0x60>
 80067fe:	ee10 2a10 	vmov	r2, s0
 8006802:	462b      	mov	r3, r5
 8006804:	4620      	mov	r0, r4
 8006806:	4629      	mov	r1, r5
 8006808:	f7f9 fd60 	bl	80002cc <__adddf3>
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	e01b      	b.n	800684a <scalbn+0x92>
 8006812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006816:	3a36      	subs	r2, #54	; 0x36
 8006818:	4432      	add	r2, r6
 800681a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800681e:	428a      	cmp	r2, r1
 8006820:	dd0b      	ble.n	800683a <scalbn+0x82>
 8006822:	ec45 4b11 	vmov	d1, r4, r5
 8006826:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006898 <scalbn+0xe0>
 800682a:	f000 f83f 	bl	80068ac <copysign>
 800682e:	a31a      	add	r3, pc, #104	; (adr r3, 8006898 <scalbn+0xe0>)
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	ec51 0b10 	vmov	r0, r1, d0
 8006838:	e7da      	b.n	80067f0 <scalbn+0x38>
 800683a:	2a00      	cmp	r2, #0
 800683c:	dd08      	ble.n	8006850 <scalbn+0x98>
 800683e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006842:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006846:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800684a:	ec45 4b10 	vmov	d0, r4, r5
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006854:	da0d      	bge.n	8006872 <scalbn+0xba>
 8006856:	f24c 3350 	movw	r3, #50000	; 0xc350
 800685a:	429e      	cmp	r6, r3
 800685c:	ec45 4b11 	vmov	d1, r4, r5
 8006860:	dce1      	bgt.n	8006826 <scalbn+0x6e>
 8006862:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006890 <scalbn+0xd8>
 8006866:	f000 f821 	bl	80068ac <copysign>
 800686a:	a309      	add	r3, pc, #36	; (adr r3, 8006890 <scalbn+0xd8>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e7e0      	b.n	8006834 <scalbn+0x7c>
 8006872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006876:	3236      	adds	r2, #54	; 0x36
 8006878:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800687c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006880:	4620      	mov	r0, r4
 8006882:	4629      	mov	r1, r5
 8006884:	2200      	movs	r2, #0
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <scalbn+0xf0>)
 8006888:	e7b2      	b.n	80067f0 <scalbn+0x38>
 800688a:	bf00      	nop
 800688c:	f3af 8000 	nop.w
 8006890:	c2f8f359 	.word	0xc2f8f359
 8006894:	01a56e1f 	.word	0x01a56e1f
 8006898:	8800759c 	.word	0x8800759c
 800689c:	7e37e43c 	.word	0x7e37e43c
 80068a0:	43500000 	.word	0x43500000
 80068a4:	ffff3cb0 	.word	0xffff3cb0
 80068a8:	3c900000 	.word	0x3c900000

080068ac <copysign>:
 80068ac:	ec53 2b10 	vmov	r2, r3, d0
 80068b0:	ee11 0a90 	vmov	r0, s3
 80068b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80068b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80068bc:	ea41 0300 	orr.w	r3, r1, r0
 80068c0:	ec43 2b10 	vmov	d0, r2, r3
 80068c4:	4770      	bx	lr
	...

080068c8 <__errno>:
 80068c8:	4b01      	ldr	r3, [pc, #4]	; (80068d0 <__errno+0x8>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20000020 	.word	0x20000020

080068d4 <_init>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr

080068e0 <_fini>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr
